import unreal
import time

def diagnose_abp_player_issues():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ ABP_Player, –ø—Ä–∏–≤–æ–¥—è—â–∏–µ –∫ –∑–∞–≤—è–∑—ã–≤–∞–Ω–∏—é –Ω–æ–≥ –≤ —É–∑–µ–ª"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú ABP_PLAYER")
    print("=" * 50)
    print("–ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫, –ø—Ä–∏–≤–æ–¥—è—â–∏—Ö –∫ –∑–∞–≤—è–∑—ã–≤–∞–Ω–∏—é –Ω–æ–≥ –≤ —É–∑–µ–ª...")
    
    try:
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        time.sleep(1)
        
        # –ù–∞—Ö–æ–¥–∏–º ABP_Player
        abp_paths = [
            "/Game/BackToZaraysk/Core/Characters/Player/ABP_Player",
            "/Game/BackToZaraysk/Core/Characters/Player/ABP_Player1",
            "/Game/Characters/Player/ABP_Player",
            "/Game/Blueprints/ABP_Player"
        ]
        
        abp_found = False
        for abp_path in abp_paths:
            if unreal.EditorAssetLibrary.does_asset_exist(abp_path):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω ABP_Player: {abp_path}")
                
                anim_bp = unreal.load_asset(abp_path)
                if anim_bp:
                    print(f"üìÇ ABP_Player –∑–∞–≥—Ä—É–∂–µ–Ω: {abp_path}")
                    
                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
                    diagnose_animation_blueprint(anim_bp)
                    abp_found = True
                    break
        
        if not abp_found:
            print("‚ùå ABP_Player –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø—É—Ç—è–º")
            print("üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö Animation Blueprint –≤ –ø—Ä–æ–µ–∫—Ç–µ...")
            find_and_diagnose_all_abp()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()

def find_and_diagnose_all_abp():
    """–ù–∞—Ö–æ–¥–∏—Ç –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ Animation Blueprint"""
    
    try:
        asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
        
        anim_bp_filter = unreal.ARFilter()
        anim_bp_filter.class_paths = [unreal.AnimBlueprint.static_class()]
        
        anim_bp_assets = asset_registry.get_assets(anim_bp_filter)
        
        if anim_bp_assets:
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ Animation Blueprint: {len(anim_bp_assets)}")
            
            for asset_data in anim_bp_assets:
                if "Player" in asset_data.asset_name or "Character" in asset_data.asset_name:
                    print(f"\nüéØ –ê–Ω–∞–ª–∏–∑: {asset_data.asset_name}")
                    
                    anim_bp = unreal.load_asset(asset_data.asset_name)
                    if anim_bp:
                        diagnose_animation_blueprint(anim_bp)
        else:
            print("‚ùå Animation Blueprint –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

def diagnose_animation_blueprint(anim_bp):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ Animation Blueprint"""
    
    print("\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ANIMATION BLUEPRINT")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    diagnose_variables(anim_bp)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–¥—ã
    diagnose_nodes(anim_bp)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    diagnose_connections(anim_bp)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º AnimInstance –∫–ª–∞—Å—Å
    diagnose_anim_instance_class(anim_bp)
    
    print("\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

def diagnose_variables(anim_bp):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
    
    print("\nüìù –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–•:")
    
    try:
        if hasattr(anim_bp, 'variables') and anim_bp.variables:
            existing_vars = [var.variable_name for var in anim_bp.variables]
            print(f"  –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(existing_vars)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            ik_vars = [
                "LeftFootEffectorLocation",
                "RightFootEffectorLocation",
                "LeftFootIKAlpha", 
                "RightFootIKAlpha"
            ]
            
            missing_ik_vars = []
            for var in ik_vars:
                if var in existing_vars:
                    print(f"  ‚úÖ {var}")
                else:
                    print(f"  ‚ùå {var} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                    missing_ik_vars.append(var)
            
            if missing_ik_vars:
                print(f"\n‚ö†Ô∏è –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –ò–ö –ü–ï–†–ï–ú–ï–ù–ù–´–ï: {missing_ik_vars}")
                print("   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –Ω–µ—Ä–∞–±–æ—á–µ–π –ò–ö!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            duplicates = []
            for var in existing_vars:
                if existing_vars.count(var) > 1:
                    duplicates.append(var)
            
            if duplicates:
                print(f"\n‚ö†Ô∏è –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–ï: {duplicates}")
                print("   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º!")
                
        else:
            print("  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")

def diagnose_nodes(anim_bp):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–¥—ã"""
    
    print("\nüîó –ü–†–û–í–ï–†–ö–ê –ù–û–î:")
    
    try:
        if hasattr(anim_bp, 'anim_graph') and anim_bp.anim_graph:
            if hasattr(anim_bp.anim_graph, 'nodes') and anim_bp.anim_graph.nodes:
                nodes = [node.node_name for node in anim_bp.anim_graph.nodes]
                print(f"  –ù–∞–π–¥–µ–Ω–æ –Ω–æ–¥: {len(nodes)}")
                
                # –ò—â–µ–º –ò–ö –Ω–æ–¥—ã
                ik_nodes = [node for node in nodes if "IK" in node or "TwoBone" in node]
                if ik_nodes:
                    print(f"  ‚úÖ –ò–ö –Ω–æ–¥—ã –Ω–∞–π–¥–µ–Ω—ã: {ik_nodes}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ò–ö –Ω–æ–¥
                    for node_name in ik_nodes:
                        diagnose_ik_node(anim_bp, node_name)
                else:
                    print("  ‚ùå –ò–ö –Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                    print("     –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ—Ä–∞–±–æ—á–µ–π –ò–ö!")
                
                # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –Ω–æ–¥—ã
                problematic_nodes = [node for node in nodes if any(problem in node.lower() for problem in ["broken", "error", "invalid"])]
                if problematic_nodes:
                    print(f"  ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–´–ï –ù–û–î–´: {problematic_nodes}")
                
                # –ò—â–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–æ–¥—ã
                duplicates = []
                for node in nodes:
                    if nodes.count(node) > 1:
                        duplicates.append(node)
                
                if duplicates:
                    print(f"  ‚ö†Ô∏è –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ù–û–î–´: {duplicates}")
                    print("     –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –∑–∞–≤—è–∑—ã–≤–∞–Ω–∏—é –Ω–æ–≥ –≤ —É–∑–µ–ª!")
                    
            else:
                print("  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–¥–∞–º AnimGraph")
        else:
            print("  ‚ùå AnimGraph –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–¥: {e}")

def diagnose_ik_node(anim_bp, node_name):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ò–ö –Ω–æ–¥"""
    
    print(f"\n  üîç –ê–Ω–∞–ª–∏–∑ –ò–ö –Ω–æ–¥–∞: {node_name}")
    
    try:
        # –ò—â–µ–º –Ω–æ–¥ –ø–æ –∏–º–µ–Ω–∏
        for node in anim_bp.anim_graph.nodes:
            if node.node_name == node_name:
                print(f"    –ù–∞–π–¥–µ–Ω –Ω–æ–¥: {node_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –Ω–æ–¥–∞
                if hasattr(node, 'node_class'):
                    print(f"    –¢–∏–ø: {node.node_class}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if hasattr(node, 'pins'):
                    pins = [pin.pin_name for pin in node.pins]
                    print(f"    –ü–∏–Ω—ã: {pins}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∏–Ω—ã
                    connected_pins = [pin for pin in node.pins if pin.linked_to]
                    if connected_pins:
                        print(f"    –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∏–Ω—ã: {[pin.pin_name for pin in connected_pins]}")
                    else:
                        print(f"    ‚ö†Ô∏è –ù–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô!")
                        print(f"       –ù–æ–¥ {node_name} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - —ç—Ç–æ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ—Ä–∞–±–æ—á–µ–π –ò–ö!")
                
                break
        else:
            print(f"    ‚ùå –ù–æ–¥ {node_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä–∞—Ñ–µ")
            
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–¥–∞ {node_name}: {e}")

def diagnose_connections(anim_bp):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    
    print("\nüîå –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô:")
    
    try:
        if hasattr(anim_bp, 'anim_graph') and anim_bp.anim_graph:
            if hasattr(anim_bp.anim_graph, 'nodes') and anim_bp.anim_graph.nodes:
                total_connections = 0
                broken_connections = 0
                
                for node in anim_bp.anim_graph.nodes:
                    if hasattr(node, 'pins'):
                        for pin in node.pins:
                            if pin.linked_to:
                                total_connections += 1
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                                try:
                                    if not pin.linked_to:
                                        broken_connections += 1
                                except:
                                    broken_connections += 1
                
                print(f"  –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {total_connections}")
                print(f"  –°–ª–æ–º–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {broken_connections}")
                
                if broken_connections > 0:
                    print(f"  ‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –°–õ–û–ú–ê–ù–ù–´–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø!")
                    print(f"     –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –∑–∞–≤—è–∑—ã–≤–∞–Ω–∏—é –Ω–æ–≥ –≤ —É–∑–µ–ª!")
                
                if total_connections == 0:
                    print(f"  ‚ùå –ù–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –í –ì–†–ê–§–ï!")
                    print(f"     –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ—Ä–∞–±–æ—á–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏!")
                    
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")

def diagnose_anim_instance_class(anim_bp):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å AnimInstance"""
    
    print("\nüé≠ –ü–†–û–í–ï–†–ö–ê –ö–õ–ê–°–°–ê ANIMINSTANCE:")
    
    try:
        if hasattr(anim_bp, 'generated_class'):
            generated_class = anim_bp.generated_class
            if generated_class:
                class_name = generated_class.get_name()
                print(f"  –ö–ª–∞—Å—Å: {class_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –ª–∏ –æ—Ç –Ω–∞—à–µ–≥–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
                if "BTZBaseCharacterAnimInstance" in class_name:
                    print(f"  ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π AnimInstance")
                else:
                    print(f"  ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π AnimInstance")
                    print(f"     –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UBTZBaseCharacterAnimInstance")
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å")
        else:
            print(f"  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ generated_class")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∞—Å—Å–∞: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnose_abp_player_issues()
