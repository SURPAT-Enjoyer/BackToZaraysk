import unreal

def test_strafe_component():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ StrafeComponent"""
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï STRAFE COMPONENT ===")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º BP_Player
    bp_player = unreal.load_asset("/Game/BackToZaraysk/Core/Characters/Player/BP_Player.BP_Player")
    if not bp_player:
        print("‚ùå BP_Player –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º StrafeComponent
    strafe_component = None
    for component in bp_player.components:
        if component.get_name() == "StrafeComponent":
            strafe_component = component
            break
    
    if not strafe_component:
        print("‚ùå StrafeComponent –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ BP_Player!")
        return
    
    print("‚úì StrafeComponent –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ StrafeComponent:")
    print(f"  Strafe Distance: {strafe_component.get_editor_property('StrafeDistance')}")
    print(f"  Strafe Duration: {strafe_component.get_editor_property('StrafeDuration')}")
    print(f"  Strafe Cooldown: {strafe_component.get_editor_property('StrafeCooldown')}")
    print(f"  Space Double Press Window: {strafe_component.get_editor_property('SpaceDoublePressWindow')}")
    print(f"  Strafe Speed: {strafe_component.get_editor_property('StrafeSpeed')}")
    print(f"  Smoothness Factor: {strafe_component.get_editor_property('SmoothnessFactor')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏–≤—É—é
    curve = strafe_component.get_editor_property('StrafeCurve')
    if curve:
        print(f"  Strafe Curve: {curve.get_name()} (–Ω–∞–π–¥–µ–Ω–∞)")
    else:
        print("  Strafe Curve: –ù–ï –ù–ê–ó–ù–ê–ß–ï–ù–ê!")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

def test_input_actions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Input Actions"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï INPUT ACTIONS ===")
    
    actions = [
        "/Game/BackToZaraysk/Core/Input/Actions/Strafe/IA_A.IA_A",
        "/Game/BackToZaraysk/Core/Input/Actions/Strafe/IA_D.IA_D",
        "/Game/BackToZaraysk/Core/Input/Actions/Strafe/IA_Space.IA_Space"
    ]
    
    for action_path in actions:
        action = unreal.load_asset(action_path)
        if action:
            print(f"‚úì {action.get_name()} - {action.value_type}")
        else:
            print(f"‚ùå {action_path} - –ù–ï –ù–ê–ô–î–ï–ù")

def test_imc_default():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IMC_Default"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï IMC_DEFAULT ===")
    
    imc_default = unreal.load_asset("/Game/BackToZaraysk/Core/Input/IMC_Default.IMC_Default")
    if not imc_default:
        print("‚ùå IMC_Default –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"‚úì IMC_Default –Ω–∞–π–¥–µ–Ω")
    print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–ø–ø–∏–Ω–≥–æ–≤: {len(imc_default.mappings)}")
    
    # –ò—â–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è —Å—Ç—Ä–µ–π—Ñ–∞
    strafe_mappings = []
    for mapping in imc_default.mappings:
        if mapping.action:
            action_name = mapping.action.get_name()
            if "IA_A" in action_name or "IA_D" in action_name or "IA_Space" in action_name:
                strafe_mappings.append(f"{action_name} -> {mapping.key}")
    
    if strafe_mappings:
        print("  –ú–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è —Å—Ç—Ä–µ–π—Ñ–∞:")
        for mapping in strafe_mappings:
            print(f"    ‚úì {mapping}")
    else:
        print("  ‚ùå –ù–ï–¢ –ú–ê–ü–ü–ò–ù–ì–û–í –î–õ–Ø –°–¢–†–ï–ô–§–ê!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        test_strafe_component()
        test_input_actions()
        test_imc_default()
        
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("–ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Blueprint:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Input Events –≤ BP_Player")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–∑–æ–≤ Parent Functions –≤ Handle A/D/Space Input")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ ABP_Player")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")

if __name__ == "__main__":
    main()


