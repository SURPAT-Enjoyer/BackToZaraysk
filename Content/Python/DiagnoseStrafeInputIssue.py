import unreal

def diagnose_strafe_input_issue():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä—ã–∂–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–µ–π—Ñ–∞"""
    print("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –ü–†–´–ñ–ö–ê–ú–ò ===")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Input Actions
    print("\n1. –ü–†–û–í–ï–†–ö–ê INPUT ACTIONS:")
    input_actions = [
        "/Game/BackToZaraysk/Core/Input/Actions/Strafe/IA_A.IA_A",
        "/Game/BackToZaraysk/Core/Input/Actions/Strafe/IA_D.IA_D",
        "/Game/BackToZaraysk/Core/Input/Actions/Strafe/IA_Space.IA_Space"
    ]
    
    for action_path in input_actions:
        action = unreal.load_asset(action_path)
        if action:
            print(f"‚úì {action_path} - –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {action_path} - –ù–ï –ù–ê–ô–î–ï–ù!")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º IMC_Default
    print("\n2. –ü–†–û–í–ï–†–ö–ê IMC_DEFAULT:")
    imc_default = unreal.load_asset("/Game/BackToZaraysk/Core/Input/IMC_Default.IMC_Default")
    if imc_default:
        print("‚úì IMC_Default –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—à–∏—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤
        strafe_mappings = 0
        for mapping in imc_default.mappings:
            if mapping.action and any("IA_A" in str(mapping.action) or "IA_D" in str(mapping.action) or "IA_Space" in str(mapping.action)):
                strafe_mappings += 1
                print(f"  ‚úì –ù–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥: {mapping.action} -> {mapping.key}")
        
        if strafe_mappings == 0:
            print("  ‚ùå –ù–ï–¢ –ú–ê–ü–ü–ò–ù–ì–û–í –î–õ–Ø –°–¢–†–ï–ô–§–ê!")
    else:
        print("‚ùå IMC_Default –ù–ï –ù–ê–ô–î–ï–ù!")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º BP_Player
    print("\n3. –ü–†–û–í–ï–†–ö–ê BP_PLAYER:")
    bp_player = unreal.load_asset("/Game/BackToZaraysk/Core/Characters/Player/BP_Player.BP_Player")
    if bp_player:
        print("‚úì BP_Player –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º StrafeComponent
        strafe_component = None
        for component in bp_player.components:
            if component.get_name() == "StrafeComponent":
                strafe_component = component
                print("  ‚úì StrafeComponent –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ StrafeComponent
                print(f"    Strafe Distance: {strafe_component.get_editor_property('StrafeDistance')}")
                print(f"    Strafe Duration: {strafe_component.get_editor_property('StrafeDuration')}")
                print(f"    Strafe Cooldown: {strafe_component.get_editor_property('StrafeCooldown')}")
                print(f"    Space Double Press Window: {strafe_component.get_editor_property('SpaceDoublePressWindow')}")
                print(f"    Strafe Speed: {strafe_component.get_editor_property('StrafeSpeed')}")
                break
        
        if not strafe_component:
            print("  ‚ùå StrafeComponent –ù–ï –ù–ê–ô–î–ï–ù!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        functions = ["Handle A Input", "Handle D Input", "Handle Space Input"]
        for func_name in functions:
            function_found = False
            for function in bp_player.functions:
                if function.get_name() == func_name:
                    function_found = True
                    break
            
            if function_found:
                print(f"  ‚úì –§—É–Ω–∫—Ü–∏—è {func_name} –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print(f"  ‚ùå –§—É–Ω–∫—Ü–∏—è {func_name} –ù–ï –ù–ê–ô–î–ï–ù–ê!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Input Events
        input_events_found = 0
        for graph in bp_player.function_graphs:
            if "Input" in graph.get_name():
                input_events_found += 1
        
        if input_events_found > 0:
            print(f"  ‚úì –ù–∞–π–¥–µ–Ω–æ {input_events_found} Input Graph")
        else:
            print("  ‚ùå Input Events –ù–ï –ù–ê–ô–î–ï–ù–´!")
            
    else:
        print("‚ùå BP_Player –ù–ï –ù–ê–ô–î–ï–ù!")
    
    print("\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")

def check_common_input_issues():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å Input"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê –ß–ê–°–¢–´–• –ü–†–û–ë–õ–ï–ú ===")
    
    print("\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–´–ñ–ö–û–í –í–ú–ï–°–¢–û –°–¢–†–ï–ô–§–ê:")
    print("1. ‚ùå Input Events –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Ñ—É–Ω–∫—Ü–∏—è–º Handle A/D/Space Input")
    print("2. ‚ùå –§—É–Ω–∫—Ü–∏–∏ Handle A/D/Space Input –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç Parent Function")
    print("3. ‚ùå StrafeComponent –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("4. ‚ùå Input Actions –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–∞–∫ Digital (bool)")
    print("5. ‚ùå IMC_Default –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤")
    print("6. ‚ùå Space Input –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å Jump Input")
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ IA_A/IA_D/IA_Space –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ Handle A/D/Space Input")
    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Handle —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞—é—Ç Call Parent Function")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ StrafeComponent –≤ BP_Player")
    print("4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Space Input –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å Jump")
    print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ Input Actions –∏–º–µ—é—Ç Value Type: Digital (bool)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    try:
        diagnose_strafe_input_issue()
        check_common_input_issues()
        
        print("\nüö® –°–†–û–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ BP_Player")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Event Graph –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Input Events")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞—é—Ç Parent Function")
        print("5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ StrafeComponent –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: {e}")

if __name__ == "__main__":
    main()


