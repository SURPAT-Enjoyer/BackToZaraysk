import unreal

def run_ik_setup_in_editor():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É IK –≤–Ω—É—Ç—Ä–∏ Unreal Editor"""
    
    print("=== –ù–ê–°–¢–†–û–ô–ö–ê IK –í –†–ï–î–ê–ö–¢–û–†–ï ===")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Animation Blueprint
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    anim_bp_assets = asset_registry.get_assets_by_class("AnimBlueprint", True)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ Animation Blueprint: {len(anim_bp_assets)}")
    
    for asset_data in anim_bp_assets:
        asset_path = asset_data.asset_name
        print(f"\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {asset_path}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Animation Blueprint
            anim_bp = unreal.load_asset(asset_path)
            if not anim_bp:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {asset_path}")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK
            create_ik_variables_in_abp(anim_bp)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            unreal.EditorAssetLibrary.save_asset(asset_path)
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è: {asset_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {asset_path}: {e}")

def create_ik_variables_in_abp(anim_bp):
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK –≤ Animation Blueprint"""
    
    # –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    variables_to_create = [
        ("LeftFootEffectorLocation", unreal.Vector, unreal.Vector(0, 0, 0)),
        ("RightFootEffectorLocation", unreal.Vector, unreal.Vector(0, 0, 0)),
        ("LeftFootIKAlpha", unreal.Float, 1.0),
        ("RightFootIKAlpha", unreal.Float, 1.0)
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    existing_vars = [var.variable_name for var in anim_bp.variables]
    
    created_count = 0
    
    for var_name, var_type, default_value in variables_to_create:
        if var_name not in existing_vars:
            try:
                # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                new_var = unreal.EditorAnimBlueprintUtils.add_variable(
                    anim_bp,
                    var_name,
                    var_type
                )
                
                if new_var:
                    new_var.variable_name = var_name
                    new_var.default_value = default_value
                    created_count += 1
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var_name}")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å: {var_name}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {var_name}: {e}")
        else:
            print(f"‚ÑπÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {var_name}")
    
    print(f"–°–æ–∑–¥–∞–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {created_count}")

def create_ik_functions_in_abp(anim_bp):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ IK –≤ Animation Blueprint"""
    
    functions_to_create = [
        "SetLeftFootIK",
        "SetRightFootIK",
        "GetLeftFootIK", 
        "GetRightFootIK"
    ]
    
    created_count = 0
    
    for func_name in functions_to_create:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è
            existing_functions = [func.function_name for func in anim_bp.functions]
            
            if func_name not in existing_functions:
                new_func = unreal.EditorAnimBlueprintUtils.add_function(
                    anim_bp,
                    func_name
                )
                
                if new_func:
                    created_count += 1
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {func_name}")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é: {func_name}")
            else:
                print(f"‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {func_name}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}: {e}")
    
    print(f"–°–æ–∑–¥–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {created_count}")

def setup_character_ik():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç IK –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    print("\n=== –ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–°–û–ù–ê–ñ–ê ===")
    
    # –ù–∞—Ö–æ–¥–∏–º Blueprint –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    blueprint_assets = asset_registry.get_assets_by_class("Blueprint", True)
    
    character_found = False
    
    for asset_data in blueprint_assets:
        if "PlayerCharacter" in str(asset_data.asset_name):
            character_found = True
            print(f"–ù–∞–π–¥–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {asset_data.asset_name}")
            
            try:
                character_bp = unreal.load_asset(asset_data.asset_name)
                if character_bp:
                    check_character_sockets(character_bp)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
    
    if not character_found:
        print("‚ÑπÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Blueprint –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'PlayerCharacter'")

def check_character_sockets(character_bp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∫–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∫–µ–ª–µ—Ç–∞
    skeletal_mesh_comp = None
    for comp in character_bp.components:
        if isinstance(comp, unreal.SkeletalMeshComponent):
            skeletal_mesh_comp = comp
            break
    
    if skeletal_mesh_comp:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∫–µ—Ç—ã
        left_socket_exists = skeletal_mesh_comp.does_socket_exist("foot_l")
        right_socket_exists = skeletal_mesh_comp.does_socket_exist("foot_r")
        
        print(f"–°–æ–∫–µ—Ç foot_l: {'‚úÖ' if left_socket_exists else '‚ùå'}")
        print(f"–°–æ–∫–µ—Ç foot_r: {'‚úÖ' if right_socket_exists else '‚ùå'}")
        
        if not left_socket_exists or not right_socket_exists:
            print("‚ÑπÔ∏è –°–æ–∫–µ—Ç—ã –¥–ª—è –Ω–æ–≥ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é:")
            print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∫–µ–ª–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
            print("2. –î–æ–±–∞–≤—å—Ç–µ —Å–æ–∫–µ—Ç 'foot_l' –∫ –∫–æ—Å—Ç–∏ –ª–µ–≤–æ–π –Ω–æ–≥–∏")
            print("3. –î–æ–±–∞–≤—å—Ç–µ —Å–æ–∫–µ—Ç 'foot_r' –∫ –∫–æ—Å—Ç–∏ –ø—Ä–∞–≤–æ–π –Ω–æ–≥–∏")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ù–ê–°–¢–†–û–ô–ö–ò IK –í –†–ï–î–ê–ö–¢–û–†–ï")
    print("=" * 50)
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Animation Blueprint
        run_ik_setup_in_editor()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        setup_character_ik()
        
        print("\n" + "=" * 50)
        print("‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 50)
        print("–°–æ–∑–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        print("‚Ä¢ LeftFootEffectorLocation (Vector)")
        print("‚Ä¢ RightFootEffectorLocation (Vector)")
        print("‚Ä¢ LeftFootIKAlpha (Float)")
        print("‚Ä¢ RightFootIKAlpha (Float)")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Animation Blueprint")
        print("2. –î–æ–±–∞–≤—å—Ç–µ Two Bone IK –Ω–æ–¥—ã")
        print("3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫ IK –Ω–æ–¥–∞–º")
        print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ—Å—Ç–∏ –¥–ª—è IK")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
