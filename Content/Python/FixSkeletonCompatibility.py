import unreal
import time

def fix_skeleton_compatibility():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∫–µ–ª–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π –ª–∞–∑–∞–Ω–∏—è"""
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –°–ö–ï–õ–ï–¢–û–í")
    print("=" * 50)
    print("–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É 'skeletons are not compatible'...")
    
    try:
        time.sleep(1)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–µ–ª–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞
        target_skeleton_path = "/Game/BackToZaraysk/Core/Characters/Player/Meshes/SK_Mannequin.SK_Mannequin"
        target_skeleton = unreal.load_asset(target_skeleton_path)
        
        if not target_skeleton:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫–µ–ª–µ—Ç: {target_skeleton_path}")
            return
        
        print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–µ–ª–µ—Ç –Ω–∞–π–¥–µ–Ω: {target_skeleton_path}")
        
        # –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–∞—Ü–∏–π –ª–∞–∑–∞–Ω–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        climbing_animations = [
            "/Game/FreeAnimationLibrary/Animations/Vault/anim_Vault",
            "/Game/FreeAnimationLibrary/Animations/Mantle/anim_Mantle_1M_R",
            "/Game/FreeAnimationLibrary/Animations/Mantle/anim_Mantle_2M_R",
            "/Game/FreeAnimationLibrary/Animations/LedgeClimb/anim_LedgeClimb_ClimbUp",
            "/Game/FreeAnimationLibrary/Animations/LedgeClimb/anim_LedgeClimb_Idle",
            "/Game/FreeAnimationLibrary/Animations/LedgeClimb/anim_LedgeClimbing_Down",
            "/Game/FreeAnimationLibrary/Animations/LedgeClimb/anim_LedgeClimbing_Left",
            "/Game/FreeAnimationLibrary/Animations/LedgeClimb/anim_LedgeClimbing_Right",
            "/Game/FreeAnimationLibrary/Animations/LedgeClimb/anim_LedgeClimbing_Up"
        ]
        
        fixed_count = 0
        for anim_path in climbing_animations:
            if unreal.EditorAssetLibrary.does_asset_exist(anim_path):
                print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: {anim_path}")
                if fix_animation_skeleton(anim_path, target_skeleton):
                    fixed_count += 1
                    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {anim_path}")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å: {anim_path}")
            else:
                print(f"‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {anim_path}")
        
        print(f"\nüéØ –ò–¢–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–û: {fixed_count} –∞–Ω–∏–º–∞—Ü–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ABP_Player
        check_abp_player_skeleton()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

def fix_animation_skeleton(anim_path, target_skeleton):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–µ–ª–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        anim_sequence = unreal.load_asset(anim_path)
        if not anim_sequence:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∫–µ–ª–µ—Ç
        current_skeleton = anim_sequence.get_skeleton()
        if current_skeleton == target_skeleton:
            print(f"  ‚úÖ –°–∫–µ–ª–µ—Ç —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: {anim_path}")
            return True
        
        print(f"  üîÑ –ú–µ–Ω—è–µ–º —Å–∫–µ–ª–µ—Ç –¥–ª—è: {anim_path}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–µ–ª–µ—Ç–æ–º
        new_anim_path = anim_path.replace(".", "_Fixed.")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        unreal.EditorAssetLibrary.duplicate_asset(anim_path, new_anim_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        new_anim = unreal.load_asset(new_anim_path)
        if new_anim:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫–µ–ª–µ—Ç
            new_anim.set_skeleton(target_skeleton)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            unreal.EditorAssetLibrary.save_asset(new_anim_path)
            
            # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
            unreal.EditorAssetLibrary.delete_asset(anim_path)
            unreal.EditorAssetLibrary.rename_asset(new_anim_path, anim_path)
            
            return True
        
        return False
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ {anim_path}: {e}")
        return False

def check_abp_player_skeleton():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–µ–ª–µ—Ç ABP_Player"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê ABP_PLAYER")
    print("-" * 30)
    
    abp_paths = [
        "/Game/BackToZaraysk/Core/Characters/Player/ABP_Player",
        "/Game/BackToZaraysk/Core/Characters/Player/ABP_Player1"
    ]
    
    target_skeleton_path = "/Game/BackToZaraysk/Core/Characters/Player/Meshes/SK_Mannequin.SK_Mannequin"
    target_skeleton = unreal.load_asset(target_skeleton_path)
    
    for abp_path in abp_paths:
        if unreal.EditorAssetLibrary.does_asset_exist(abp_path):
            print(f"üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º: {abp_path}")
            
            anim_bp = unreal.load_asset(abp_path)
            if anim_bp:
                current_skeleton = anim_bp.get_skeleton()
                if current_skeleton == target_skeleton:
                    print(f"  ‚úÖ –°–∫–µ–ª–µ—Ç ABP_Player –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
                else:
                    print(f"  ‚ùå –°–∫–µ–ª–µ—Ç ABP_Player –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
                    print(f"  üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∫–µ–ª–µ—Ç ABP_Player...")
                    
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∫–µ–ª–µ—Ç ABP_Player
                    anim_bp.set_skeleton(target_skeleton)
                    unreal.EditorAssetLibrary.save_asset(abp_path)
                    print(f"  ‚úÖ –°–∫–µ–ª–µ—Ç ABP_Player –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
            break

def create_compatible_animations():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–∞–∑–∞–Ω–∏—è"""
    print("\nüé≠ –°–û–ó–î–ê–ù–ò–ï –°–û–í–ú–ï–°–¢–ò–ú–´–• –ê–ù–ò–ú–ê–¶–ò–ô")
    print("-" * 40)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–µ–ª–µ—Ç
    target_skeleton_path = "/Game/BackToZaraysk/Core/Characters/Player/Meshes/SK_Mannequin.SK_Mannequin"
    target_skeleton = unreal.load_asset(target_skeleton_path)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–∞–∑–∞–Ω–∏—è
    climbing_animations = [
        ("anim_Vault_Simple", "Vault animation"),
        ("anim_Mantle_Simple", "Mantle animation"),
        ("anim_LedgeClimb_Simple", "Ledge climb animation")
    ]
    
    for anim_name, description in climbing_animations:
        print(f"üé¨ –°–æ–∑–¥–∞–µ–º: {anim_name} - {description}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        factory = unreal.AnimationSequenceFactory()
        factory.target_skeleton = target_skeleton
        
        anim_path = f"/Game/BackToZaraysk/Core/Characters/Player/Animations/{anim_name}.{anim_name}"
        new_anim = factory.factory_create_new(anim_path)
        
        if new_anim:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            new_anim.set_editor_property("sequence_length", 2.0)  # 2 —Å–µ–∫—É–Ω–¥—ã
            new_anim.set_editor_property("number_of_sampled_keys", 60)  # 60 –∫–ª—é—á–µ–π
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            unreal.EditorAssetLibrary.save_asset(anim_path)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {anim_name}")
        else:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å: {anim_name}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ï–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –°–ö–ï–õ–ï–¢–û–í")
    print("=" * 60)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    fix_skeleton_compatibility()
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    create_compatible_animations()
    
    print("\nüéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–∞–∑–∞–Ω–∏—è –≤ ABP_Player")
    print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ ABP_Player")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ State Machine –¥–ª—è –ª–∞–∑–∞–Ω–∏—è")
    print("3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏")
    print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥—ã")

if __name__ == "__main__":
    main()





