import unreal
import time

def create_compatible_climbing_animations():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–∞–∑–∞–Ω–∏—è –¥–ª—è ABP_Player"""
    
    print("üé≠ –°–û–ó–î–ê–ù–ò–ï –°–û–í–ú–ï–°–¢–ò–ú–´–• –ê–ù–ò–ú–ê–¶–ò–ô –õ–ê–ó–ê–ù–ò–Ø")
    print("=" * 50)
    print("–°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å —Å–∫–µ–ª–µ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...")
    
    try:
        time.sleep(1)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–µ–ª–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞
        target_skeleton_path = "/Game/BackToZaraysk/Core/Characters/Player/Meshes/SK_Mannequin.SK_Mannequin"
        target_skeleton = unreal.load_asset(target_skeleton_path)
        
        if not target_skeleton:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫–µ–ª–µ—Ç: {target_skeleton_path}")
            return
        
        print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–µ–ª–µ—Ç –Ω–∞–π–¥–µ–Ω: {target_skeleton_path}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π –ª–∞–∑–∞–Ω–∏—è
        climbing_animations_path = "/Game/BackToZaraysk/Core/Characters/Player/Animations/Climbing"
        if not unreal.EditorAssetLibrary.does_directory_exist(climbing_animations_path):
            unreal.EditorAssetLibrary.make_directory(climbing_animations_path)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {climbing_animations_path}")
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–∞–∑–∞–Ω–∏—è
        climbing_animations = [
            {
                "name": "AS_Vault",
                "description": "Vault animation - –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ",
                "length": 1.5,
                "keys": 45
            },
            {
                "name": "AS_Mantle_1M",
                "description": "Mantle 1M animation - –≤–∑–±–∏—Ä–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ 1 –º–µ—Ç—Ä",
                "length": 2.0,
                "keys": 60
            },
            {
                "name": "AS_Mantle_2M",
                "description": "Mantle 2M animation - –≤–∑–±–∏—Ä–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ 2 –º–µ—Ç—Ä–∞",
                "length": 2.5,
                "keys": 75
            },
            {
                "name": "AS_LedgeClimb_Up",
                "description": "Ledge climb up animation - –≤–∑–±–∏—Ä–∞–Ω–∏–µ –Ω–∞ –∫—Ä–∞–π",
                "length": 2.0,
                "keys": 60
            },
            {
                "name": "AS_LedgeClimb_Idle",
                "description": "Ledge climb idle animation - –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ –∫—Ä–∞—é",
                "length": 1.0,
                "keys": 30
            },
            {
                "name": "AS_LedgeClimb_Down",
                "description": "Ledge climb down animation - —Å–ø—É—Å–∫ —Å –∫—Ä–∞—è",
                "length": 1.5,
                "keys": 45
            }
        ]
        
        created_count = 0
        for anim_data in climbing_animations:
            anim_path = f"{climbing_animations_path}/{anim_data['name']}.{anim_data['name']}"
            
            if not unreal.EditorAssetLibrary.does_asset_exist(anim_path):
                print(f"üé¨ –°–æ–∑–¥–∞–µ–º: {anim_data['name']} - {anim_data['description']}")
                
                if create_climbing_animation(anim_path, target_skeleton, anim_data):
                    created_count += 1
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {anim_data['name']}")
                else:
                    print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å: {anim_data['name']}")
            else:
                print(f"  ‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {anim_data['name']}")
        
        print(f"\nüéØ –ò–¢–û–ì–û –°–û–ó–î–ê–ù–û: {created_count} –∞–Ω–∏–º–∞—Ü–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º Blend Space –¥–ª—è Mantle
        create_mantle_blend_space(climbing_animations_path, target_skeleton)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        verify_created_animations(climbing_animations_path)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π: {e}")
        import traceback
        traceback.print_exc()

def create_climbing_animation(anim_path, target_skeleton, anim_data):
    """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –ª–∞–∑–∞–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        factory = unreal.AnimationSequenceFactory()
        factory.target_skeleton = target_skeleton
        
        new_anim = factory.factory_create_new(anim_path)
        
        if new_anim:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
            new_anim.set_editor_property("sequence_length", anim_data["length"])
            new_anim.set_editor_property("number_of_sampled_keys", anim_data["keys"])
            
            # –í–∫–ª—é—á–∞–µ–º Root Motion
            new_anim.set_editor_property("enable_root_motion", True)
            new_anim.set_editor_property("root_motion_root_lock", unreal.AnimationRootMotionRootLock.UNLOCKED)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–∏—é
            new_anim.set_editor_property("compression_scheme", unreal.AnimationCompressionLibrary.get_default_animation_compression())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            unreal.EditorAssetLibrary.save_asset(anim_path)
            return True
        
        return False
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ {anim_path}: {e}")
        return False

def create_mantle_blend_space(climbing_animations_path, target_skeleton):
    """–°–æ–∑–¥–∞–µ—Ç Blend Space –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π Mantle"""
    print("\nüé® –°–û–ó–î–ê–ù–ò–ï BLEND SPACE –î–õ–Ø MANTLE")
    print("-" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º Blend Space 1D
        factory = unreal.BlendSpaceFactory1D()
        factory.target_skeleton = target_skeleton
        
        blend_space_path = f"{climbing_animations_path}/BS_Mantle.BS_Mantle"
        
        if not unreal.EditorAssetLibrary.does_asset_exist(blend_space_path):
            print(f"üé¨ –°–æ–∑–¥–∞–µ–º Blend Space: BS_Mantle")
            
            blend_space = factory.factory_create_new(blend_space_path)
            
            if blend_space:
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Blend Space
                blend_space.set_editor_property("b_snap_to_grid", True)
                blend_space.set_editor_property("b_show_grid", True)
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å—å
                axis_settings = blend_space.get_editor_property("axis_settings")
                axis_settings[0].set_editor_property("axis_name", "Height")
                axis_settings[0].set_editor_property("min_value", 0.0)
                axis_settings[0].set_editor_property("max_value", 200.0)
                axis_settings[0].set_editor_property("num_grid_divisions", 4)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
                add_animation_to_blend_space(blend_space, f"{climbing_animations_path}/AS_Mantle_1M.AS_Mantle_1M", 50.0)
                add_animation_to_blend_space(blend_space, f"{climbing_animations_path}/AS_Mantle_2M.AS_Mantle_2M", 150.0)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                unreal.EditorAssetLibrary.save_asset(blend_space_path)
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω Blend Space: BS_Mantle")
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Blend Space")
        else:
            print(f"  ‚ö†Ô∏è Blend Space —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: BS_Mantle")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Blend Space: {e}")

def add_animation_to_blend_space(blend_space, anim_path, height_value):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –≤ Blend Space"""
    try:
        anim_sequence = unreal.load_asset(anim_path)
        if anim_sequence:
            # –°–æ–∑–¥–∞–µ–º sample point
            sample_point = unreal.BlendSample()
            sample_point.set_editor_property("animation", anim_sequence)
            sample_point.set_editor_property("sample_value", height_value)
            sample_point.set_editor_property("rate_scale", 1.0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ Blend Space
            blend_samples = blend_space.get_editor_property("blend_samples")
            blend_samples.append(sample_point)
            blend_space.set_editor_property("blend_samples", blend_samples)
            
            print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è: {anim_path} (Height: {height_value})")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ {anim_path}: {e}")

def verify_created_animations(climbing_animations_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–´–• –ê–ù–ò–ú–ê–¶–ò–ô")
    print("-" * 40)
    
    expected_animations = [
        "AS_Vault",
        "AS_Mantle_1M", 
        "AS_Mantle_2M",
        "AS_LedgeClimb_Up",
        "AS_LedgeClimb_Idle",
        "AS_LedgeClimb_Down",
        "BS_Mantle"
    ]
    
    for anim_name in expected_animations:
        anim_path = f"{climbing_animations_path}/{anim_name}.{anim_name}"
        
        if unreal.EditorAssetLibrary.does_asset_exist(anim_path):
            asset = unreal.load_asset(anim_path)
            if asset:
                skeleton = asset.get_skeleton()
                skeleton_name = skeleton.get_name() if skeleton else "Unknown"
                print(f"‚úÖ {anim_name}: {skeleton_name}")
            else:
                print(f"‚ùå {anim_name}: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å")
        else:
            print(f"‚ùå {anim_name}: –ù–µ –Ω–∞–π–¥–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –°–û–ó–î–ê–ù–ò–Ø –°–û–í–ú–ï–°–¢–ò–ú–´–• –ê–ù–ò–ú–ê–¶–ò–ô –õ–ê–ó–ê–ù–ò–Ø")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    create_compatible_climbing_animations()
    
    print("\nüéØ –°–û–ó–î–ê–ù–ò–ï –ê–ù–ò–ú–ê–¶–ò–ô –ó–ê–í–ï–†–®–ï–ù–û!")
    print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ ABP_Player")
    print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ ABP_Player")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ State Machine –¥–ª—è –ª–∞–∑–∞–Ω–∏—è")
    print("3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏:")
    print("   - AS_Vault –¥–ª—è –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–Ω–∏—è")
    print("   - BS_Mantle –¥–ª—è –≤–∑–±–∏—Ä–∞–Ω–∏—è")
    print("   - AS_LedgeClimb_* –¥–ª—è –≤–∑–±–∏—Ä–∞–Ω–∏—è –∏ —Å–ø—É—Å–∫–∞")
    print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ bIsVaulting, bIsMantling, bIsLedgeClimbing")

if __name__ == "__main__":
    main()





