import unreal
import time

def diagnose_ik_system():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É –ò–ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ò–ö")
    print("=" * 40)
    
    try:
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        time.sleep(1)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å AnimInstance
        check_animinstance_class()
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Animation Blueprint
        check_animation_blueprint_variables()
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ö –Ω–æ–¥—ã –≤ Animation Blueprint
        check_animation_blueprint_nodes()
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        check_animation_blueprint_connections()
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∫–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        check_character_sockets()
        
        print("\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()

def check_animinstance_class():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª–∞—Å—Å AnimInstance"""
    
    print("\nüé≠ –ü–†–û–í–ï–†–ö–ê –ö–õ–ê–°–°–ê ANIMINSTANCE:")
    
    try:
        abp_path = "/Game/BackToZaraysk/Core/Characters/Player/ABP_Player"
        
        if unreal.EditorAssetLibrary.does_asset_exist(abp_path):
            anim_bp = unreal.load_asset(abp_path)
            if anim_bp:
                if hasattr(anim_bp, 'parent_class') and anim_bp.parent_class:
                    class_name = anim_bp.parent_class.get_name()
                    print(f"  ‚úÖ –ö–ª–∞—Å—Å: {class_name}")
                    
                    if "BTZBaseCharacterAnimInstance" in class_name:
                        print(f"  ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å!")
                        return True
                    else:
                        print(f"  ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å!")
                        return False
                else:
                    print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å")
                    return False
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Animation Blueprint")
                return False
        else:
            print(f"  ‚ùå ABP_Player –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∞—Å—Å–∞: {e}")
        return False

def check_animation_blueprint_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Animation Blueprint"""
    
    print("\nüìù –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• ANIMATION BLUEPRINT:")
    
    try:
        abp_path = "/Game/BackToZaraysk/Core/Characters/Player/ABP_Player"
        
        if unreal.EditorAssetLibrary.does_asset_exist(abp_path):
            anim_bp = unreal.load_asset(abp_path)
            if anim_bp:
                if hasattr(anim_bp, 'variables') and anim_bp.variables:
                    existing_vars = [var.variable_name for var in anim_bp.variables]
                    print(f"  –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(existing_vars)}")
                    
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ò–ö
                    critical_vars = [
                        "LeftFootEffectorLocation",
                        "RightFootEffectorLocation",
                        "LeftFootIKAlpha",
                        "RightFootIKAlpha"
                    ]
                    
                    missing_vars = []
                    for var in critical_vars:
                        if var in existing_vars:
                            print(f"  ‚úÖ {var}")
                        else:
                            print(f"  ‚ùå {var} - –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
                            missing_vars.append(var)
                    
                    if missing_vars:
                        print(f"\nüö® –ü–†–û–ë–õ–ï–ú–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ò–ö!")
                        print(f"   –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ—Ä–∞–±–æ—á–µ–π –ò–ö!")
                        print(f"\nüí° –†–ï–®–ï–ù–ò–ï:")
                        print(f"   1. –û—Ç–∫—Ä–æ–π—Ç–µ Animation Blueprint")
                        print(f"   2. –í My Blueprint ‚Üí Variables –¥–æ–±–∞–≤—å—Ç–µ:")
                        for var in missing_vars:
                            if "EffectorLocation" in var:
                                print(f"      - {var} (Vector, Default: 0,0,0)")
                            elif "IKAlpha" in var:
                                print(f"      - {var} (Float, Default: 1.0)")
                        print(f"   3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª")
                        return False
                    else:
                        print(f"  ‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ò–ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
                        return True
                else:
                    print(f"  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º")
                    return False
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Animation Blueprint")
                return False
        else:
            print(f"  ‚ùå ABP_Player –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
        return False

def check_animation_blueprint_nodes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ò–ö –Ω–æ–¥—ã –≤ Animation Blueprint"""
    
    print("\nüîó –ü–†–û–í–ï–†–ö–ê –ò–ö –ù–û–î:")
    
    try:
        abp_path = "/Game/BackToZaraysk/Core/Characters/Player/ABP_Player"
        
        if unreal.EditorAssetLibrary.does_asset_exist(abp_path):
            anim_bp = unreal.load_asset(abp_path)
            if anim_bp:
                if hasattr(anim_bp, 'anim_graph') and anim_bp.anim_graph:
                    if hasattr(anim_bp.anim_graph, 'nodes') and anim_bp.anim_graph.nodes:
                        nodes = [node.node_name for node in anim_bp.anim_graph.nodes]
                        print(f"  –ù–∞–π–¥–µ–Ω–æ –Ω–æ–¥: {len(nodes)}")
                        
                        # –ò—â–µ–º –ò–ö –Ω–æ–¥—ã
                        ik_nodes = [node for node in nodes if "IK" in node or "TwoBone" in node]
                        if ik_nodes:
                            print(f"  ‚úÖ –ò–ö –Ω–æ–¥—ã –Ω–∞–π–¥–µ–Ω—ã: {ik_nodes}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ò–ö –Ω–æ–¥
                            for node_name in ik_nodes:
                                check_ik_node_details(anim_bp, node_name)
                            return True
                        else:
                            print(f"  ‚ùå –ò–ö –ù–û–î–´ –ù–ï –ù–ê–ô–î–ï–ù–´!")
                            print(f"     –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞!")
                            print(f"\nüí° –†–ï–®–ï–ù–ò–ï:")
                            print(f"   1. –û—Ç–∫—Ä–æ–π—Ç–µ Animation Blueprint")
                            print(f"   2. –í AnimGraph –¥–æ–±–∞–≤—å—Ç–µ TwoBoneIK –Ω–æ–¥—ã:")
                            print(f"      - LeftFootIK")
                            print(f"      - RightFootIK")
                            print(f"   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ—Å—Ç–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                            return False
                    else:
                        print(f"  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–¥–∞–º")
                        return False
                else:
                    print(f"  ‚ùå AnimGraph –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Animation Blueprint")
                return False
        else:
            print(f"  ‚ùå ABP_Player –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–¥: {e}")
        return False

def check_ik_node_details(anim_bp, node_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ—Ç–∞–ª–∏ –ò–ö –Ω–æ–¥–∞"""
    
    print(f"\n  üîç –ê–Ω–∞–ª–∏–∑ –ò–ö –Ω–æ–¥–∞: {node_name}")
    
    try:
        # –ò—â–µ–º –Ω–æ–¥ –ø–æ –∏–º–µ–Ω–∏
        for node in anim_bp.anim_graph.nodes:
            if node.node_name == node_name:
                print(f"    –ù–∞–π–¥–µ–Ω –Ω–æ–¥: {node_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if hasattr(node, 'pins'):
                    connected_pins = [pin for pin in node.pins if pin.linked_to]
                    if connected_pins:
                        print(f"      ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∏–Ω—ã: {[pin.pin_name for pin in connected_pins]}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                        pin_names = [pin.pin_name for pin in connected_pins]
                        if "EffectorLocation" not in pin_names:
                            print(f"      ‚ùå EffectorLocation –ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù!")
                            print(f"         –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é EffectorLocation")
                        if "Alpha" not in pin_names:
                            print(f"      ‚ùå Alpha –ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù!")
                            print(f"         –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é IKAlpha")
                    else:
                        print(f"      ‚ùå –ù–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô!")
                        print(f"         –ù–æ–¥ {node_name} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
                
                break
        else:
            print(f"    ‚ùå –ù–æ–¥ {node_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä–∞—Ñ–µ")
            
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–¥–∞ {node_name}: {e}")

def check_animation_blueprint_connections():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ Animation Blueprint"""
    
    print("\nüîå –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô:")
    
    try:
        abp_path = "/Game/BackToZaraysk/Core/Characters/Player/ABP_Player"
        
        if unreal.EditorAssetLibrary.does_asset_exist(abp_path):
            anim_bp = unreal.load_asset(abp_path)
            if anim_bp:
                if hasattr(anim_bp, 'anim_graph') and anim_bp.anim_graph:
                    if hasattr(anim_bp.anim_graph, 'nodes') and anim_bp.anim_graph.nodes:
                        total_connections = 0
                        
                        for node in anim_bp.anim_graph.nodes:
                            if hasattr(node, 'pins'):
                                for pin in node.pins:
                                    if pin.linked_to:
                                        total_connections += 1
                        
                        print(f"  –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {total_connections}")
                        
                        if total_connections == 0:
                            print(f"  ‚ùå –ù–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –í –ì–†–ê–§–ï!")
                            print(f"     –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞!")
                            print(f"\nüí° –†–ï–®–ï–ù–ò–ï:")
                            print(f"   1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤—Å–µ –Ω–æ–¥—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ")
                            print(f"   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π –Ω–æ–¥ (Output Pose)")
                            return False
                        else:
                            print(f"  ‚úÖ –ï—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–µ")
                            return True
                    else:
                        print(f"  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–¥–∞–º")
                        return False
                else:
                    print(f"  ‚ùå AnimGraph –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Animation Blueprint")
                return False
        else:
            print(f"  ‚ùå ABP_Player –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
        return False

def check_character_sockets():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∫–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    print("\nüîå –ü–†–û–í–ï–†–ö–ê –°–û–ö–ï–¢–û–í –ü–ï–†–°–û–ù–ê–ñ–ê:")
    
    try:
        # –ò—â–µ–º —Å–∫–µ–ª–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        skeleton_paths = [
            "/Game/Characters/Mannequin_UE4/Meshes/SK_Mannequin",
            "/Game/Characters/Mannequins/Meshes/SK_Mannequin",
            "/Game/BackToZaraysk/Characters/Meshes/SK_Mannequin"
        ]
        
        skeleton_found = False
        for skeleton_path in skeleton_paths:
            if unreal.EditorAssetLibrary.does_asset_exist(skeleton_path):
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω —Å–∫–µ–ª–µ—Ç: {skeleton_path}")
                skeleton_found = True
                break
        
        if not skeleton_found:
            print(f"  ‚ö†Ô∏è –°–∫–µ–ª–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø—É—Ç—è–º")
            print(f"     –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–æ–∫–µ—Ç—ã foot_l –∏ foot_r —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        print(f"  üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Å–∫–µ–ª–µ—Ç–µ –µ—Å—Ç—å —Å–æ–∫–µ—Ç—ã:")
        print(f"     - foot_l (–ª–µ–≤–∞—è –Ω–æ–≥–∞)")
        print(f"     - foot_r (–ø—Ä–∞–≤–∞—è –Ω–æ–≥–∞)")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∫–µ—Ç–æ–≤: {e}")
        return False

# –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnose_ik_system()
