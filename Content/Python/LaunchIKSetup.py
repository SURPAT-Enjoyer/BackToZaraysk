import unreal

# –§–ò–ù–ê–õ–¨–ù–´–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –ù–ê–°–¢–†–û–ô–ö–ò IK
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

def launch_ik_setup():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É IK —Å–∏—Å—Ç–µ–º—ã"""
    
    print("ü§ñ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –ù–ê–°–¢–†–û–ô–ö–ò IK")
    print("=" * 60)
    print("–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–≥–∏...")
    print("=" * 60)
    
    try:
        # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK
        print("\n[–®–ê–ì 1/5] –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö IK...")
        step1_result = create_ik_variables_final()
        print(f"‚úÖ –®–∞–≥ 1 –∑–∞–≤–µ—Ä—à–µ–Ω: {step1_result} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–æ")
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º IK –Ω–æ–¥—ã
        print("\n[–®–ê–ì 2/5] –°–æ–∑–¥–∞–Ω–∏–µ IK –Ω–æ–¥...")
        step2_result = create_ik_nodes_final()
        print(f"‚úÖ –®–∞–≥ 2 –∑–∞–≤–µ—Ä—à–µ–Ω: {step2_result} –Ω–æ–¥ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        print("\n[–®–ê–ì 3/5] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...")
        step3_result = setup_character_final()
        print(f"‚úÖ –®–∞–≥ 3 –∑–∞–≤–µ—Ä—à–µ–Ω: {step3_result}")
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º Blueprint Interface
        print("\n[–®–ê–ì 4/5] –°–æ–∑–¥–∞–Ω–∏–µ Blueprint Interface...")
        step4_result = create_interface_final()
        print(f"‚úÖ –®–∞–≥ 4 –∑–∞–≤–µ—Ä—à–µ–Ω: {step4_result}")
        
        # –®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º Blueprint Actor
        print("\n[–®–ê–ì 5/5] –°–æ–∑–¥–∞–Ω–∏–µ Blueprint Actor...")
        step5_result = create_blueprint_actor_final()
        print(f"‚úÖ –®–∞–≥ 5 –∑–∞–≤–µ—Ä—à–µ–Ω: {step5_result}")
        
        print("\n" + "=" * 60)
        print("üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 60)
        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK —Å–æ–∑–¥–∞–Ω—ã")
        print("‚úÖ IK –Ω–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        print("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("‚úÖ Blueprint Interface —Å–æ–∑–¥–∞–Ω")
        print("‚úÖ Blueprint Actor —Å–æ–∑–¥–∞–Ω")
        print("\nüöÄ IK –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

def create_ik_variables_final():
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    anim_bp_assets = asset_registry.get_assets_by_class("AnimBlueprint", True)
    
    total_created = 0
    
    for asset_data in anim_bp_assets:
        try:
            anim_bp = unreal.load_asset(asset_data.asset_name)
            if anim_bp:
                created = create_variables_final(anim_bp)
                total_created += created
                
                if created > 0:
                    unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ {asset_data.asset_name}: {e}")
    
    return total_created

def create_variables_final(anim_bp):
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Animation Blueprint - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    
    variables = [
        ("LeftFootEffectorLocation", unreal.Vector, unreal.Vector(0, 0, 0)),
        ("RightFootEffectorLocation", unreal.Vector, unreal.Vector(0, 0, 0)),
        ("LeftFootIKAlpha", unreal.Float, 1.0),
        ("RightFootIKAlpha", unreal.Float, 1.0)
    ]
    
    existing = [var.variable_name for var in anim_bp.variables]
    created = 0
    
    for name, type_class, default in variables:
        if name not in existing:
            try:
                new_var = unreal.EditorAnimBlueprintUtils.add_variable(
                    anim_bp, name, type_class
                )
                if new_var:
                    new_var.variable_name = name
                    new_var.default_value = default
                    created += 1
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {name}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {name}: {e}")
    
    return created

def create_ik_nodes_final():
    """–°–æ–∑–¥–∞–µ—Ç IK –Ω–æ–¥—ã - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    anim_bp_assets = asset_registry.get_assets_by_class("AnimBlueprint", True)
    
    total_created = 0
    
    for asset_data in anim_bp_assets:
        try:
            anim_bp = unreal.load_asset(asset_data.asset_name)
            if anim_bp and anim_bp.anim_graph:
                created = create_nodes_final(anim_bp)
                total_created += created
                
                if created > 0:
                    unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥ –≤ {asset_data.asset_name}: {e}")
    
    return total_created

def create_nodes_final(anim_bp):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–¥—ã –≤ Animation Blueprint - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    
    nodes = [
        ("TwoBoneIK", "LeftFootIK"),
        ("TwoBoneIK", "RightFootIK")
    ]
    
    existing = [node.node_name for node in anim_bp.anim_graph.nodes]
    created = 0
    
    for node_type, node_name in nodes:
        if node_name not in existing:
            try:
                new_node = unreal.EditorAnimBlueprintUtils.add_node(
                    anim_bp.anim_graph, node_type, node_name
                )
                if new_node:
                    created += 1
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–¥: {node_name}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥–∞ {node_name}: {e}")
    
    return created

def setup_character_final():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    blueprint_assets = asset_registry.get_assets_by_class("Blueprint", True)
    
    character_found = False
    
    for asset_data in blueprint_assets:
        if "PlayerCharacter" in str(asset_data.asset_name):
            character_found = True
            try:
                character_bp = unreal.load_asset(asset_data.asset_name)
                if character_bp:
                    check_sockets_final(character_bp)
                    unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
                    print(f"  ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {asset_data.asset_name}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
    
    if not character_found:
        print("  ‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return "–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    return "–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

def check_sockets_final(character_bp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∫–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    
    for comp in character_bp.components:
        if isinstance(comp, unreal.SkeletalMeshComponent):
            left_exists = comp.does_socket_exist("foot_l")
            right_exists = comp.does_socket_exist("foot_r")
            
            print(f"  –°–æ–∫–µ—Ç—ã: foot_l={'‚úÖ' if left_exists else '‚ùå'}, foot_r={'‚úÖ' if right_exists else '‚ùå'}")
            
            if not left_exists or not right_exists:
                print("  ‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Å–æ–∫–µ—Ç—ã 'foot_l' –∏ 'foot_r' –≤ —Å–∫–µ–ª–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
            break

def create_interface_final():
    """–°–æ–∑–¥–∞–µ—Ç Blueprint Interface - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    
    try:
        interface_path = "/Game/Blueprints/IKInterface"
        
        if not unreal.EditorAssetLibrary.does_asset_exist(interface_path):
            unreal.EditorAssetLibrary.make_directory("/Game/Blueprints/")
            
            interface = unreal.EditorAssetLibrary.create_asset(
                "IKInterface", "/Game/Blueprints/",
                unreal.BlueprintInterface, unreal.BlueprintInterfaceFactory()
            )
            
            if interface:
                print("  ‚úÖ Blueprint Interface —Å–æ–∑–¥–∞–Ω")
                return "Blueprint Interface —Å–æ–∑–¥–∞–Ω"
            else:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Blueprint Interface")
                return "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Blueprint Interface"
        else:
            print("  ‚ÑπÔ∏è Blueprint Interface —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return "Blueprint Interface —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Blueprint Interface: {e}")
        return f"–û—à–∏–±–∫–∞: {e}"

def create_blueprint_actor_final():
    """–°–æ–∑–¥–∞–µ—Ç Blueprint Actor - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è Blueprint
        unreal.EditorAssetLibrary.make_directory("/Game/Blueprints/IK/")
        
        # –°–æ–∑–¥–∞–µ–º Blueprint Actor
        actor_path = "/Game/Blueprints/IK/IKSetupActor"
        
        if not unreal.EditorAssetLibrary.does_asset_exist(actor_path):
            ik_actor = unreal.EditorAssetLibrary.create_asset(
                "IKSetupActor",
                "/Game/Blueprints/IK/",
                unreal.Blueprint,
                unreal.BlueprintFactory()
            )
            
            if ik_actor:
                print("  ‚úÖ IK Setup Actor —Å–æ–∑–¥–∞–Ω")
                unreal.EditorAssetLibrary.save_asset(actor_path)
                return "IK Setup Actor —Å–æ–∑–¥–∞–Ω"
            else:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å IK Setup Actor")
                return "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è IK Setup Actor"
        else:
            print("  ‚ÑπÔ∏è IK Setup Actor —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return "IK Setup Actor —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è IK Setup Actor: {e}")
        return f"–û—à–∏–±–∫–∞: {e}"

# –§–ò–ù–ê–õ–¨–ù–´–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö
launch_ik_setup()