import unreal

# Blueprint Actor –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IK
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞—Å—Ç Blueprint Actor, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å—Ç—Ä–æ–∏—Ç IK –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

def create_ik_setup_actor():
    """–°–æ–∑–¥–∞–µ—Ç Blueprint Actor –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IK"""
    
    print("ü§ñ –°–û–ó–î–ê–ù–ò–ï IK SETUP ACTOR")
    print("=" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è Blueprint
        unreal.EditorAssetLibrary.make_directory("/Game/Blueprints/IK/")
        
        # –°–æ–∑–¥–∞–µ–º Blueprint Actor
        actor_path = "/Game/Blueprints/IK/IKSetupActor"
        
        if not unreal.EditorAssetLibrary.does_asset_exist(actor_path):
            # –°–æ–∑–¥–∞–µ–º Blueprint Actor
            ik_actor = unreal.EditorAssetLibrary.create_asset(
                "IKSetupActor",
                "/Game/Blueprints/IK/",
                unreal.Blueprint,
                unreal.BlueprintFactory()
            )
            
            if ik_actor:
                print("‚úÖ IK Setup Actor —Å–æ–∑–¥–∞–Ω")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                add_components(ik_actor)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
                add_functions(ik_actor)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                unreal.EditorAssetLibrary.save_asset(actor_path)
                print("‚úÖ IK Setup Actor —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å IK Setup Actor")
        else:
            print("‚ÑπÔ∏è IK Setup Actor —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è IK Setup Actor: {e}")

def add_components(actor):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫ Actor"""
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º Scene Component
        scene_comp = unreal.EditorBlueprintUtils.add_component_to_blueprint(
            actor, unreal.SceneComponent
        )
        
        if scene_comp:
            print("  ‚úÖ Scene Component –¥–æ–±–∞–≤–ª–µ–Ω")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

def add_functions(actor):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫ Actor"""
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é BeginPlay
        begin_play_func = unreal.EditorBlueprintUtils.add_function_to_blueprint(
            actor, "BeginPlay"
        )
        
        if begin_play_func:
            print("  ‚úÖ BeginPlay —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IK
        ik_setup_func = unreal.EditorBlueprintUtils.add_function_to_blueprint(
            actor, "SetupIKSystem"
        )
        
        if ik_setup_func:
            print("  ‚úÖ SetupIKSystem —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π: {e}")

def create_ik_setup_level():
    """–°–æ–∑–¥–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IK"""
    
    print("\nüåç –°–û–ó–î–ê–ù–ò–ï IK SETUP LEVEL")
    print("=" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        level_path = "/Game/Levels/IKSetupLevel"
        
        if not unreal.EditorAssetLibrary.does_asset_exist(level_path):
            # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
            new_level = unreal.EditorLevelLibrary.create_new_level(level_path)
            
            if new_level:
                print("‚úÖ IK Setup Level —Å–æ–∑–¥–∞–Ω")
                
                # –î–æ–±–∞–≤–ª—è–µ–º IK Setup Actor –≤ —É—Ä–æ–≤–µ–Ω—å
                add_ik_actor_to_level()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å
                unreal.EditorLevelLibrary.save_current_level()
                print("‚úÖ IK Setup Level —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å")
        else:
            print("‚ÑπÔ∏è IK Setup Level —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è: {e}")

def add_ik_actor_to_level():
    """–î–æ–±–∞–≤–ª—è–µ—Ç IK Setup Actor –≤ —É—Ä–æ–≤–µ–Ω—å"""
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º IK Setup Actor
        actor_class = unreal.load_asset("/Game/Blueprints/IK/IKSetupActor")
        
        if actor_class:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Actor –≤ —É—Ä–æ–≤–Ω–µ
            actor_instance = unreal.EditorLevelLibrary.spawn_actor_from_class(
                actor_class, unreal.Vector(0, 0, 0)
            )
            
            if actor_instance:
                print("  ‚úÖ IK Setup Actor –¥–æ–±–∞–≤–ª–µ–Ω –≤ —É—Ä–æ–≤–µ–Ω—å")
            else:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å Actor –≤ —É—Ä–æ–≤–µ–Ω—å")
        else:
            print("  ‚ùå IK Setup Actor –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Actor –≤ —É—Ä–æ–≤–µ–Ω—å: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è IK Setup —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô IK SETUP –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º Blueprint Actor
        create_ik_setup_actor()
        
        # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        create_ik_setup_level()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø IK SETUP –°–ò–°–¢–ï–ú–ê –°–û–ó–î–ê–ù–ê!")
        print("=" * 60)
        print("–°–æ–∑–¥–∞–Ω—ã:")
        print("‚Ä¢ IKSetupActor - Blueprint Actor –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("‚Ä¢ IKSetupLevel - –£—Ä–æ–≤–µ–Ω—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π IK")
        print("\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –∏ IK –Ω–∞—Å—Ç—Ä–æ–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
main()