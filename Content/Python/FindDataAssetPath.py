# -*- coding: utf-8 -*-

import unreal

def find_data_asset_path():
    """–ù–∞–π—Ç–∏ –ø—É—Ç—å –∫ Data Asset –¥–ª—è –∂–∏–ª–µ—Ç–∞"""
    
    print("=== –ü–û–ò–°–ö –ü–£–¢–ò –ö DATA ASSET –ñ–ò–õ–ï–¢–ê ===")
    
    # –ü–æ–ª—É—á–∞–µ–º Asset Registry
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    
    # –ò—â–µ–º –≤—Å–µ Data Asset
    data_asset_assets = asset_registry.get_assets_by_class("DataAsset", True)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(data_asset_assets)} Data Asset –≤ –ø—Ä–æ–µ–∫—Ç–µ:")
    
    for asset in data_asset_assets:
        asset_name = asset.get_asset().get_name()
        asset_path = asset.get_asset().get_path_name()
        asset_class = asset.get_asset().get_class().get_name()
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—à Data Asset
        if "tactical" in asset_name.lower() or "vest" in asset_name.lower() or "DA_" in asset_name:
            print(f"   üéØ –ù–ê–ô–î–ï–ù: {asset_name}")
            print(f"      –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {asset_path}")
            print(f"      –ö–ª–∞—Å—Å: {asset_class}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è LoadObject
            # –£–±–∏—Ä–∞–µ–º .uasset –∏ –¥–æ–±–∞–≤–ª—è–µ–º .ClassName
            path_parts = asset_path.split('.')
            if len(path_parts) >= 2:
                base_path = path_parts[0]  # /Game/BackToZaraysk/Core/Items/Equipment/DA_TacticalVest
                asset_name_only = path_parts[1]  # DA_TacticalVest
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è LoadObject
                load_object_path = f"{base_path}.{asset_name_only}.{asset_name_only}"
                print(f"      –ü—É—Ç—å –¥–ª—è LoadObject: {load_object_path}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                test_load_object(load_object_path, asset_name)
            
            print()

def test_load_object(load_path, asset_name):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É Data Asset –ø–æ –ø—É—Ç–∏"""
    
    print(f"      üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏: {load_path}")
    
    try:
        loaded_asset = unreal.EditorAssetLibrary.load_asset(load_path)
        if loaded_asset:
            print(f"      ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞: {loaded_asset.get_name()}")
            print(f"      ‚úÖ –ö–ª–∞—Å—Å: {loaded_asset.get_class().get_name()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º EquippedMesh
            try:
                equipped_mesh = unreal.EditorAssetLibrary.get_editor_property(loaded_asset, "EquippedMesh")
                if equipped_mesh:
                    print(f"      ‚úÖ EquippedMesh —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {equipped_mesh.get_name()}")
                else:
                    print(f"      ‚ùå EquippedMesh –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                print(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å EquippedMesh")
                
        else:
            print(f"      ‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

def main():
    find_data_asset_path()

if __name__ == "__main__":
    main()


