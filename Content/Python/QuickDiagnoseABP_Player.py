import unreal
import time

def quick_diagnose_abp_player():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º ABP_Player"""
    
    print("üîç –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ABP_PLAYER")
    print("=" * 40)
    print("–ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, –ø—Ä–∏–≤–æ–¥—è—â–∏—Ö –∫ –∑–∞–≤—è–∑—ã–≤–∞–Ω–∏—é –Ω–æ–≥ –≤ —É–∑–µ–ª...")
    
    try:
        time.sleep(1)
        
        # –ò—â–µ–º ABP_Player
        abp_paths = [
            "/Game/BackToZaraysk/Core/Characters/Player/ABP_Player",
            "/Game/BackToZaraysk/Core/Characters/Player/ABP_Player1"
        ]
        
        abp_found = False
        for abp_path in abp_paths:
            if unreal.EditorAssetLibrary.does_asset_exist(abp_path):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω ABP_Player: {abp_path}")
                
                anim_bp = unreal.load_asset(abp_path)
                if anim_bp:
                    print(f"üìÇ ABP_Player –∑–∞–≥—Ä—É–∂–µ–Ω")
                    
                    # –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    quick_check_variables(anim_bp)
                    quick_check_nodes(anim_bp)
                    quick_check_connections(anim_bp)
                    
                    abp_found = True
                    break
        
        if not abp_found:
            print("‚ùå ABP_Player –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø—É—Ç—è–º")
            find_all_player_abp()
            
        print("\nüéØ –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

def find_all_player_abp():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ Animation Blueprint —Å Player"""
    
    try:
        asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
        
        anim_bp_filter = unreal.ARFilter()
        anim_bp_filter.class_paths = [unreal.AnimBlueprint.static_class()]
        
        anim_bp_assets = asset_registry.get_assets(anim_bp_filter)
        
        if anim_bp_assets:
            player_abps = [asset for asset in anim_bp_assets if "Player" in asset.asset_name]
            
            if player_abps:
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ Player Animation Blueprint: {len(player_abps)}")
                for asset in player_abps:
                    print(f"  - {asset.asset_name}")
            else:
                print("‚ùå Player Animation Blueprint –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print("‚ùå Animation Blueprint –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

def quick_check_variables(anim_bp):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    
    print("\nüìù –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–•:")
    
    try:
        if hasattr(anim_bp, 'variables') and anim_bp.variables:
            existing_vars = [var.variable_name for var in anim_bp.variables]
            print(f"  –í—Å–µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(existing_vars)}")
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ò–ö
            critical_vars = [
                "LeftFootEffectorLocation",
                "RightFootEffectorLocation",
                "LeftFootIKAlpha",
                "RightFootIKAlpha"
            ]
            
            missing_critical = []
            for var in critical_vars:
                if var in existing_vars:
                    print(f"  ‚úÖ {var}")
                else:
                    print(f"  ‚ùå {var} - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
                    missing_critical.append(var)
            
            if missing_critical:
                print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
                print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ò–ö: {missing_critical}")
                print(f"   –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ—Ä–∞–±–æ—á–µ–π –ò–ö –∏ –∑–∞–≤—è–∑—ã–≤–∞–Ω–∏—è –Ω–æ–≥!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            duplicates = []
            for var in existing_vars:
                if existing_vars.count(var) > 1 and var not in duplicates:
                    duplicates.append(var)
            
            if duplicates:
                print(f"\n‚ö†Ô∏è –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–ï:")
                print(f"   {duplicates}")
                print(f"   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º!")
                
        else:
            print("  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")

def quick_check_nodes(anim_bp):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–¥"""
    
    print("\nüîó –ü–†–û–í–ï–†–ö–ê –ù–û–î:")
    
    try:
        if hasattr(anim_bp, 'anim_graph') and anim_bp.anim_graph:
            if hasattr(anim_bp.anim_graph, 'nodes') and anim_bp.anim_graph.nodes:
                nodes = [node.node_name for node in anim_bp.anim_graph.nodes]
                print(f"  –í—Å–µ–≥–æ –Ω–æ–¥: {len(nodes)}")
                
                # –ò—â–µ–º –ò–ö –Ω–æ–¥—ã
                ik_nodes = [node for node in nodes if "IK" in node or "TwoBone" in node]
                if ik_nodes:
                    print(f"  ‚úÖ –ò–ö –Ω–æ–¥—ã –Ω–∞–π–¥–µ–Ω—ã: {ik_nodes}")
                else:
                    print(f"  ‚ùå –ò–ö –ù–û–î–´ –ù–ï –ù–ê–ô–î–ï–ù–´!")
                    print(f"     –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - –ò–ö –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!")
                
                # –ò—â–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –Ω–æ–¥—ã
                output_nodes = [node for node in nodes if "Output" in node or "Pose" in node]
                if output_nodes:
                    print(f"  ‚úÖ –í—ã—Ö–æ–¥–Ω—ã–µ –Ω–æ–¥—ã: {output_nodes}")
                else:
                    print(f"  ‚ùå –í–´–•–û–î–ù–´–ï –ù–û–î–´ –ù–ï –ù–ê–ô–î–ï–ù–´!")
                    print(f"     –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                duplicates = []
                for node in nodes:
                    if nodes.count(node) > 1 and node not in duplicates:
                        duplicates.append(node)
                
                if duplicates:
                    print(f"\n‚ö†Ô∏è –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ù–û–î–´:")
                    print(f"   {duplicates}")
                    print(f"   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –∑–∞–≤—è–∑—ã–≤–∞–Ω–∏—é –Ω–æ–≥ –≤ —É–∑–µ–ª!")
                    
            else:
                print("  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–¥–∞–º")
        else:
            print("  ‚ùå AnimGraph –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–¥: {e}")

def quick_check_connections(anim_bp):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    
    print("\nüîå –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô:")
    
    try:
        if hasattr(anim_bp, 'anim_graph') and anim_bp.anim_graph:
            if hasattr(anim_bp.anim_graph, 'nodes') and anim_bp.anim_graph.nodes:
                total_connections = 0
                ik_connections = 0
                
                for node in anim_bp.anim_graph.nodes:
                    if hasattr(node, 'pins'):
                        for pin in node.pins:
                            if pin.linked_to:
                                total_connections += 1
                                if "IK" in node.node_name:
                                    ik_connections += 1
                
                print(f"  –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {total_connections}")
                print(f"  –ò–ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {ik_connections}")
                
                if total_connections == 0:
                    print(f"  ‚ùå –ù–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –í –ì–†–ê–§–ï!")
                    print(f"     –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                
                if ik_connections == 0 and any("IK" in node.node_name for node in anim_bp.anim_graph.nodes):
                    print(f"  ‚ùå –ò–ö –ù–û–î–´ –ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–´!")
                    print(f"     –≠—Ç–æ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ—Ä–∞–±–æ—á–µ–π –ò–ö!")
                    
            else:
                print("  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–¥–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        else:
            print("  ‚ùå AnimGraph –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
quick_diagnose_abp_player()
