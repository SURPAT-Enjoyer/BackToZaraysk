import unreal

def setup_complete_ik_system():
    """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ IK —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    print("=== –ü–û–õ–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê IK –°–ò–°–¢–ï–ú–´ ===")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç:")
    print("1. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK –≤ Animation Blueprint")
    print("2. IK –Ω–æ–¥—ã –≤ AnimGraph")
    print("3. Blueprint Interface –¥–ª—è IK")
    print("4. –°–æ–∫–µ—Ç—ã –¥–ª—è –Ω–æ–≥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    print("=" * 50)
    
    try:
        # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK
        print("\n[–®–ê–ì 1] –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö IK...")
        create_ik_variables()
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º IK –Ω–æ–¥—ã
        print("\n[–®–ê–ì 2] –°–æ–∑–¥–∞–Ω–∏–µ IK –Ω–æ–¥...")
        create_ik_nodes()
        
        # –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        print("\n[–®–ê–ì 3] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...")
        setup_character_ik()
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º Blueprint Interface
        print("\n[–®–ê–ì 4] –°–æ–∑–¥–∞–Ω–∏–µ Blueprint Interface...")
        create_ik_interface()
        
        print("\n" + "=" * 50)
        print("‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 50)
        print("–¢–µ–ø–µ—Ä—å –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã:")
        print("‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK –≤ Animation Blueprint")
        print("‚Ä¢ IK –Ω–æ–¥—ã –≤ AnimGraph")
        print("‚Ä¢ Blueprint Interface –¥–ª—è IK")
        print("‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–æ–∫–µ—Ç—ã –¥–ª—è –Ω–æ–≥")
        print("\n–î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Animation Blueprint")
        print("2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫ IK –Ω–æ–¥–∞–º")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ—Å—Ç–∏ –¥–ª—è IK (thigh_l, calf_l, foot_l)")
        print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–æ–π –Ω–æ–≥–∏ (thigh_r, calf_r, foot_r)")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

def create_ik_variables():
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK –≤ Animation Blueprint"""
    
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    anim_bp_assets = asset_registry.get_assets_by_class("AnimBlueprint", True)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ Animation Blueprint: {len(anim_bp_assets)}")
    
    for asset_data in anim_bp_assets:
        asset_path = asset_data.asset_name
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {asset_path}")
        
        try:
            anim_bp = unreal.load_asset(asset_path)
            if not anim_bp:
                continue
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            variables_created = 0
            
            # LeftFootEffectorLocation
            if create_variable(anim_bp, "LeftFootEffectorLocation", unreal.Vector, unreal.Vector(0, 0, 0)):
                variables_created += 1
            
            # RightFootEffectorLocation
            if create_variable(anim_bp, "RightFootEffectorLocation", unreal.Vector, unreal.Vector(0, 0, 0)):
                variables_created += 1
            
            # LeftFootIKAlpha
            if create_variable(anim_bp, "LeftFootIKAlpha", unreal.Float, 1.0):
                variables_created += 1
            
            # RightFootIKAlpha
            if create_variable(anim_bp, "RightFootIKAlpha", unreal.Float, 1.0):
                variables_created += 1
            
            if variables_created > 0:
                unreal.EditorAssetLibrary.save_asset(asset_path)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {variables_created} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ {asset_path}")
            else:
                print(f"‚ÑπÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ {asset_path}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {asset_path}: {e}")

def create_variable(anim_bp, var_name, var_type, default_value):
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ Animation Blueprint"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    existing_vars = [var.variable_name for var in anim_bp.variables]
    
    if var_name in existing_vars:
        return False
    
    try:
        new_var = unreal.EditorAnimBlueprintUtils.add_variable(
            anim_bp,
            var_name,
            var_type
        )
        
        if new_var:
            new_var.variable_name = var_name
            new_var.default_value = default_value
            return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {var_name}: {e}")
    
    return False

def create_ik_nodes():
    """–°–æ–∑–¥–∞–µ—Ç IK –Ω–æ–¥—ã –≤ AnimGraph"""
    
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    anim_bp_assets = asset_registry.get_assets_by_class("AnimBlueprint", True)
    
    for asset_data in anim_bp_assets:
        asset_path = asset_data.asset_name
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ IK –Ω–æ–¥ –≤: {asset_path}")
        
        try:
            anim_bp = unreal.load_asset(asset_path)
            if anim_bp and anim_bp.anim_graph:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–¥—ã
                create_two_bone_ik_node(anim_bp.anim_graph, "LeftFootIK")
                create_two_bone_ik_node(anim_bp.anim_graph, "RightFootIK")
                
                unreal.EditorAssetLibrary.save_asset(asset_path)
                print(f"‚úÖ IK –Ω–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã –≤ {asset_path}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥ –≤ {asset_path}: {e}")

def create_two_bone_ik_node(anim_graph, node_name):
    """–°–æ–∑–¥–∞–µ—Ç Two Bone IK –Ω–æ–¥"""
    
    try:
        ik_node = unreal.EditorAnimBlueprintUtils.add_node(
            anim_graph,
            "TwoBoneIK",
            node_name
        )
        
        if ik_node:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–¥: {node_name}")
            return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥–∞ {node_name}: {e}")
    
    return False

def setup_character_ik():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç IK –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    # –ù–∞—Ö–æ–¥–∏–º Blueprint –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    blueprint_assets = asset_registry.get_assets_by_class("Blueprint", True)
    
    for asset_data in blueprint_assets:
        if "PlayerCharacter" in str(asset_data.asset_name):
            print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {asset_data.asset_name}")
            
            try:
                character_bp = unreal.load_asset(asset_data.asset_name)
                if character_bp:
                    setup_character_sockets(character_bp)
                    unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
                    print(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {asset_data.asset_name}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")

def setup_character_sockets(character_bp):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–∫–µ—Ç—ã –¥–ª—è –Ω–æ–≥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∫–µ–ª–µ—Ç–∞
    skeletal_mesh_comp = None
    for comp in character_bp.components:
        if isinstance(comp, unreal.SkeletalMeshComponent):
            skeletal_mesh_comp = comp
            break
    
    if skeletal_mesh_comp:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∫–µ—Ç—ã
        left_socket_exists = skeletal_mesh_comp.does_socket_exist("foot_l")
        right_socket_exists = skeletal_mesh_comp.does_socket_exist("foot_r")
        
        print(f"–°–æ–∫–µ—Ç foot_l: {'‚úÖ' if left_socket_exists else '‚ùå'}")
        print(f"–°–æ–∫–µ—Ç foot_r: {'‚úÖ' if right_socket_exists else '‚ùå'}")
        
        if not left_socket_exists or not right_socket_exists:
            print("‚ÑπÔ∏è –°–æ–∫–µ—Ç—ã –¥–ª—è –Ω–æ–≥ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é –≤ —Å–∫–µ–ª–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
            print("–î–æ–±–∞–≤—å—Ç–µ —Å–æ–∫–µ—Ç—ã 'foot_l' –∏ 'foot_r' –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ—Å—Ç—è–º")

def create_ik_interface():
    """–°–æ–∑–¥–∞–µ—Ç Blueprint Interface –¥–ª—è IK"""
    
    try:
        interface_path = "/Game/Blueprints/IKInterface"
        
        if unreal.EditorAssetLibrary.does_asset_exist(interface_path):
            print("‚ÑπÔ∏è IKInterface —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        unreal.EditorAssetLibrary.make_directory("/Game/Blueprints/")
        
        # –°–æ–∑–¥–∞–µ–º Blueprint Interface
        ik_interface = unreal.EditorAssetLibrary.create_asset(
            "IKInterface",
            "/Game/Blueprints/",
            unreal.BlueprintInterface,
            unreal.BlueprintInterfaceFactory()
        )
        
        if ik_interface:
            print("‚úÖ –°–æ–∑–¥–∞–Ω Blueprint Interface: IKInterface")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Blueprint Interface")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Blueprint Interface: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ù–ê–°–¢–†–û–ô–ö–ò IK –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    setup_complete_ik_system()

if __name__ == "__main__":
    main()
