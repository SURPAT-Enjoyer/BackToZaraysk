import unreal

# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –ù–ê–°–¢–†–û–ô–ö–ò IK –í –†–ï–î–ê–ö–¢–û–†–ï
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

def auto_setup_ik():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ IK —Å–∏—Å—Ç–µ–º—ã"""
    
    print("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –ù–ê–°–¢–†–û–ô–ö–ò IK")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK
        print("–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö IK...")
        create_ik_variables_auto()
        
        # –°–æ–∑–¥–∞–µ–º IK –Ω–æ–¥—ã
        print("–°–æ–∑–¥–∞–Ω–∏–µ IK –Ω–æ–¥...")
        create_ik_nodes_auto()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...")
        setup_character_auto()
        
        # –°–æ–∑–¥–∞–µ–º Blueprint Interface
        print("–°–æ–∑–¥–∞–Ω–∏–µ Blueprint Interface...")
        create_interface_auto()
        
        print("\n‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("IK —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")

def create_ik_variables_auto():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö IK"""
    
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    anim_bp_assets = asset_registry.get_assets_by_class("AnimBlueprint", True)
    
    total_created = 0
    
    for asset_data in anim_bp_assets:
        try:
            anim_bp = unreal.load_asset(asset_data.asset_name)
            if anim_bp:
                created = create_variables_auto(anim_bp)
                total_created += created
                
                if created > 0:
                    unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ {asset_data.asset_name}: {e}")
    
    print(f"–°–æ–∑–¥–∞–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {total_created}")

def create_variables_auto(anim_bp):
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
    
    variables = [
        ("LeftFootEffectorLocation", unreal.Vector, unreal.Vector(0, 0, 0)),
        ("RightFootEffectorLocation", unreal.Vector, unreal.Vector(0, 0, 0)),
        ("LeftFootIKAlpha", unreal.Float, 1.0),
        ("RightFootIKAlpha", unreal.Float, 1.0)
    ]
    
    existing = [var.variable_name for var in anim_bp.variables]
    created = 0
    
    for name, type_class, default in variables:
        if name not in existing:
            try:
                new_var = unreal.EditorAnimBlueprintUtils.add_variable(
                    anim_bp, name, type_class
                )
                if new_var:
                    new_var.variable_name = name
                    new_var.default_value = default
                    created += 1
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {name}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {name}: {e}")
    
    return created

def create_ik_nodes_auto():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ IK –Ω–æ–¥"""
    
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    anim_bp_assets = asset_registry.get_assets_by_class("AnimBlueprint", True)
    
    total_created = 0
    
    for asset_data in anim_bp_assets:
        try:
            anim_bp = unreal.load_asset(asset_data.asset_name)
            if anim_bp and anim_bp.anim_graph:
                created = create_nodes_auto(anim_bp)
                total_created += created
                
                if created > 0:
                    unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥ –≤ {asset_data.asset_name}: {e}")
    
    print(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–¥: {total_created}")

def create_nodes_auto(anim_bp):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
    
    nodes = [
        ("TwoBoneIK", "LeftFootIK"),
        ("TwoBoneIK", "RightFootIK")
    ]
    
    existing = [node.node_name for node in anim_bp.anim_graph.nodes]
    created = 0
    
    for node_type, node_name in nodes:
        if node_name not in existing:
            try:
                new_node = unreal.EditorAnimBlueprintUtils.add_node(
                    anim_bp.anim_graph, node_type, node_name
                )
                if new_node:
                    created += 1
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–¥: {node_name}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥–∞ {node_name}: {e}")
    
    return created

def setup_character_auto():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    blueprint_assets = asset_registry.get_assets_by_class("Blueprint", True)
    
    character_found = False
    
    for asset_data in blueprint_assets:
        if "PlayerCharacter" in str(asset_data.asset_name):
            character_found = True
            try:
                character_bp = unreal.load_asset(asset_data.asset_name)
                if character_bp:
                    check_sockets_auto(character_bp)
                    unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
                    print(f"  ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {asset_data.asset_name}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
    
    if not character_found:
        print("  ‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

def check_sockets_auto(character_bp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∫–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
    
    for comp in character_bp.components:
        if isinstance(comp, unreal.SkeletalMeshComponent):
            left_exists = comp.does_socket_exist("foot_l")
            right_exists = comp.does_socket_exist("foot_r")
            
            print(f"  –°–æ–∫–µ—Ç—ã: foot_l={'‚úÖ' if left_exists else '‚ùå'}, foot_r={'‚úÖ' if right_exists else '‚ùå'}")
            
            if not left_exists or not right_exists:
                print("  ‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Å–æ–∫–µ—Ç—ã 'foot_l' –∏ 'foot_r' –≤ —Å–∫–µ–ª–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
            break

def create_interface_auto():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Blueprint Interface"""
    
    try:
        interface_path = "/Game/Blueprints/IKInterface"
        
        if not unreal.EditorAssetLibrary.does_asset_exist(interface_path):
            unreal.EditorAssetLibrary.make_directory("/Game/Blueprints/")
            
            interface = unreal.EditorAssetLibrary.create_asset(
                "IKInterface", "/Game/Blueprints/",
                unreal.BlueprintInterface, unreal.BlueprintInterfaceFactory()
            )
            
            if interface:
                print("  ‚úÖ Blueprint Interface —Å–æ–∑–¥–∞–Ω")
            else:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Blueprint Interface")
        else:
            print("  ‚ÑπÔ∏è Blueprint Interface —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Blueprint Interface: {e}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
auto_setup_ik()