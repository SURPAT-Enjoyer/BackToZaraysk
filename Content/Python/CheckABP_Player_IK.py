import unreal
import time

def check_abp_player_ik():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ò–ö –≤ ABP_Player"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò –ò–ö –í ABP_PLAYER")
    print("=" * 40)
    
    try:
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        time.sleep(1)
        
        # –ù–∞—Ö–æ–¥–∏–º Animation Blueprint
        asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
        
        anim_bp_filter = unreal.ARFilter()
        anim_bp_filter.class_paths = [unreal.AnimBlueprint.static_class()]
        
        anim_bp_assets = asset_registry.get_assets(anim_bp_filter)
        
        if anim_bp_assets:
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ Animation Blueprint: {len(anim_bp_assets)}")
            
            for asset_data in anim_bp_assets:
                if "ABP_Player" in asset_data.asset_name or "Player" in asset_data.asset_name:
                    print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ ABP_Player: {asset_data.asset_name}")
                    
                    anim_bp = unreal.load_asset(asset_data.asset_name)
                    if anim_bp:
                        check_ik_variables(anim_bp)
                        check_ik_nodes(anim_bp)
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Animation Blueprint")
        else:
            print("‚ùå Animation Blueprint –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

def check_ik_variables(anim_bp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ò–ö"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ò–ö...")
    
    required_vars = [
        "LeftFootEffectorLocation",
        "RightFootEffectorLocation", 
        "LeftFootIKAlpha",
        "RightFootIKAlpha"
    ]
    
    existing_vars = []
    try:
        if hasattr(anim_bp, 'variables') and anim_bp.variables:
            existing_vars = [var.variable_name for var in anim_bp.variables]
    except:
        pass
    
    print(f"üìù –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(existing_vars)}")
    
    for var_name in required_vars:
        if var_name in existing_vars:
            print(f"‚úÖ {var_name}")
        else:
            print(f"‚ùå {var_name} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
    
    if all(var in existing_vars for var in required_vars):
        print("üéØ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ò–ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ò–ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

def check_ik_nodes(anim_bp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ò–ö –Ω–æ–¥—ã"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ö –Ω–æ–¥...")
    
    try:
        if hasattr(anim_bp, 'anim_graph') and anim_bp.anim_graph:
            if hasattr(anim_bp.anim_graph, 'nodes') and anim_bp.anim_graph.nodes:
                nodes = [node.node_name for node in anim_bp.anim_graph.nodes]
                print(f"üìù –ù–∞–π–¥–µ–Ω–æ –Ω–æ–¥: {len(nodes)}")
                
                ik_nodes = [node for node in nodes if "IK" in node or "TwoBone" in node]
                if ik_nodes:
                    print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –ò–ö –Ω–æ–¥—ã:")
                    for node in ik_nodes:
                        print(f"  - {node}")
                else:
                    print("‚ö†Ô∏è –ò–ö –Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–¥–∞–º AnimGraph")
        else:
            print("‚ö†Ô∏è AnimGraph –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–¥: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
check_abp_player_ik()
