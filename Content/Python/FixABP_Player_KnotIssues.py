import unreal
import time

def fix_abp_player_knot_issues():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ ABP_Player, –ø—Ä–∏–≤–æ–¥—è—â–∏–µ –∫ –∑–∞–≤—è–∑—ã–≤–∞–Ω–∏—é –Ω–æ–≥ –≤ —É–∑–µ–ª"""
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú ABP_PLAYER - –ó–ê–í–Ø–ó–´–í–ê–ù–ò–ï –ù–û–ì –í –£–ó–ï–õ")
    print("=" * 60)
    
    try:
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        time.sleep(1)
        
        # –ù–∞—Ö–æ–¥–∏–º ABP_Player
        abp_paths = [
            "/Game/BackToZaraysk/Core/Characters/Player/ABP_Player",
            "/Game/BackToZaraysk/Core/Characters/Player/ABP_Player1"
        ]
        
        abp_found = False
        for abp_path in abp_paths:
            if unreal.EditorAssetLibrary.does_asset_exist(abp_path):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω ABP_Player: {abp_path}")
                
                anim_bp = unreal.load_asset(abp_path)
                if anim_bp:
                    print(f"üìÇ ABP_Player –∑–∞–≥—Ä—É–∂–µ–Ω: {abp_path}")
                    
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
                    fix_animation_blueprint_issues(anim_bp)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    unreal.EditorAssetLibrary.save_asset(abp_path)
                    print(f"üíæ ‚úÖ ABP_Player –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {abp_path}")
                    abp_found = True
                    break
        
        if not abp_found:
            print("‚ùå ABP_Player –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤—Å–µ Animation Blueprint...")
            fix_all_animation_blueprints()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

def fix_all_animation_blueprints():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ Animation Blueprint"""
    
    try:
        asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
        
        anim_bp_filter = unreal.ARFilter()
        anim_bp_filter.class_paths = [unreal.AnimBlueprint.static_class()]
        
        anim_bp_assets = asset_registry.get_assets(anim_bp_filter)
        
        if anim_bp_assets:
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ Animation Blueprint: {len(anim_bp_assets)}")
            
            for asset_data in anim_bp_assets:
                if "Player" in asset_data.asset_name:
                    print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {asset_data.asset_name}")
                    
                    anim_bp = unreal.load_asset(asset_data.asset_name)
                    if anim_bp:
                        fix_animation_blueprint_issues(anim_bp)
                        unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
                        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {asset_data.asset_name}")
                        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö ABP: {e}")

def fix_animation_blueprint_issues(anim_bp):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ Animation Blueprint"""
    
    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú ANIMATION BLUEPRINT")
    print("-" * 40)
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    fix_ik_variables(anim_bp)
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–¥—ã
    fix_ik_nodes(anim_bp)
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    fix_connections(anim_bp)
    
    # 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞—Å—Å AnimInstance
    fix_anim_instance_class(anim_bp)
    
    print("\nüéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

def fix_ik_variables(anim_bp):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ò–ö"""
    
    print("\nüìù –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–• –ò–ö:")
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    remove_duplicate_variables(anim_bp)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ò–ö
    ik_variables = [
        ("LeftFootEffectorLocation", "Vector", unreal.Vector(0, 0, 0)),
        ("RightFootEffectorLocation", "Vector", unreal.Vector(0, 0, 0)),
        ("LeftFootIKAlpha", "Float", 1.0),
        ("RightFootIKAlpha", "Float", 1.0)
    ]
    
    existing_vars = []
    try:
        if hasattr(anim_bp, 'variables') and anim_bp.variables:
            existing_vars = [var.variable_name for var in anim_bp.variables]
    except:
        pass
    
    for var_name, var_type, default_value in ik_variables:
        if var_name not in existing_vars:
            try:
                # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                if var_type == "Vector":
                    new_var = unreal.EditorAnimBlueprintUtils.add_variable(
                        anim_bp, var_name, unreal.Vector
                    )
                elif var_type == "Float":
                    new_var = unreal.EditorAnimBlueprintUtils.add_variable(
                        anim_bp, var_name, unreal.Float
                    )
                
                if new_var:
                    new_var.variable_name = var_name
                    new_var.default_value = default_value
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var_name} ({var_type})")
                else:
                    print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å: {var_name}")
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {var_name}: {e}")
        else:
            print(f"  ‚ÑπÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {var_name}")

def remove_duplicate_variables(anim_bp):
    """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
    
    try:
        if hasattr(anim_bp, 'variables') and anim_bp.variables:
            var_names = [var.variable_name for var in anim_bp.variables]
            duplicates = []
            
            for var_name in var_names:
                if var_names.count(var_name) > 1 and var_name not in duplicates:
                    duplicates.append(var_name)
            
            if duplicates:
                print(f"  üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {duplicates}")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                # –ù–æ –≤ Unreal Editor —ç—Ç–æ –æ–±—ã—á–Ω–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é
                
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")

def fix_ik_nodes(anim_bp):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ò–ö –Ω–æ–¥—ã"""
    
    print("\nüîó –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ö –ù–û–î:")
    
    try:
        if hasattr(anim_bp, 'anim_graph') and anim_bp.anim_graph:
            if hasattr(anim_bp.anim_graph, 'nodes') and anim_bp.anim_graph.nodes:
                nodes = [node.node_name for node in anim_bp.anim_graph.nodes]
                
                # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–æ–¥—ã
                remove_duplicate_nodes(anim_bp, nodes)
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ò–ö –Ω–æ–¥—ã
                create_proper_ik_nodes(anim_bp, nodes)
                
            else:
                print("  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–¥–∞–º AnimGraph")
        else:
            print("  ‚ùå AnimGraph –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥: {e}")

def remove_duplicate_nodes(anim_bp, nodes):
    """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–æ–¥—ã"""
    
    duplicates = []
    for node in nodes:
        if nodes.count(node) > 1 and node not in duplicates:
            duplicates.append(node)
    
    if duplicates:
        print(f"  üîÑ –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–æ–¥—ã: {duplicates}")
        print(f"     ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤—Ä—É—á–Ω—É—é –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ")

def create_proper_ik_nodes(anim_bp, existing_nodes):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ò–ö –Ω–æ–¥—ã"""
    
    ik_nodes = [
        ("LeftFootIK", "TwoBoneIK"),
        ("RightFootIK", "TwoBoneIK")
    ]
    
    for node_name, node_type in ik_nodes:
        if node_name not in existing_nodes:
            try:
                # –°–æ–∑–¥–∞–µ–º –ò–ö –Ω–æ–¥
                new_node = unreal.EditorAnimBlueprintUtils.add_node(
                    anim_bp.anim_graph, node_type, node_name
                )
                if new_node:
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ò–ö –Ω–æ–¥: {node_name}")
                else:
                    print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å: {node_name}")
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥–∞ {node_name}: {e}")
        else:
            print(f"  ‚ÑπÔ∏è –ò–ö –Ω–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {node_name}")

def fix_connections(anim_bp):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    
    print("\nüîå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô:")
    
    try:
        if hasattr(anim_bp, 'anim_graph') and anim_bp.anim_graph:
            if hasattr(anim_bp.anim_graph, 'nodes') and anim_bp.anim_graph.nodes:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                check_main_connections(anim_bp)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                check_ik_connections(anim_bp)
                
            else:
                print("  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–¥–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        else:
            print("  ‚ùå AnimGraph –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")

def check_main_connections(anim_bp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    
    print("  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    
    # –ò—â–µ–º Output Pose –Ω–æ–¥
    output_nodes = [node for node in anim_bp.anim_graph.nodes if "Output" in node.node_name or "Pose" in node.node_name]
    
    if output_nodes:
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤—ã—Ö–æ–¥–Ω—ã–µ –Ω–æ–¥—ã: {[node.node_name for node in output_nodes]}")
    else:
        print("  ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´ –í–´–•–û–î–ù–´–ï –ù–û–î–´!")
        print("     –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!")

def check_ik_connections(anim_bp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ò–ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    
    print("  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    
    ik_nodes = [node for node in anim_bp.anim_graph.nodes if "IK" in node.node_name]
    
    if ik_nodes:
        for node in ik_nodes:
            print(f"    –ê–Ω–∞–ª–∏–∑ –ò–ö –Ω–æ–¥–∞: {node.node_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–∏–Ω–æ–≤
            if hasattr(node, 'pins'):
                connected_pins = [pin for pin in node.pins if pin.linked_to]
                if connected_pins:
                    print(f"      ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∏–Ω—ã: {[pin.pin_name for pin in connected_pins]}")
                else:
                    print(f"      ‚ùå –ù–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô!")
                    print(f"         –ù–æ–¥ {node.node_name} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –∏—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é!")
    else:
        print("  ‚ùå –ò–ö –Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def fix_anim_instance_class(anim_bp):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å AnimInstance"""
    
    print("\nüé≠ –ù–ê–°–¢–†–û–ô–ö–ê –ö–õ–ê–°–°–ê ANIMINSTANCE:")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª–∞—Å—Å
        if hasattr(anim_bp, 'parent_class'):
            parent_class = anim_bp.parent_class
            if parent_class:
                class_name = parent_class.get_name()
                print(f"  –¢–µ–∫—É—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å: {class_name}")
                
                # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å
                if "BTZBaseCharacterAnimInstance" not in class_name:
                    print("  ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UBTZBaseCharacterAnimInstance")
                    print("     –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å –ò–ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
                else:
                    print("  ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å")
            else:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å")
        else:
            print("  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ parent_class")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Å–∞: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fix_abp_player_knot_issues()
