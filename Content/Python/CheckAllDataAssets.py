# -*- coding: utf-8 -*-

import unreal

def check_all_data_assets():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ Data Asset –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    
    print("=== –ü–û–ò–°–ö –í–°–ï–• DATA ASSET –í –ü–†–û–ï–ö–¢–ï ===")
    
    # –ü–æ–ª—É—á–∞–µ–º Asset Registry
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    
    # –ò—â–µ–º –≤—Å–µ Data Asset
    data_asset_assets = asset_registry.get_assets_by_class("DataAsset", True)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(data_asset_assets)} Data Asset –≤ –ø—Ä–æ–µ–∫—Ç–µ:")
    
    for asset in data_asset_assets:
        asset_name = asset.get_asset().get_name()
        asset_path = asset.get_asset().get_path_name()
        asset_class = asset.get_asset().get_class().get_name()
        
        print(f"   - {asset_name}")
        print(f"     –ü—É—Ç—å: {asset_path}")
        print(f"     –ö–ª–∞—Å—Å: {asset_class}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—à Data Asset
        if "tactical" in asset_name.lower() or "vest" in asset_name.lower():
            print(f"     üéØ –ù–ê–ô–î–ï–ù DATA ASSET –î–õ–Ø –ñ–ò–õ–ï–¢–ê!")
            check_tactical_vest_data_asset(asset.get_asset())
        
        print()

def check_tactical_vest_data_asset(data_asset):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π Data Asset –¥–ª—è –∂–∏–ª–µ—Ç–∞"""
    
    print(f"=== –ü–†–û–í–ï–†–ö–ê DATA ASSET: {data_asset.get_name()} ===")
    
    try:
        # DisplayName
        display_name = unreal.EditorAssetLibrary.get_editor_property(data_asset, "DisplayName")
        print(f"   DisplayName: {display_name}")
        
        # –†–∞–∑–º–µ—Ä –≤ –∫–ª–µ—Ç–∫–∞—Ö
        size_x = unreal.EditorAssetLibrary.get_editor_property(data_asset, "SizeInCellsX")
        size_y = unreal.EditorAssetLibrary.get_editor_property(data_asset, "SizeInCellsY")
        print(f"   –†–∞–∑–º–µ—Ä: {size_x}x{size_y}")
        
        # –°–ª–æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        equipment_slot = unreal.EditorAssetLibrary.get_editor_property(data_asset, "EquipmentSlot")
        print(f"   EquipmentSlot: {equipment_slot}")
        
        # –°–æ–∫–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        attach_socket = unreal.EditorAssetLibrary.get_editor_property(data_asset, "AttachSocketName")
        print(f"   AttachSocketName: {attach_socket}")
        
        # EquippedMesh - —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ!
        equipped_mesh = unreal.EditorAssetLibrary.get_editor_property(data_asset, "EquippedMesh")
        if equipped_mesh:
            print(f"   EquippedMesh: {equipped_mesh.get_name()} ‚úÖ")
        else:
            print(f"   EquippedMesh: NULL ‚ùå")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—à
            setup_equipped_mesh(data_asset)
        
        # RelativeTransform
        relative_transform = unreal.EditorAssetLibrary.get_editor_property(data_asset, "RelativeTransform")
        print(f"   RelativeTransform: {relative_transform}")
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤–æ–π—Å—Ç–≤: {e}")

def setup_equipped_mesh(data_asset):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å EquippedMesh –¥–ª—è Data Asset"""
    
    print("   üîß –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å EquippedMesh...")
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –º–µ—à—É
    possible_paths = [
        "/Game/insurgent_2/Characters/SK_ChestRigSmall",
        "/Game/insurgent_2/Characters/SK_ChestRigSmall.SK_ChestRigSmall",
        "/Game/insurgent_2/Characters/SK_ChestRigSmall.SK_ChestRigSmall_C",
    ]
    
    for mesh_path in possible_paths:
        print(f"   –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å: {mesh_path}")
        
        mesh_asset = unreal.EditorAssetLibrary.load_asset(mesh_path)
        if mesh_asset:
            mesh_class = mesh_asset.get_class().get_name()
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç: {mesh_asset.get_name()}, –∫–ª–∞—Å—Å: {mesh_class}")
            
            if mesh_class == "SkeletalMesh":
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—à
                unreal.EditorAssetLibrary.set_editor_property(data_asset, "EquippedMesh", mesh_asset)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º Data Asset
                data_asset_path = data_asset.get_path_name()
                unreal.EditorAssetLibrary.save_asset(data_asset_path)
                
                print(f"   ‚úÖ EquippedMesh —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                return True
            else:
                print(f"   ‚ö†Ô∏è –≠—Ç–æ –Ω–µ SkeletalMesh")
        else:
            print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
    
    print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—à")
    return False

def main():
    check_all_data_assets()

if __name__ == "__main__":
    main()
