import unreal

# –ü–†–Ø–ú–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï BLUEPRINT'–û–í –î–õ–Ø IK –°–ò–°–¢–ï–ú–´
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏–∑–º–µ–Ω–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ Blueprint'—ã –Ω–∞–ø—Ä—è–º—É—é

def edit_blueprints_for_ik():
    """–ü—Ä—è–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ Blueprint'–æ–≤ –¥–ª—è IK —Å–∏—Å—Ç–µ–º—ã"""
    
    print("ü§ñ –ü–†–Ø–ú–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï BLUEPRINT'–û–í –î–õ–Ø IK")
    print("=" * 50)
    
    try:
        # –ò–∑–º–µ–Ω—è–µ–º Animation Blueprint
        print("–ò–∑–º–µ–Ω–µ–Ω–∏–µ Animation Blueprint...")
        edit_animation_blueprint()
        
        # –ò–∑–º–µ–Ω—è–µ–º PlayerCharacter Blueprint
        print("–ò–∑–º–µ–Ω–µ–Ω–∏–µ PlayerCharacter Blueprint...")
        edit_player_character_blueprint()
        
        # –°–æ–∑–¥–∞–µ–º Blueprint Interface
        print("–°–æ–∑–¥–∞–Ω–∏–µ Blueprint Interface...")
        create_ik_interface()
        
        print("\n‚úÖ –í–°–ï BLUEPRINT'–´ –ò–ó–ú–ï–ù–ï–ù–´!")
        print("IK —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")

def edit_animation_blueprint():
    """–ò–∑–º–µ–Ω—è–µ—Ç Animation Blueprint –Ω–∞–ø—Ä—è–º—É—é"""
    
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    anim_bp_assets = asset_registry.get_assets_by_class("AnimBlueprint", True)
    
    for asset_data in anim_bp_assets:
        try:
            anim_bp = unreal.load_asset(asset_data.asset_name)
            if anim_bp:
                print(f"  –û–±—Ä–∞–±–æ—Ç–∫–∞: {asset_data.asset_name}")
                
                # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK
                add_ik_variables(anim_bp)
                
                # –°–æ–∑–¥–∞–µ–º IK –Ω–æ–¥—ã
                add_ik_nodes(anim_bp)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
                print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {asset_data.asset_name}")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ {asset_data.asset_name}: {e}")

def add_ik_variables(anim_bp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK"""
    
    variables = [
        ("LeftFootEffectorLocation", unreal.Vector, unreal.Vector(0, 0, 0)),
        ("RightFootEffectorLocation", unreal.Vector, unreal.Vector(0, 0, 0)),
        ("LeftFootIKAlpha", unreal.Float, 1.0),
        ("RightFootIKAlpha", unreal.Float, 1.0)
    ]
    
    existing = [var.variable_name for var in anim_bp.variables]
    
    for name, type_class, default in variables:
        if name not in existing:
            try:
                new_var = unreal.EditorAnimBlueprintUtils.add_variable(
                    anim_bp, name, type_class
                )
                if new_var:
                    new_var.variable_name = name
                    new_var.default_value = default
                    print(f"    ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {name}")
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ {name}: {e}")

def add_ik_nodes(anim_bp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç IK –Ω–æ–¥—ã"""
    
    if not anim_bp.anim_graph:
        print("    ‚ö†Ô∏è AnimGraph –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    nodes = [
        ("TwoBoneIK", "LeftFootIK"),
        ("TwoBoneIK", "RightFootIK")
    ]
    
    existing = [node.node_name for node in anim_bp.anim_graph.nodes]
    
    for node_type, node_name in nodes:
        if node_name not in existing:
            try:
                new_node = unreal.EditorAnimBlueprintUtils.add_node(
                    anim_bp.anim_graph, node_type, node_name
                )
                if new_node:
                    print(f"    ‚úÖ –ù–æ–¥: {node_name}")
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –Ω–æ–¥–∞ {node_name}: {e}")

def edit_player_character_blueprint():
    """–ò–∑–º–µ–Ω—è–µ—Ç PlayerCharacter Blueprint"""
    
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    blueprint_assets = asset_registry.get_assets_by_class("Blueprint", True)
    
    for asset_data in blueprint_assets:
        if "PlayerCharacter" in str(asset_data.asset_name):
            try:
                character_bp = unreal.load_asset(asset_data.asset_name)
                if character_bp:
                    print(f"  –û–±—Ä–∞–±–æ—Ç–∫–∞: {asset_data.asset_name}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∫–µ—Ç—ã
                    check_sockets(character_bp)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º IK –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    add_character_ik_variables(character_bp)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                    unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
                    print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {asset_data.asset_name}")
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ {asset_data.asset_name}: {e}")

def check_sockets(character_bp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∫–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    for comp in character_bp.components:
        if isinstance(comp, unreal.SkeletalMeshComponent):
            left_exists = comp.does_socket_exist("foot_l")
            right_exists = comp.does_socket_exist("foot_r")
            
            print(f"    –°–æ–∫–µ—Ç—ã: foot_l={'‚úÖ' if left_exists else '‚ùå'}, foot_r={'‚úÖ' if right_exists else '‚ùå'}")
            
            if not left_exists or not right_exists:
                print("    ‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Å–æ–∫–µ—Ç—ã 'foot_l' –∏ 'foot_r' –≤ —Å–∫–µ–ª–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
            break

def add_character_ik_variables(character_bp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç IK –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É"""
    
    variables = [
        ("bEnableFootIK", unreal.Bool, True),
        ("FootIKStrength", unreal.Float, 1.0),
        ("FootIKBlendSpeed", unreal.Float, 8.0)
    ]
    
    existing = [var.variable_name for var in character_bp.variables]
    
    for name, type_class, default in variables:
        if name not in existing:
            try:
                new_var = unreal.EditorBlueprintUtils.add_variable_to_blueprint(
                    character_bp, name, type_class
                )
                if new_var:
                    new_var.variable_name = name
                    new_var.default_value = default
                    print(f"    ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {name}")
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ {name}: {e}")

def create_ik_interface():
    """–°–æ–∑–¥–∞–µ—Ç Blueprint Interface –¥–ª—è IK"""
    
    try:
        interface_path = "/Game/Blueprints/IKInterface"
        
        if not unreal.EditorAssetLibrary.does_asset_exist(interface_path):
            unreal.EditorAssetLibrary.make_directory("/Game/Blueprints/")
            
            interface = unreal.EditorAssetLibrary.create_asset(
                "IKInterface", "/Game/Blueprints/",
                unreal.BlueprintInterface, unreal.BlueprintInterfaceFactory()
            )
            
            if interface:
                print("  ‚úÖ Blueprint Interface —Å–æ–∑–¥–∞–Ω")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
                add_interface_functions(interface)
                
                unreal.EditorAssetLibrary.save_asset(interface_path)
                print("  ‚úÖ Blueprint Interface —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            else:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Blueprint Interface")
        else:
            print("  ‚ÑπÔ∏è Blueprint Interface —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Blueprint Interface: {e}")

def add_interface_functions(interface):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫ Blueprint Interface"""
    
    functions = [
        ("SetLeftFootIK", [unreal.FunctionParameter(name="Offset", type=unreal.EdGraphPinType(pin_category="float"))]),
        ("SetRightFootIK", [unreal.FunctionParameter(name="Offset", type=unreal.EdGraphPinType(pin_category="float"))])
    ]
    
    for func_name, params in functions:
        try:
            unreal.BlueprintEditorLibrary.add_function_to_interface(interface, func_name, params)
            print(f"    ‚úÖ –§—É–Ω–∫—Ü–∏—è: {func_name}")
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}: {e}")

# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø BLUEPRINT'–û–í
edit_blueprints_for_ik()
