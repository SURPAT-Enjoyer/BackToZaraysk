import unreal

# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï BLUEPRINT'–û–í –î–õ–Ø IK –°–ò–°–¢–ï–ú–´
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏–∑–º–µ–Ω–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ Blueprint'—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

def modify_blueprints_for_ik():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ—Ç Blueprint'—ã –¥–ª—è IK —Å–∏—Å—Ç–µ–º—ã"""
    
    print("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï BLUEPRINT'–û–í –î–õ–Ø IK")
    print("=" * 60)
    
    try:
        # –®–∞–≥ 1: –ò–∑–º–µ–Ω—è–µ–º Animation Blueprint
        print("\n[–®–ê–ì 1/4] –ò–∑–º–µ–Ω–µ–Ω–∏–µ Animation Blueprint...")
        modify_animation_blueprint()
        
        # –®–∞–≥ 2: –ò–∑–º–µ–Ω—è–µ–º PlayerCharacter Blueprint
        print("\n[–®–ê–ì 2/4] –ò–∑–º–µ–Ω–µ–Ω–∏–µ PlayerCharacter Blueprint...")
        modify_player_character_blueprint()
        
        # –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º Blueprint Interface
        print("\n[–®–ê–ì 3/4] –°–æ–∑–¥–∞–Ω–∏–µ Blueprint Interface...")
        create_blueprint_interface()
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º Blueprint Actor –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("\n[–®–ê–ì 4/4] –°–æ–∑–¥–∞–Ω–∏–µ Blueprint Actor...")
        create_ik_setup_actor()
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï BLUEPRINT'–´ –ò–ó–ú–ï–ù–ï–ù–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!")
        print("=" * 60)
        print("‚úÖ Animation Blueprint –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("‚úÖ PlayerCharacter Blueprint –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("‚úÖ Blueprint Interface —Å–æ–∑–¥–∞–Ω")
        print("‚úÖ Blueprint Actor —Å–æ–∑–¥–∞–Ω")
        print("\nüöÄ IK –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

def modify_animation_blueprint():
    """–ò–∑–º–µ–Ω—è–µ—Ç Animation Blueprint –¥–ª—è IK —Å–∏—Å—Ç–µ–º—ã"""
    
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    anim_bp_assets = asset_registry.get_assets_by_class("AnimBlueprint", True)
    
    for asset_data in anim_bp_assets:
        try:
            anim_bp = unreal.load_asset(asset_data.asset_name)
            if anim_bp:
                print(f"  –û–±—Ä–∞–±–æ—Ç–∫–∞ Animation Blueprint: {asset_data.asset_name}")
                
                # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK
                create_ik_variables_in_abp(anim_bp)
                
                # –°–æ–∑–¥–∞–µ–º IK –Ω–æ–¥—ã
                create_ik_nodes_in_abp(anim_bp)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
                print(f"  ‚úÖ Animation Blueprint –æ–±–Ω–æ–≤–ª–µ–Ω: {asset_data.asset_name}")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ {asset_data.asset_name}: {e}")

def create_ik_variables_in_abp(anim_bp):
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK –≤ Animation Blueprint"""
    
    variables = [
        ("LeftFootEffectorLocation", unreal.Vector, unreal.Vector(0, 0, 0)),
        ("RightFootEffectorLocation", unreal.Vector, unreal.Vector(0, 0, 0)),
        ("LeftFootIKAlpha", unreal.Float, 1.0),
        ("RightFootIKAlpha", unreal.Float, 1.0)
    ]
    
    existing = [var.variable_name for var in anim_bp.variables]
    
    for name, type_class, default in variables:
        if name not in existing:
            try:
                new_var = unreal.EditorAnimBlueprintUtils.add_variable(
                    anim_bp, name, type_class
                )
                if new_var:
                    new_var.variable_name = name
                    new_var.default_value = default
                    print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {name}")
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {name}: {e}")

def create_ik_nodes_in_abp(anim_bp):
    """–°–æ–∑–¥–∞–µ—Ç IK –Ω–æ–¥—ã –≤ Animation Blueprint"""
    
    if not anim_bp.anim_graph:
        print("    ‚ö†Ô∏è AnimGraph –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    nodes = [
        ("TwoBoneIK", "LeftFootIK"),
        ("TwoBoneIK", "RightFootIK")
    ]
    
    existing = [node.node_name for node in anim_bp.anim_graph.nodes]
    
    for node_type, node_name in nodes:
        if node_name not in existing:
            try:
                new_node = unreal.EditorAnimBlueprintUtils.add_node(
                    anim_bp.anim_graph, node_type, node_name
                )
                if new_node:
                    print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–¥: {node_name}")
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥–∞ {node_name}: {e}")

def modify_player_character_blueprint():
    """–ò–∑–º–µ–Ω—è–µ—Ç PlayerCharacter Blueprint –¥–ª—è IK —Å–∏—Å—Ç–µ–º—ã"""
    
    asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
    blueprint_assets = asset_registry.get_assets_by_class("Blueprint", True)
    
    for asset_data in blueprint_assets:
        if "PlayerCharacter" in str(asset_data.asset_name):
            try:
                character_bp = unreal.load_asset(asset_data.asset_name)
                if character_bp:
                    print(f"  –û–±—Ä–∞–±–æ—Ç–∫–∞ PlayerCharacter Blueprint: {asset_data.asset_name}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∫–µ—Ç—ã
                    check_character_sockets(character_bp)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º IK –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    add_ik_variables_to_character(character_bp)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
                    print(f"  ‚úÖ PlayerCharacter Blueprint –æ–±–Ω–æ–≤–ª–µ–Ω: {asset_data.asset_name}")
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ {asset_data.asset_name}: {e}")

def check_character_sockets(character_bp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∫–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    for comp in character_bp.components:
        if isinstance(comp, unreal.SkeletalMeshComponent):
            left_exists = comp.does_socket_exist("foot_l")
            right_exists = comp.does_socket_exist("foot_r")
            
            print(f"    –°–æ–∫–µ—Ç—ã: foot_l={'‚úÖ' if left_exists else '‚ùå'}, foot_r={'‚úÖ' if right_exists else '‚ùå'}")
            
            if not left_exists or not right_exists:
                print("    ‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Å–æ–∫–µ—Ç—ã 'foot_l' –∏ 'foot_r' –≤ —Å–∫–µ–ª–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
            break

def add_ik_variables_to_character(character_bp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç IK –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É"""
    
    variables = [
        ("bEnableFootIK", unreal.Bool, True),
        ("FootIKStrength", unreal.Float, 1.0),
        ("FootIKBlendSpeed", unreal.Float, 8.0)
    ]
    
    existing = [var.variable_name for var in character_bp.variables]
    
    for name, type_class, default in variables:
        if name not in existing:
            try:
                new_var = unreal.EditorBlueprintUtils.add_variable_to_blueprint(
                    character_bp, name, type_class
                )
                if new_var:
                    new_var.variable_name = name
                    new_var.default_value = default
                    print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {name}")
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {name}: {e}")

def create_blueprint_interface():
    """–°–æ–∑–¥–∞–µ—Ç Blueprint Interface –¥–ª—è IK"""
    
    try:
        interface_path = "/Game/Blueprints/IKInterface"
        
        if not unreal.EditorAssetLibrary.does_asset_exist(interface_path):
            unreal.EditorAssetLibrary.make_directory("/Game/Blueprints/")
            
            interface = unreal.EditorAssetLibrary.create_asset(
                "IKInterface", "/Game/Blueprints/",
                unreal.BlueprintInterface, unreal.BlueprintInterfaceFactory()
            )
            
            if interface:
                print("  ‚úÖ Blueprint Interface —Å–æ–∑–¥–∞–Ω")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                add_interface_functions(interface)
                
                unreal.EditorAssetLibrary.save_asset(interface_path)
                print("  ‚úÖ Blueprint Interface —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            else:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Blueprint Interface")
        else:
            print("  ‚ÑπÔ∏è Blueprint Interface —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Blueprint Interface: {e}")

def add_interface_functions(interface):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫ Blueprint Interface"""
    
    functions = [
        ("SetLeftFootIK", [unreal.FunctionParameter(name="Offset", type=unreal.EdGraphPinType(pin_category="float"))]),
        ("SetRightFootIK", [unreal.FunctionParameter(name="Offset", type=unreal.EdGraphPinType(pin_category="float"))])
    ]
    
    for func_name, params in functions:
        try:
            unreal.BlueprintEditorLibrary.add_function_to_interface(interface, func_name, params)
            print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {func_name}")
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}: {e}")

def create_ik_setup_actor():
    """–°–æ–∑–¥–∞–µ—Ç Blueprint Actor –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IK"""
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è Blueprint
        unreal.EditorAssetLibrary.make_directory("/Game/Blueprints/IK/")
        
        # –°–æ–∑–¥–∞–µ–º Blueprint Actor
        actor_path = "/Game/Blueprints/IK/IKSetupActor"
        
        if not unreal.EditorAssetLibrary.does_asset_exist(actor_path):
            ik_actor = unreal.EditorAssetLibrary.create_asset(
                "IKSetupActor",
                "/Game/Blueprints/IK/",
                unreal.Blueprint,
                unreal.BlueprintFactory()
            )
            
            if ik_actor:
                print("  ‚úÖ IK Setup Actor —Å–æ–∑–¥–∞–Ω")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                add_actor_components(ik_actor)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
                add_actor_functions(ik_actor)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                unreal.EditorAssetLibrary.save_asset(actor_path)
                print("  ‚úÖ IK Setup Actor —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            else:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å IK Setup Actor")
        else:
            print("  ‚ÑπÔ∏è IK Setup Actor —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è IK Setup Actor: {e}")

def add_actor_components(actor):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫ Actor"""
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º Scene Component
        scene_comp = unreal.EditorBlueprintUtils.add_component_to_blueprint(
            actor, unreal.SceneComponent
        )
        
        if scene_comp:
            print("    ‚úÖ Scene Component –¥–æ–±–∞–≤–ª–µ–Ω")
            
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

def add_actor_functions(actor):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫ Actor"""
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é BeginPlay
        begin_play_func = unreal.EditorBlueprintUtils.add_function_to_blueprint(
            actor, "BeginPlay"
        )
        
        if begin_play_func:
            print("    ‚úÖ BeginPlay —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IK
        ik_setup_func = unreal.EditorBlueprintUtils.add_function_to_blueprint(
            actor, "SetupIKSystem"
        )
        
        if ik_setup_func:
            print("    ‚úÖ SetupIKSystem —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π: {e}")

# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø BLUEPRINT'–û–í
modify_blueprints_for_ik()
