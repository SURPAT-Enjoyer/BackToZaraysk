import unreal
import time

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò IK
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º API

def fixed_run_ik_setup():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IK"""
    
    print("ü§ñ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò IK")
    print("=" * 60)
    
    try:
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        print("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞...")
        time.sleep(5)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É IK
        print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IK —Å–∏—Å—Ç–µ–º—ã...")
        setup_ik_automatically()
        
        print("\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("IK —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

def setup_ik_automatically():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ IK —Å–∏—Å—Ç–µ–º—ã"""
    
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ IK —Å–∏—Å—Ç–µ–º—ã...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK
    print("–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö IK...")
    create_ik_variables()
    
    # –°–æ–∑–¥–∞–µ–º IK –Ω–æ–¥—ã
    print("–°–æ–∑–¥–∞–Ω–∏–µ IK –Ω–æ–¥...")
    create_ik_nodes()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...")
    setup_character()
    
    # –°–æ–∑–¥–∞–µ–º Blueprint Interface
    print("–°–æ–∑–¥–∞–Ω–∏–µ Blueprint Interface...")
    create_ik_interface()
    
    print("‚úÖ IK —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")

def create_ik_variables():
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º API"""
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –¥–ª—è –ø–æ–∏—Å–∫–∞ Animation Blueprint
        asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
        
        # –ò—â–µ–º –≤—Å–µ Animation Blueprint –≤ –ø—Ä–æ–µ–∫—Ç–µ
        anim_bp_filter = unreal.ARFilter()
        anim_bp_filter.class_paths = [unreal.AnimBlueprint.static_class()]
        anim_bp_filter.recursive_classes = True
        
        anim_bp_assets = asset_registry.get_assets(anim_bp_filter)
        
        for asset_data in anim_bp_assets:
            try:
                anim_bp = unreal.load_asset(asset_data.asset_name)
                if anim_bp:
                    print(f"  –û–±—Ä–∞–±–æ—Ç–∫–∞ Animation Blueprint: {asset_data.asset_name}")
                    add_ik_variables_to_abp(anim_bp)
                    unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ {asset_data.asset_name}: {e}")
                
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Animation Blueprint: {e}")

def add_ik_variables_to_abp(anim_bp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ IK –≤ Animation Blueprint"""
    
    variables = [
        ("LeftFootEffectorLocation", unreal.Vector, unreal.Vector(0, 0, 0)),
        ("RightFootEffectorLocation", unreal.Vector, unreal.Vector(0, 0, 0)),
        ("LeftFootIKAlpha", unreal.Float, 1.0),
        ("RightFootIKAlpha", unreal.Float, 1.0)
    ]
    
    existing = [var.variable_name for var in anim_bp.variables]
    
    for name, type_class, default in variables:
        if name not in existing:
            try:
                new_var = unreal.EditorAnimBlueprintUtils.add_variable(
                    anim_bp, name, type_class
                )
                if new_var:
                    new_var.variable_name = name
                    new_var.default_value = default
                    print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {name}")
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {name}: {e}")

def create_ik_nodes():
    """–°–æ–∑–¥–∞–µ—Ç IK –Ω–æ–¥—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º API"""
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –¥–ª—è –ø–æ–∏—Å–∫–∞ Animation Blueprint
        asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
        
        # –ò—â–µ–º –≤—Å–µ Animation Blueprint –≤ –ø—Ä–æ–µ–∫—Ç–µ
        anim_bp_filter = unreal.ARFilter()
        anim_bp_filter.class_paths = [unreal.AnimBlueprint.static_class()]
        anim_bp_filter.recursive_classes = True
        
        anim_bp_assets = asset_registry.get_assets(anim_bp_filter)
        
        for asset_data in anim_bp_assets:
            try:
                anim_bp = unreal.load_asset(asset_data.asset_name)
                if anim_bp and anim_bp.anim_graph:
                    print(f"  –û–±—Ä–∞–±–æ—Ç–∫–∞ Animation Blueprint: {asset_data.asset_name}")
                    add_ik_nodes_to_abp(anim_bp)
                    unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥ –≤ {asset_data.asset_name}: {e}")
                
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Animation Blueprint: {e}")

def add_ik_nodes_to_abp(anim_bp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç IK –Ω–æ–¥—ã –≤ Animation Blueprint"""
    
    nodes = [
        ("TwoBoneIK", "LeftFootIK"),
        ("TwoBoneIK", "RightFootIK")
    ]
    
    existing = [node.node_name for node in anim_bp.anim_graph.nodes]
    
    for node_type, node_name in nodes:
        if node_name not in existing:
            try:
                new_node = unreal.EditorAnimBlueprintUtils.add_node(
                    anim_bp.anim_graph, node_type, node_name
                )
                if new_node:
                    print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–¥: {node_name}")
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥–∞ {node_name}: {e}")

def setup_character():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º API"""
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –¥–ª—è –ø–æ–∏—Å–∫–∞ Blueprint
        asset_registry = unreal.AssetRegistryHelpers.get_asset_registry()
        
        # –ò—â–µ–º –≤—Å–µ Blueprint –≤ –ø—Ä–æ–µ–∫—Ç–µ
        blueprint_filter = unreal.ARFilter()
        blueprint_filter.class_paths = [unreal.Blueprint.static_class()]
        blueprint_filter.recursive_classes = True
        
        blueprint_assets = asset_registry.get_assets(blueprint_filter)
        
        for asset_data in blueprint_assets:
            if "PlayerCharacter" in str(asset_data.asset_name):
                try:
                    character_bp = unreal.load_asset(asset_data.asset_name)
                    if character_bp:
                        print(f"  –û–±—Ä–∞–±–æ—Ç–∫–∞ PlayerCharacter: {asset_data.asset_name}")
                        check_character_sockets(character_bp)
                        add_ik_variables_to_character(character_bp)
                        unreal.EditorAssetLibrary.save_asset(asset_data.asset_name)
                        print(f"  ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {asset_data.asset_name}")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
                    
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Blueprint: {e}")

def check_character_sockets(character_bp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∫–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    for comp in character_bp.components:
        if isinstance(comp, unreal.SkeletalMeshComponent):
            left_exists = comp.does_socket_exist("foot_l")
            right_exists = comp.does_socket_exist("foot_r")
            
            print(f"    –°–æ–∫–µ—Ç—ã: foot_l={'‚úÖ' if left_exists else '‚ùå'}, foot_r={'‚úÖ' if right_exists else '‚ùå'}")
            
            if not left_exists or not right_exists:
                print("    ‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Å–æ–∫–µ—Ç—ã 'foot_l' –∏ 'foot_r' –≤ —Å–∫–µ–ª–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
            break

def add_ik_variables_to_character(character_bp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç IK –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É"""
    
    variables = [
        ("bEnableFootIK", unreal.Bool, True),
        ("FootIKStrength", unreal.Float, 1.0),
        ("FootIKBlendSpeed", unreal.Float, 8.0)
    ]
    
    existing = [var.variable_name for var in character_bp.variables]
    
    for name, type_class, default in variables:
        if name not in existing:
            try:
                new_var = unreal.EditorBlueprintUtils.add_variable_to_blueprint(
                    character_bp, name, type_class
                )
                if new_var:
                    new_var.variable_name = name
                    new_var.default_value = default
                    print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {name}")
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {name}: {e}")

def create_ik_interface():
    """–°–æ–∑–¥–∞–µ—Ç Blueprint Interface –¥–ª—è IK"""
    
    try:
        interface_path = "/Game/Blueprints/IKInterface"
        
        if not unreal.EditorAssetLibrary.does_asset_exist(interface_path):
            unreal.EditorAssetLibrary.make_directory("/Game/Blueprints/")
            
            interface = unreal.EditorAssetLibrary.create_asset(
                "IKInterface", "/Game/Blueprints/",
                unreal.BlueprintInterface, unreal.BlueprintInterfaceFactory()
            )
            
            if interface:
                print("  ‚úÖ Blueprint Interface —Å–æ–∑–¥–∞–Ω")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
                add_interface_functions(interface)
                
                unreal.EditorAssetLibrary.save_asset(interface_path)
            else:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Blueprint Interface")
        else:
            print("  ‚ÑπÔ∏è Blueprint Interface —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Blueprint Interface: {e}")

def add_interface_functions(interface):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫ Blueprint Interface"""
    
    functions = [
        ("SetLeftFootIK", [unreal.FunctionParameter(name="Offset", type=unreal.EdGraphPinType(pin_category="float"))]),
        ("SetRightFootIK", [unreal.FunctionParameter(name="Offset", type=unreal.EdGraphPinType(pin_category="float"))])
    ]
    
    for func_name, params in functions:
        try:
            unreal.BlueprintEditorLibrary.add_function_to_interface(interface, func_name, params)
            print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {func_name}")
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}: {e}")

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï
fixed_run_ik_setup()
