#include "InventoryContextMenu.h"
#include "InventoryItemData.h"
#include "EquippableItemData.h"
#include "InventoryComponent.h"
#include "GameFramework/PlayerController.h"
#include "GameFramework/Pawn.h"
#include "Kismet/GameplayStatics.h"

void UInventoryContextMenu::ShowMenuForItem(UInventoryItemData* Item, FVector2D ScreenPosition)
{
    if (!Item)
    {
        UE_LOG(LogTemp, Warning, TEXT("InventoryContextMenu: Item is null"));
        return;
    }
    
    CurrentItem = Item;
    UpdateMenuState();
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–µ–Ω—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    SetPositionInViewport(ScreenPosition);
    SetVisibility(ESlateVisibility::Visible);
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Cyan, 
            FString::Printf(TEXT("üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é: %s"), *Item->DisplayName.ToString()));
    }
}

void UInventoryContextMenu::HideMenu()
{
    CurrentItem = nullptr;
    bIsEquippableItem = false;
    bIsItemEquipped = false;
    SetVisibility(ESlateVisibility::Collapsed);
}

void UInventoryContextMenu::EquipItem()
{
    if (!CurrentItem)
    {
        UE_LOG(LogTemp, Warning, TEXT("InventoryContextMenu: No item selected"));
        return;
    }
    
    UEquippableItemData* EquippableItem = Cast<UEquippableItemData>(CurrentItem);
    if (!EquippableItem)
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
                TEXT("‚ùå –≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å!"));
        }
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–∞
    APlayerController* PC = UGameplayStatics::GetPlayerController(GetWorld(), 0);
    if (!PC) return;
    
    APawn* PlayerPawn = PC->GetPawn();
    if (!PlayerPawn) return;
    
    UInventoryComponent* InventoryComp = PlayerPawn->FindComponentByClass<UInventoryComponent>();
    if (!InventoryComp)
    {
        UE_LOG(LogTemp, Error, TEXT("InventoryContextMenu: InventoryComponent not found!"));
        return;
    }
    
    // –≠–∫–∏–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç
    if (InventoryComp->EquipItemFromInventory(EquippableItem))
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
                FString::Printf(TEXT("‚úÖ –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ: %s"), *EquippableItem->DisplayName.ToString()));
        }
        HideMenu();
    }
}

void UInventoryContextMenu::UnequipItem()
{
    if (!CurrentItem)
    {
        UE_LOG(LogTemp, Warning, TEXT("InventoryContextMenu: No item selected"));
        return;
    }
    
    UEquippableItemData* EquippableItem = Cast<UEquippableItemData>(CurrentItem);
    if (!EquippableItem || !EquippableItem->bIsEquipped)
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
                TEXT("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω!"));
        }
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–∞
    APlayerController* PC = UGameplayStatics::GetPlayerController(GetWorld(), 0);
    if (!PC) return;
    
    APawn* PlayerPawn = PC->GetPawn();
    if (!PlayerPawn) return;
    
    UInventoryComponent* InventoryComp = PlayerPawn->FindComponentByClass<UInventoryComponent>();
    if (!InventoryComp)
    {
        UE_LOG(LogTemp, Error, TEXT("InventoryContextMenu: InventoryComponent not found!"));
        return;
    }
    
    // –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    if (InventoryComp->UnequipItemToInventory(EquippableItem->EquipmentSlot))
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
                FString::Printf(TEXT("‚úÖ –°–Ω—è—Ç–æ: %s"), *EquippableItem->DisplayName.ToString()));
        }
        HideMenu();
    }
}

void UInventoryContextMenu::UseItem()
{
    if (!CurrentItem)
    {
        UE_LOG(LogTemp, Warning, TEXT("InventoryContextMenu: No item selected"));
        return;
    }
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
            TEXT("‚ö†Ô∏è UseItem - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"));
    }
    
    HideMenu();
}

void UInventoryContextMenu::DropItem()
{
    if (!CurrentItem)
    {
        UE_LOG(LogTemp, Warning, TEXT("InventoryContextMenu: No item selected"));
        return;
    }
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
            TEXT("‚ö†Ô∏è DropItem - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"));
    }
    
    HideMenu();
}

void UInventoryContextMenu::SplitStack()
{
    if (!CurrentItem)
    {
        UE_LOG(LogTemp, Warning, TEXT("InventoryContextMenu: No item selected"));
        return;
    }
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
            TEXT("‚ö†Ô∏è SplitStack - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"));
    }
    
    HideMenu();
}

bool UInventoryContextMenu::CanEquipItem() const
{
    if (!CurrentItem) return false;
    
    UEquippableItemData* EquippableItem = Cast<UEquippableItemData>(CurrentItem);
    if (!EquippableItem) return false;
    
    // –ù–µ–ª—å–∑—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    return !EquippableItem->bIsEquipped;
}

bool UInventoryContextMenu::CanUnequipItem() const
{
    if (!CurrentItem) return false;
    
    UEquippableItemData* EquippableItem = Cast<UEquippableItemData>(CurrentItem);
    if (!EquippableItem) return false;
    
    // –ú–æ–∂–Ω–æ —Å–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    return EquippableItem->bIsEquipped;
}

bool UInventoryContextMenu::CanUseItem() const
{
    // –ü–æ–∫–∞ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –º–æ–∂–Ω–æ "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å" (–∑–∞–≥–ª—É—à–∫–∞)
    return CurrentItem != nullptr;
}

void UInventoryContextMenu::UpdateMenuState()
{
    if (!CurrentItem)
    {
        bIsEquippableItem = false;
        bIsItemEquipped = false;
        return;
    }
    
    UEquippableItemData* EquippableItem = Cast<UEquippableItemData>(CurrentItem);
    bIsEquippableItem = (EquippableItem != nullptr);
    bIsItemEquipped = bIsEquippableItem && EquippableItem->bIsEquipped;
    
    UE_LOG(LogTemp, Log, TEXT("InventoryContextMenu: Item=%s, Equippable=%d, Equipped=%d"),
        *CurrentItem->DisplayName.ToString(), bIsEquippableItem, bIsItemEquipped);
}




