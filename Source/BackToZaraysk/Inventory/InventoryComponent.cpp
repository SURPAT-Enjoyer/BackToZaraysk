#include "InventoryComponent.h"
#include "EquippableItemData.h"
#include "BackToZaraysk/Components/EquipmentComponent.h"
#include "GameFramework/Character.h"

UInventoryComponent::UInventoryComponent()
{
	PrimaryComponentTick.bCanEverTick = false;
}

bool UInventoryComponent::AddToBackpack(UInventoryItemData* Item)
{
	if (!Item) return false;
	BackpackItems.Add(Item);
	return true;
}

UInventoryItemData* UInventoryComponent::RemoveLastFromBackpack()
{
	if (BackpackItems.Num() == 0) return nullptr;
	UInventoryItemData* Item = BackpackItems.Last();
	BackpackItems.RemoveAt(BackpackItems.Num() - 1);
	return Item;
}

bool UInventoryComponent::RemoveSpecificFromBackpack(UInventoryItemData* Item)
{
    if (!Item) return false;
    const int32 Index = BackpackItems.Find(Item);
    if (Index == INDEX_NONE) return false;
    BackpackItems.RemoveAt(Index);
    return true;
}

bool UInventoryComponent::EquipItemFromInventory(UEquippableItemData* Item)
{
	if (!Item) 
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå EquipItemFromInventory: Item is null"));
		return false;
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	if (!BackpackItems.Contains(Item))
	{
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
				FString::Printf(TEXT("‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ (—Ä–∞–∑–º–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: %d)"), 
					*Item->DisplayName.ToString(), BackpackItems.Num()));
		}
		return false;
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
	ACharacter* Owner = Cast<ACharacter>(GetOwner());
	if (!Owner) 
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå EquipItemFromInventory: Owner is not ACharacter"));
		return false;
	}

	UEquipmentComponent* EquipComp = Owner->FindComponentByClass<UEquipmentComponent>();
	if (!EquipComp)
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå EquipItemFromInventory: EquipmentComponent not found!"));
		return false;
	}

	// –≠–∫–∏–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç
	if (EquipComp->EquipItem(Item))
	{
		// –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ—Ç
		RemoveSpecificFromBackpack(Item);
		EquipmentSlots.Add(Item->EquipmentSlot, Item);
		
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
				FString::Printf(TEXT("üîß Added to EquipmentSlots: Slot %d, Total slots: %d"), 
					(int32)Item->EquipmentSlot, EquipmentSlots.Num()));
		}
		
		return true;
	}

	return false;
}

bool UInventoryComponent::UnequipItemToInventory(EEquipmentSlotType SlotType, bool bDropToWorld)
{
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
	UEquippableItemData** ItemPtr = EquipmentSlots.Find(SlotType);
	if (!ItemPtr || !(*ItemPtr))
	{
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
				TEXT("‚ö†Ô∏è –°–ª–æ—Ç –ø—É—Å—Ç"));
		}
		return false;
	}

	UEquippableItemData* Item = *ItemPtr;

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
	ACharacter* Owner = Cast<ACharacter>(GetOwner());
	if (!Owner) return false;

	UEquipmentComponent* EquipComp = Owner->FindComponentByClass<UEquipmentComponent>();
	if (!EquipComp)
	{
		UE_LOG(LogTemp, Error, TEXT("InventoryComponent: EquipmentComponent not found!"));
		return false;
	}

	// –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
	if (EquipComp->UnequipItem(SlotType, bDropToWorld))
	{
		// –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ—Ç–∞
		EquipmentSlots.Remove(SlotType);
		
		// –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –º–∏—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
		if (!bDropToWorld)
		{
			AddToBackpack(Item);
		}
		
		return true;
	}

	return false;
}

UEquippableItemData* UInventoryComponent::GetEquippedItem(EEquipmentSlotType SlotType) const
{
	const UEquippableItemData* const* ItemPtr = EquipmentSlots.Find(SlotType);
	if (ItemPtr)
	{
		return const_cast<UEquippableItemData*>(*ItemPtr);
	}
	return nullptr;
}







