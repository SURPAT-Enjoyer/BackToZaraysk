#include "InventoryComponent.h"
#include "EquippableItemData.h"
#include "BackToZaraysk/Components/EquipmentComponent.h"
#include "BackToZaraysk/GameData/Items/Test/PickupBase.h"
#include "BackToZaraysk/GameData/Items/EquipmentBase.h"
#include "GameFramework/Character.h"
#include "DrawDebugHelpers.h"

UInventoryComponent::UInventoryComponent()
{
	PrimaryComponentTick.bCanEverTick = false;
}

bool UInventoryComponent::AddToBackpack(UInventoryItemData* Item)
{
	if (!Item) return false;
	BackpackItems.Add(Item);
	return true;
}

UInventoryItemData* UInventoryComponent::RemoveLastFromBackpack()
{
	if (BackpackItems.Num() == 0) return nullptr;
	UInventoryItemData* Item = BackpackItems.Last();
	BackpackItems.RemoveAt(BackpackItems.Num() - 1);
	return Item;
}

bool UInventoryComponent::RemoveSpecificFromBackpack(UInventoryItemData* Item)
{
    if (!Item) return false;
    const int32 Index = BackpackItems.Find(Item);
    if (Index == INDEX_NONE) return false;
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    ItemPositions.Remove(Item);
    
    BackpackItems.RemoveAt(Index);
    return true;
}

bool UInventoryComponent::EquipItemFromInventory(UEquippableItemData* Item)
{
	if (!Item) 
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå EquipItemFromInventory: Item is null"));
		return false;
	}

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
	if (GEngine)
	{
		GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, 
			FString::Printf(TEXT("üîç Equipping item: %s, Slot: %d, EquippedMesh: %s"), 
				*Item->DisplayName.ToString(), 
				(int32)Item->EquipmentSlot,
				Item->EquippedMesh ? TEXT("SET") : TEXT("NULL")));
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	if (!BackpackItems.Contains(Item))
	{
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
				FString::Printf(TEXT("‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ (—Ä–∞–∑–º–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: %d)"), 
					*Item->DisplayName.ToString(), BackpackItems.Num()));
		}
		return false;
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
	ACharacter* Owner = Cast<ACharacter>(GetOwner());
	if (!Owner) 
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå EquipItemFromInventory: Owner is not ACharacter"));
		return false;
	}

	UEquipmentComponent* EquipComp = Owner->FindComponentByClass<UEquipmentComponent>();
	if (!EquipComp)
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå EquipItemFromInventory: EquipmentComponent not found!"));
		return false;
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —É–∂–µ —Å–ª–æ—Ç
	if (EquipmentSlots.Contains(Item->EquipmentSlot))
	{
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
				FString::Printf(TEXT("‚ö†Ô∏è Slot %d is already occupied by another item"), (int32)Item->EquipmentSlot));
		}
		return false;
	}

    // –ï—Å–ª–∏ —ç—Ç–æ —Ä—é–∫–∑–∞–∫ –∏ –≤ ItemData —É–∂–µ –µ—Å—Ç—å PersistenStorage (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞), 
    // –∏ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–º EquipmentStorage –ø—É—Å—Ç–æ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –µ–≥–æ –ø–µ—Ä–µ–¥ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–æ–π
    if (Item->EquipmentSlot == Backpack)
    {
        TArray<TObjectPtr<UInventoryItemData>>& StorageItems = EquipmentStorage.FindOrAdd(Item);
        if (StorageItems.Num() == 0 && Item->PersistentStorage.Num() > 0)
        {
            StorageItems = Item->PersistentStorage;
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —è—á–µ–µ–∫
            if (Item->PersistentCellByItem.Num() > 0)
            {
                for (auto& Kvp : Item->PersistentCellByItem)
                {
                    Item->StoredCellByItem.Add(Kvp.Key, Kvp.Value);
                }
            }
        }
    }

    // –≠–∫–∏–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç
	if (EquipComp->EquipItem(Item))
	{
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
		int32 ItemIndex = BackpackItems.Find(Item);
		if (ItemIndex != INDEX_NONE)
		{
			ItemPositions.Add(Item, ItemIndex);
			if (GEngine)
			{
				GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, 
					FString::Printf(TEXT("üîç Saved position %d for item '%s'"), ItemIndex, *Item->DisplayName.ToString()));
			}
		}
		else
		{
			if (GEngine)
			{
				GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
					FString::Printf(TEXT("‚ùå Failed to find item '%s' in backpack for position saving"), *Item->DisplayName.ToString()));
			}
		}
		
		// –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ—Ç
		RemoveSpecificFromBackpack(Item);
		EquipmentSlots.Add(Item->EquipmentSlot, Item);
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω
		UEquippableItemData* EquippedItem = EquipComp->GetEquippedItem(Item->EquipmentSlot);
		if (EquippedItem == Item)
		{
			if (GEngine)
			{
				GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
					FString::Printf(TEXT("‚úÖ Successfully equipped: %s to slot %d (Total slots: %d)"), 
						*Item->DisplayName.ToString(), (int32)Item->EquipmentSlot, EquipmentSlots.Num()));
			}
			return true;
		}
		else
		{
			// –ï—Å–ª–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
			if (GEngine)
			{
				GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
					TEXT("‚ùå EquipmentComponent failed to equip item, reverting changes"));
			}
			EquipmentSlots.Remove(Item->EquipmentSlot);
			AddToBackpack(Item);
			return false;
		}
	}
	else
	{
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
				FString::Printf(TEXT("‚ùå Failed to equip: %s"), *Item->DisplayName.ToString()));
		}
	}

	return false;
}

bool UInventoryComponent::UnequipItemToInventory(EEquipmentSlotType SlotType, bool bDropToWorld)
{
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
	UEquippableItemData** ItemPtr = EquipmentSlots.Find(SlotType);
	if (!ItemPtr || !(*ItemPtr))
	{
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
				TEXT("‚ö†Ô∏è –°–ª–æ—Ç –ø—É—Å—Ç"));
		}
		return false;
	}

	UEquippableItemData* Item = *ItemPtr;

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
	ACharacter* Owner = Cast<ACharacter>(GetOwner());
	if (!Owner) return false;

	UEquipmentComponent* EquipComp = Owner->FindComponentByClass<UEquipmentComponent>();
	if (!EquipComp)
	{
		UE_LOG(LogTemp, Error, TEXT("InventoryComponent: EquipmentComponent not found!"));
		return false;
	}

    // –ü–µ—Ä–µ–¥ —Å–Ω—è—Ç–∏–µ–º: –µ—Å–ª–∏ —ç—Ç–æ —Ä—é–∫–∑–∞–∫ –∏–ª–∏ –∂–∏–ª–µ—Ç, –∏ –º—ã –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –º–∏—Ä ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ PersistentStorage
    if ((SlotType == Backpack || SlotType == Vest) && bDropToWorld)
    {
        if (UEquippableItemData* EquipItem = Item)
        {
            // –ü—Ä–æ–∫–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ EquipmentStorage –≤ PersistentStorage
            if (TArray<TObjectPtr<UInventoryItemData>>* StorageItems = EquipmentStorage.Find(EquipItem))
            {
                EquipItem->PersistentStorage = *StorageItems;
                // –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —è—á–µ–µ–∫ –∏–∑ runtime-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—É—é –∫–∞—Ä—Ç—É
                for (const TObjectPtr<UInventoryItemData>& It : *StorageItems)
                {
                    if (It && EquipItem->StoredCellByItem.Contains(It))
                    {
                        EquipItem->PersistentCellByItem.Add(It, EquipItem->StoredCellByItem[It]);
                    }
                }
            }
        }
    }

    // –ï—Å–ª–∏ —Å–Ω–∏–º–∞–µ–º –∂–∏–ª–µ—Ç –∏ —Ä—é–∫–∑–∞–∫ –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω, —Ç–æ –≤—Å–µ–≥–¥–∞ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –º–∏—Ä
    if (SlotType == Vest && !bDropToWorld)
    {
        if (GetEquippedItem(Backpack) == nullptr)
        {
            bDropToWorld = true;
        }
    }

    // –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    if (EquipComp->UnequipItem(SlotType, bDropToWorld))
	{
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, 
				FString::Printf(TEXT("üîç UnequipItemToInventory: Item '%s' unequipped, bDropToWorld: %s"), 
					*Item->DisplayName.ToString(), bDropToWorld ? TEXT("true") : TEXT("false")));
		}
		
		// –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ—Ç–∞
		EquipmentSlots.Remove(SlotType);
		
        // –ï—Å–ª–∏ –≤—ã–±—Ä–æ—Å–∏–ª–∏ —Ä—é–∫–∑–∞–∫/–∂–∏–ª–µ—Ç ‚Äî –æ—á–∏—â–∞–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º PersistentStorage –≤–Ω—É—Ç—Ä–∏ ItemData
        if ((SlotType == Backpack || SlotType == Vest) && bDropToWorld)
        {
            EquipmentStorage.Remove(Item);
        }

        // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –º–∏—Ä
        if (!bDropToWorld)
        {
            // –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: —Å–Ω–∏–º–∞–µ–º –∂–∏–ª–µ—Ç ‚Äî –µ—Å–ª–∏ –Ω–∞–¥–µ—Ç —Ä—é–∫–∑–∞–∫ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º, –∫–ª–∞–¥—ë–º –∂–∏–ª–µ—Ç —Ç—É–¥–∞, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –≤–∏–¥–µ–Ω –≤ UI
            if (SlotType == Vest)
            {
                if (UEquippableItemData* EquippedBackpack = GetEquippedItem(Backpack))
                {
                    if (EquippedBackpack->bHasAdditionalStorage)
                    {
                        if (AddToEquipmentStorage(EquippedBackpack, Item))
                        {
                            // –£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—Å—Ç–∏–ª–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä—é–∫–∑–∞–∫–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º
                            return true;
                        }
                    }
                }
            }
            // –ò–Ω–∞—á–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–æ–±—â–∏–π –±—ç–∫–ø–∞–∫‚Äë–ª–∏—Å—Ç)
            RestoreItemToPosition(Item);
        }
        else
        {
            // –°–ø–∞–≤–Ω–∏–º Pickup –¥–ª—è —Ç–µ—Ö —Å–ª–æ—Ç–æ–≤, –≥–¥–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ–≥–æ —Å–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∂–∏–ª–µ—Ç)
            if (SlotType == Vest)
            {
                ACharacter* OwnerChar = Cast<ACharacter>(GetOwner());
                if (OwnerChar)
                {
                    if (UWorld* World = OwnerChar->GetWorld())
                    {
                        FVector ViewLoc; FRotator ViewRot; OwnerChar->GetActorEyesViewPoint(ViewLoc, ViewRot);
                        const FVector SpawnLoc = ViewLoc + ViewRot.Vector() * 80.f + FVector(0.f, 0.f, 100.f);
                        if (GEngine)
                        {
                            GEngine->AddOnScreenDebugMessage(-1, 4.0f, FColor::Yellow,
                                FString::Printf(TEXT("üß™ Drop Vest: Preparing spawn at (%.0f, %.0f, %.0f)"), SpawnLoc.X, SpawnLoc.Y, SpawnLoc.Z));
                        }
                        FActorSpawnParameters S; S.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AdjustIfPossibleButAlwaysSpawn;
                        extern TSubclassOf<AActor> GetPickupClassForItem_Internal(const UInventoryItemData* ItemData);
                        TSubclassOf<AActor> DropClass = GetPickupClassForItem_Internal(Item);
                        if (GEngine)
                        {
                            GEngine->AddOnScreenDebugMessage(-1, 4.0f, FColor::Cyan,
                                FString::Printf(TEXT("üß™ Drop Vest: Class to spawn = %s"), *GetNameSafe(DropClass))); 
                        }
                        if (DropClass)
                        {
                            if (AActor* SpawnedActor = World->SpawnActor<AActor>(DropClass, SpawnLoc, ViewRot, S))
                            {
                                if (GEngine)
                                {
                                    GEngine->AddOnScreenDebugMessage(-1, 4.0f, FColor::Green,
                                        FString::Printf(TEXT("‚úÖ Drop Vest: Spawned %s at (%.0f, %.0f, %.0f)"), *SpawnedActor->GetName(), SpawnLoc.X, SpawnLoc.Y, SpawnLoc.Z));
                                }
                                if (APickupBase* Spawned = Cast<APickupBase>(SpawnedActor))
                                {
                                    Spawned->ItemInstance = Item;
                                    Spawned->ApplyItemInstanceVisuals();
                                    if (GEngine)
                                    {
                                        GEngine->AddOnScreenDebugMessage(-1, 4.0f, FColor::Green, TEXT("‚úÖ Drop Vest: ItemInstance applied to spawned actor"));
                                    }
                                }
                                // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏/–∫–æ–ª–ª–∏–∑–∏–∏
                                const bool bHidden = SpawnedActor->IsHidden();
                                bool bAnyVisible = !bHidden;
                                if (AEquipmentBase* Eq = Cast<AEquipmentBase>(SpawnedActor))
                                {
                                    const bool bSkVisible = (Eq->SkeletalMesh && Eq->SkeletalMesh->IsVisible());
                                    const bool bStVisible = (Eq->Mesh && Eq->Mesh->IsVisible());
                                    bAnyVisible = bAnyVisible || bSkVisible || bStVisible;
                                    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
                                    SpawnedActor->SetActorHiddenInGame(false);
                                    if (Eq->SkeletalMesh) { Eq->SkeletalMesh->SetVisibility(true, true); Eq->SkeletalMesh->SetHiddenInGame(false, true); }
                                    if (Eq->Mesh) { Eq->Mesh->SetVisibility(true, true); Eq->Mesh->SetHiddenInGame(false, true); }
                                    // –í—ã–≤–æ–¥–∏–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∑–∏—Ü–∏—é –º–µ—à–∞
                                    const FVector SkLoc = Eq->SkeletalMesh ? Eq->SkeletalMesh->GetComponentLocation() : FVector::ZeroVector;
                                    const FVector StLoc = Eq->Mesh ? Eq->Mesh->GetComponentLocation() : FVector::ZeroVector;
                                    if (GEngine)
                                    {
                                        GEngine->AddOnScreenDebugMessage(-1, 4.0f, FColor::Cyan,
                                            FString::Printf(TEXT("üß™ Drop Vest: Visible? ActorHidden=%s, SkeletalVisible=%s, StaticVisible=%s"),
                                                bHidden?TEXT("true"):TEXT("false"), bSkVisible?TEXT("true"):TEXT("false"), bStVisible?TEXT("true"):TEXT("false")));
                                        GEngine->AddOnScreenDebugMessage(-1, 4.0f, FColor::Magenta,
                                            FString::Printf(TEXT("üß™ Drop Vest: SkeletalLoc=(%.0f,%.0f,%.0f) StaticLoc=(%.0f,%.0f,%.0f)"),
                                                SkLoc.X, SkLoc.Y, SkLoc.Z, StLoc.X, StLoc.Y, StLoc.Z));
                                    }
                                }
                                else if (APickupBase* PB = Cast<APickupBase>(SpawnedActor))
                                {
                                    const bool bStVisible = (PB->Mesh && PB->Mesh->IsVisible());
                                    bAnyVisible = bAnyVisible || bStVisible;
                                    if (GEngine)
                                    {
                                        GEngine->AddOnScreenDebugMessage(-1, 4.0f, FColor::Cyan,
                                            FString::Printf(TEXT("üß™ Drop Vest: Visible? ActorHidden=%s, StaticVisible=%s"),
                                                bHidden?TEXT("true"):TEXT("false"), bStVisible?TEXT("true"):TEXT("false")));
                                    }
                                }
                                // –ú–∞—Ä–∫–µ—Ä—ã –Ω–∞ –º–µ—Å—Ç–µ —Å–ø–∞–≤–Ω–∞
                                DrawDebugSphere(World, SpawnLoc, 25.f, 16, FColor::Magenta, false, 8.0f);
                                DrawDebugPoint(World, SpawnLoc, 25.f, FColor::Red, false, 8.0f);
                                DrawDebugLine(World, SpawnLoc + FVector(0,0,150.f), SpawnLoc - FVector(0,0,150.f), FColor::Yellow, false, 8.0f, 0, 3.0f);
                                DrawDebugString(World, SpawnLoc + FVector(0,0,180.f), TEXT("VEST SPAWN"), nullptr, FColor::White, 8.0f, true);
                            }
                            else if (GEngine)
                            {
                                GEngine->AddOnScreenDebugMessage(-1, 4.0f, FColor::Red, TEXT("‚ùå Drop Vest: SpawnActor returned nullptr"));
                            }
                        }
                    }
                }
            }
        }
		
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
				FString::Printf(TEXT("‚úÖ UnequipItemToInventory: Item '%s' successfully unequipped"), 
					*Item->DisplayName.ToString()));
		}
		
		return true;
	}

	return false;
}

UEquippableItemData* UInventoryComponent::GetEquippedItem(EEquipmentSlotType SlotType) const
{
	const UEquippableItemData* const* ItemPtr = EquipmentSlots.Find(SlotType);
	if (ItemPtr)
	{
		return const_cast<UEquippableItemData*>(*ItemPtr);
	}
	return nullptr;
}

bool UInventoryComponent::RestoreItemToPosition(UInventoryItemData* Item)
{
	if (!Item) 
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå RestoreItemToPosition: Item is null"));
		return false;
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É–∂–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	if (BackpackItems.Contains(Item))
	{
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
				FString::Printf(TEXT("‚ö†Ô∏è Item '%s' is already in backpack"), *Item->DisplayName.ToString()));
		}
		return true; // –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
	}
	
	if (GEngine)
	{
		GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, 
			FString::Printf(TEXT("üîç Restoring item '%s', current backpack size: %d"), 
				*Item->DisplayName.ToString(), BackpackItems.Num()));
	}
	
	// –ò—â–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
	int32* SavedPosition = ItemPositions.Find(Item);
	if (SavedPosition)
	{
		// –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
		int32 Position = *SavedPosition;
		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä–∞–∑–º–µ—Ä–æ–º –º–∞—Å—Å–∏–≤–∞
		Position = FMath::Clamp(Position, 0, BackpackItems.Num());
		BackpackItems.Insert(Item, Position);
		
		// –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç—ã –ø–æ–∑–∏—Ü–∏–π
		ItemPositions.Remove(Item);
		
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
				FString::Printf(TEXT("‚úÖ Restored item '%s' to position %d (new backpack size: %d)"), 
					*Item->DisplayName.ToString(), Position, BackpackItems.Num()));
		}
		
		return true;
	}
	else
	{
		// –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
		BackpackItems.Add(Item);
		
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
				FString::Printf(TEXT("‚ö†Ô∏è No saved position for '%s', added to end (new backpack size: %d)"), 
					*Item->DisplayName.ToString(), BackpackItems.Num()));
		}
		
		return true;
	}
}

bool UInventoryComponent::AddToEquipmentStorage(UEquippableItemData* Equipment, UInventoryItemData* Item)
{
	if (!Equipment || !Item)
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå AddToEquipmentStorage: Equipment or Item is null"));
		return false;
	}

    // –ó–∞–ø—Ä–µ—â–∞–µ–º –∫–ª–∞—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å–∞–º–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä—å –µ–≥–æ –∂–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (—Ä—é–∫–∑–∞–∫ –≤ —Ä—é–∫–∑–∞–∫)
    if (Equipment == Item)
    {
        if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå –ù–µ–ª—å–∑—è –ø–æ–º–µ—Å—Ç–∏—Ç—å —Ä—é–∫–∑–∞–∫ –≤ —Å–∞–º–æ–≥–æ —Å–µ–±—è"));
        return false;
    }
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	if (!Equipment->bHasAdditionalStorage)
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå Equipment has no additional storage"));
		return false;
	}
	
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    TArray<TObjectPtr<UInventoryItemData>>& StorageItems = EquipmentStorage.FindOrAdd(Equipment);
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º –≤ —Å–∞–º–æ–º ItemData
    if (StorageItems.Num() == 0 && Equipment->PersistentStorage.Num() > 0)
    {
        StorageItems = Equipment->PersistentStorage;
    }
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —è—á–µ–µ–∫)
	int32 TotalCells = Equipment->AdditionalGridSize.X * Equipment->AdditionalGridSize.Y;
	int32 UsedCells = 0;
	for (const auto& StoredItem : StorageItems)
	{
		if (StoredItem)
		{
			UsedCells += StoredItem->SizeInCellsX * StoredItem->SizeInCellsY;
		}
	}
	
	if (UsedCells + (Item->SizeInCellsX * Item->SizeInCellsY) > TotalCells)
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
			FString::Printf(TEXT("‚ùå Not enough space in equipment storage. Used: %d, Need: %d, Total: %d"), 
				UsedCells, Item->SizeInCellsX * Item->SizeInCellsY, TotalCells));
		return false;
	}
	
    StorageItems.Add(Item);
    // –î—É–±–ª–∏—Ä—É–µ–º –≤ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å –≤—ã–±—Ä–æ—Å –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–Ω—è—Ç–∏–µ
    if (!Equipment->PersistentStorage.Contains(Item))
    {
        Equipment->PersistentStorage.Add(Item);
    }
    else
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –µ–≥–æ –≤–µ–¥—ë–º (–ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–∞–º)
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–∞—Ä—ã X,Y —á–µ—Ä–µ–∑ StoredCellsXY
    }
	
	if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
		FString::Printf(TEXT("‚úÖ Added '%s' to equipment storage. Items count: %d"), 
			*Item->DisplayName.ToString(), StorageItems.Num()));
	
	return true;
}

bool UInventoryComponent::RemoveFromEquipmentStorage(UEquippableItemData* Equipment, UInventoryItemData* Item)
{
	if (!Equipment || !Item)
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå RemoveFromEquipmentStorage: Equipment or Item is null"));
		return false;
	}
	
    TArray<TObjectPtr<UInventoryItemData>>* StorageItems = EquipmentStorage.Find(Equipment);
	if (!StorageItems)
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå No storage found for this equipment"));
		return false;
	}
	
	int32 RemovedCount = StorageItems->RemoveAll([Item](const TObjectPtr<UInventoryItemData>& StoredItem)
	{
		return StoredItem == Item;
	});
	
    if (RemovedCount > 0)
	{
        // –ù–µ —É–¥–∞–ª—è–µ–º –∏–∑ PersistentStorage: –æ–Ω–æ —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–æ—Å–∞/–ø–æ–¥–±–æ—Ä–∞
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
			FString::Printf(TEXT("‚úÖ Removed '%s' from equipment storage. Remaining items: %d"), 
				*Item->DisplayName.ToString(), StorageItems->Num()));
		return true;
	}
	else
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå Item not found in equipment storage"));
		return false;
	}
}

bool UInventoryComponent::RemoveCompletelyFromEquipmentStorage(UEquippableItemData* Equipment, UInventoryItemData* Item)
{
    if (!Equipment || !Item) return false;
    bool bRemoved = false;
    TArray<TObjectPtr<UInventoryItemData>>* StorageItems = EquipmentStorage.Find(Equipment);
    if (StorageItems)
    {
        const int32 Before = StorageItems->Num();
        StorageItems->Remove(Item);
        bRemoved |= (Before != StorageItems->Num());
    }
    // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –∫–∞—Ä—Ç –ø–æ–∑–∏—Ü–∏–π
    Equipment->PersistentStorage.Remove(Item);
    Equipment->StoredCellByItem.Remove(Item);
    Equipment->PersistentCellByItem.Remove(Item);
    return bRemoved;
}

bool UInventoryComponent::RemoveFromAnyStorage(UInventoryItemData* Item)
{
    if (!Item) return false;
    bool bRemoved = false;
    // –†—é–∫–∑–∞–∫
    bRemoved |= RemoveSpecificFromBackpack(Item);
    // –•—Ä–∞–Ω–∏–ª–∏—â–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    if (UEquippableItemData* EquippedBackpack = GetEquippedItem(Backpack))
    {
        bRemoved |= RemoveCompletelyFromEquipmentStorage(EquippedBackpack, Item);
    }
    if (UEquippableItemData* EquippedVest = GetEquippedItem(Vest))
    {
        bRemoved |= RemoveCompletelyFromEquipmentStorage(EquippedVest, Item);
    }
    // –ü–æ—è—Å –∏ –∫–∞—Ä–º–∞–Ω—ã
    auto RemoveFromArray = [&](TArray<TObjectPtr<UInventoryItemData>>& Arr)
    {
        const int32 Before = Arr.Num();
        Arr.Remove(Item);
        return Arr.Num() != Before;
    };
    bRemoved |= RemoveFromArray(BeltStorageItems);
    bRemoved |= RemoveFromArray(Pocket1Items);
    bRemoved |= RemoveFromArray(Pocket2Items);
    bRemoved |= RemoveFromArray(Pocket3Items);
    bRemoved |= RemoveFromArray(Pocket4Items);

    return bRemoved;
}

TArray<UInventoryItemData*> UInventoryComponent::GetEquipmentStorageItems(UEquippableItemData* Equipment)
{
	TArray<UInventoryItemData*> Result;
	
	if (!Equipment)
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå GetEquipmentStorageItems: Equipment is null"));
		return Result;
	}
	
	TArray<TObjectPtr<UInventoryItemData>>* StorageItems = EquipmentStorage.Find(Equipment);
	if (StorageItems)
	{
		for (const auto& Item : *StorageItems)
		{
			if (Item)
			{
				Result.Add(Item);
			}
		}
	}
	
	return Result;
}

bool UInventoryComponent::SyncWithEquipmentComponent()
{
	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
	ACharacter* Owner = Cast<ACharacter>(GetOwner());
	if (!Owner) 
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå SyncWithEquipmentComponent: Owner is not ACharacter"));
		return false;
	}

	UEquipmentComponent* EquipComp = Owner->FindComponentByClass<UEquipmentComponent>();
	if (!EquipComp)
	{
		if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå SyncWithEquipmentComponent: EquipmentComponent not found!"));
		return false;
	}

	bool bSyncSuccessful = true;
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –≤ EquipmentSlots
	for (auto& SlotPair : EquipmentSlots)
	{
		EEquipmentSlotType SlotType = SlotPair.Key;
		UEquippableItemData* Item = SlotPair.Value;
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω –≤ EquipmentComponent
		UEquippableItemData* EquippedItem = EquipComp->GetEquippedItem(SlotType);
		if (EquippedItem != Item)
		{
			if (GEngine)
			{
				GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
					FString::Printf(TEXT("‚ùå Sync error: Slot %d mismatch! Inventory: %s, Equipment: %s"), 
						(int32)SlotType,
						Item ? *Item->DisplayName.ToString() : TEXT("NULL"),
						EquippedItem ? *EquippedItem->DisplayName.ToString() : TEXT("NULL")));
			}
			bSyncSuccessful = false;
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ EquipmentComponent
	for (int32 SlotIndex = 0; SlotIndex < 7; ++SlotIndex) // –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ—Ç—ã
	{
		EEquipmentSlotType SlotType = (EEquipmentSlotType)SlotIndex;
		if (EquipComp->IsSlotOccupied(SlotType))
		{
			UEquippableItemData* EquippedItem = EquipComp->GetEquippedItem(SlotType);
			if (!EquipmentSlots.Contains(SlotType))
			{
				if (GEngine)
				{
					GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
						FString::Printf(TEXT("‚ùå Sync error: Slot %d equipped in EquipmentComponent but not in InventoryComponent!"), 
							(int32)SlotType));
				}
				bSyncSuccessful = false;
			}
		}
	}
	
	if (bSyncSuccessful)
	{
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
				TEXT("‚úÖ InventoryComponent and EquipmentComponent are synchronized"));
		}
	}
	else
	{
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
				TEXT("‚ùå Synchronization errors detected between InventoryComponent and EquipmentComponent"));
		}
	}
	
	return bSyncSuccessful;
}

bool UInventoryComponent::HasSpaceInGridLike(const FIntPoint& GridSize, const TArray<TObjectPtr<UInventoryItemData>>& Items, int32 ItemSizeX, int32 ItemSizeY) const
{
    // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ¬´–ø–æ –ø–ª–æ—â–∞–¥–∏¬ª: —Å—É–º–º—ã —Ä–∞–∑–º–µ—Ä–æ–≤ –±–µ–∑ —Ä–∞—Å–∫–ª–∞–¥–∫–∏
    int32 UsedCells = 0;
    for (const auto& It : Items)
    {
        if (It)
        {
            UsedCells += FMath::Max(1, It->SizeInCellsX) * FMath::Max(1, It->SizeInCellsY);
        }
    }
    const int32 TotalCells = GridSize.X * GridSize.Y;
    const int32 NeedCells = FMath::Max(1, ItemSizeX) * FMath::Max(1, ItemSizeY);
    return (UsedCells + NeedCells) <= TotalCells;
}

bool UInventoryComponent::AddToGridLike(TArray<TObjectPtr<UInventoryItemData>>& Items, const FIntPoint& GridSize, UInventoryItemData* Item)
{
    if (!Item) return false;
    if (!HasSpaceInGridLike(GridSize, Items, Item->SizeInCellsX, Item->SizeInCellsY)) return false;
    Items.Add(Item);
    return true;
}

bool UInventoryComponent::TryPickupItem(UInventoryItemData* Item)
{
    if (!Item)
    {
        if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, TEXT("‚ùå TryPickupItem: Item is null"));
        return false;
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–∏–Ω–∏–º—É–º 1x1
    Item->SizeInCellsX = FMath::Max(1, Item->SizeInCellsX);
    Item->SizeInCellsY = FMath::Max(1, Item->SizeInCellsY);

    // 1) –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —ç–∫–∏–ø–∏—Ä—É–µ–º—ã–π –∏ —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω ‚Äî —ç–∫–∏–ø–∏—Ä—É–µ–º
    if (UEquippableItemData* Eq = Cast<UEquippableItemData>(Item))
    {
        if (!EquipmentSlots.Contains(Eq->EquipmentSlot))
        {
            BackpackItems.Add(Item);
            const bool bEquipped = EquipItemFromInventory(Eq);
            if (!bEquipped)
            {
                RemoveSpecificFromBackpack(Item);
            }
            return bEquipped;
        }
    }

    // 2) –ï—Å–ª–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω —Ä—é–∫–∑–∞–∫ ‚Äî –ø—Ä–æ–±—É–µ–º –¥–æ–ø. —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä—é–∫–∑–∞–∫–∞
    if (UEquippableItemData* EquippedBackpack = GetEquippedItem(Backpack))
    {
        if (EquippedBackpack->bHasAdditionalStorage)
        {
            if (AddToEquipmentStorage(EquippedBackpack, Item))
            {
                return true;
            }
        }
    }

    // 3) –ï—Å–ª–∏ –≤ —Ä—é–∫–∑–∞–∫–µ –Ω–µ—Ç –º–µ—Å—Ç–∞ –∏–ª–∏ –æ–Ω –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–±—É–µ–º –∫–∞—Ä–º–∞–Ω—ã (–ø–æ –æ–¥–Ω–æ–º—É 1x1)
    const FIntPoint OneCell(1,1);
    if (Item->SizeInCellsX == 1 && Item->SizeInCellsY == 1)
    {
        if (AddToGridLike(Pocket1Items, OneCell, Item)) return true;
        if (AddToGridLike(Pocket2Items, OneCell, Item)) return true;
        if (AddToGridLike(Pocket3Items, OneCell, Item)) return true;
        if (AddToGridLike(Pocket4Items, OneCell, Item)) return true;
    }

    // 4) –ï—Å–ª–∏ –≤ –∫–∞—Ä–º–∞–Ω–∞—Ö –Ω–µ—Ç –º–µ—Å—Ç–∞ ‚Äî –ø—Ä–æ–±—É–µ–º –∂–∏–ª–µ—Ç
    if (UEquippableItemData* EquippedVest = GetEquippedItem(Vest))
    {
        if (EquippedVest->bHasAdditionalStorage)
        {
            if (AddToEquipmentStorage(EquippedVest, Item))
            {
                return true;
            }
        }
    }

    // –ò–Ω–∞—á–µ ‚Äî –Ω–µ –ø–æ–¥–±–∏—Ä–∞–µ–º
    if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Yellow, TEXT("‚ö†Ô∏è TryPickupItem: No space in pockets/backpack/vest"));
    return false;
}

bool UInventoryComponent::MoveItemToVest(UInventoryItemData* Item)
{
    if (!Item) return false;
    if (UEquippableItemData* EquippedVest = GetEquippedItem(Vest))
    {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è
        RemoveSpecificFromBackpack(Item);
        if (UEquippableItemData* EquippedBackpack = GetEquippedItem(Backpack)) { RemoveFromEquipmentStorage(EquippedBackpack, Item); }
        RemoveFromEquipmentStorage(EquippedVest, Item);
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª–æ–∂–∏—Ç—å –≤ –∂–∏–ª–µ—Ç
        if (EquippedVest->bHasAdditionalStorage)
        {
            return AddToEquipmentStorage(EquippedVest, Item);
        }
    }
    return false;
}

bool UInventoryComponent::MoveItemToPocket(int32 PocketIndex, UInventoryItemData* Item)
{
    if (!Item) return false;
    TArray<TObjectPtr<UInventoryItemData>>* Target = nullptr;
    switch (PocketIndex)
    {
        case 1: Target = &Pocket1Items; break;
        case 2: Target = &Pocket2Items; break;
        case 3: Target = &Pocket3Items; break;
        case 4: Target = &Pocket4Items; break;
        default: return false;
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –∫–∞—Ä–º–∞–Ω–æ–≤
    Pocket1Items.Remove(Item);
    Pocket2Items.Remove(Item);
    Pocket3Items.Remove(Item);
    Pocket4Items.Remove(Item);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –¥—Ä—É–≥–∏—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
    RemoveSpecificFromBackpack(Item);
    if (UEquippableItemData* EquippedVest = GetEquippedItem(Vest)) { RemoveCompletelyFromEquipmentStorage(EquippedVest, Item); }
    if (UEquippableItemData* EquippedBackpack = GetEquippedItem(Backpack)) { RemoveCompletelyFromEquipmentStorage(EquippedBackpack, Item); }
    
    return AddToGridLike(*Target, FIntPoint(1,1), Item);
}







