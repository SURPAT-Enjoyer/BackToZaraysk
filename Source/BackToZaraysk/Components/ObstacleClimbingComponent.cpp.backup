#include "ObstacleClimbingComponent.h"
#include "GameFramework/Character.h"
#include "GameFramework/CharacterMovementComponent.h"
#include "GameFramework/PlayerController.h"
#include "Components/CapsuleComponent.h"
#include "Components/SceneComponent.h"
#include "Kismet/KismetSystemLibrary.h"
#include "Kismet/KismetMathLibrary.h"
#include "DrawDebugHelpers.h"

UObstacleClimbingComponent::UObstacleClimbingComponent()
{
    PrimaryComponentTick.bCanEverTick = true;
    PrimaryComponentTick.bStartWithTickEnabled = true;
}

void UObstacleClimbingComponent::BeginPlay()
{
    Super::BeginPlay();
    OwnerActor = GetOwner();
}

void UObstacleClimbingComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)
{
    Super::TickComponent(DeltaTime, TickType, ThisTickFunction);

    ACharacter* Character = Cast<ACharacter>(OwnerActor);
    if (!Character) return;

    if (bIsClimbing)
    {
        UpdateClimbAnimation(DeltaTime);
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¢–û–õ–¨–ö–û –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∞–∑–∞–Ω–∏—è
        if (Character->GetCharacterMovement()->MovementMode != MOVE_None)
        {
            Character->GetCharacterMovement()->SetMovementMode(MOVE_None);
        }
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Mesh —Å –∫–∞–ø—Å—É–ª–æ–π –ö–ê–ñ–î–´–ô –∫–∞–¥—Ä!
        if (USkeletalMeshComponent* Mesh = Character->GetMesh())
        {
            // –ê–ì–†–ï–°–°–ò–í–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ Mesh –≤ RELATIVE —Ä–µ–∂–∏–º–µ
            if (Mesh->IsUsingAbsoluteLocation() || Mesh->IsUsingAbsoluteRotation())
            {
                Mesh->SetUsingAbsoluteLocation(false);
                Mesh->SetUsingAbsoluteRotation(false);
                Mesh->SetUsingAbsoluteScale(false);
                
                if (GEngine)
                {
                    GEngine->AddOnScreenDebugMessage(-1, 0.5f, FColor::Red, 
                        TEXT("‚ö†Ô∏è MESH WAS IN ABSOLUTE MODE! Fixed to relative!"));
                }
            }
            
            Mesh->SetRelativeLocation(FVector::ZeroVector);
            Mesh->SetRelativeRotation(FRotator::ZeroRotator);
            Mesh->AttachToComponent(Character->GetRootComponent(), FAttachmentTransformRules::SnapToTargetNotIncludingScale);
        }
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–æ—Ç–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!
        FRotator CurrentRotation = Character->GetActorRotation();
        
        // DEBUG: –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ—Ç–∞—Ü–∏—é
        static float DebugTimer = 0.0f;
        DebugTimer += DeltaTime;
        if (DebugTimer >= 1.0f)
        {
            DebugTimer = 0.0f;
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 1.0f, FColor::Yellow, 
                    FString::Printf(TEXT("üîç DURING CLIMB: Current=%.1f, Start=%.1f, Diff=%.1f"), 
                        CurrentRotation.Yaw, StartRotation.Yaw, CurrentRotation.Yaw - StartRotation.Yaw));
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1 –≥—Ä–∞–¥—É—Å
        float YawDifference = FMath::Abs(CurrentRotation.Yaw - StartRotation.Yaw);
        if (YawDifference > 1.0f)
        {
            Character->SetActorRotation(StartRotation);
            
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 0.5f, FColor::Red, 
                    FString::Printf(TEXT("‚ö†Ô∏è ROTATION OVERRIDE: %.1f -> %.1f (Diff: %.1f)"), 
                        CurrentRotation.Yaw, StartRotation.Yaw, YawDifference));
            }
        }
    }
    else
    {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–∏–∑–∏–π
        if (bWaitingForCollisionRestore)
        {
            CollisionRestoreTimer += DeltaTime;
            
            if (CollisionRestoreTimer >= 0.5f)
            {
                // –í–∫–ª—é—á–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –¢–ï–ü–ï–†–¨!
                UCapsuleComponent* Capsule = Character->GetCapsuleComponent();
                Capsule->SetCollisionEnabled(ECollisionEnabled::QueryAndPhysics);
                Capsule->SetCollisionResponseToAllChannels(ECR_Block);
                Capsule->SetCollisionResponseToChannel(ECC_Pawn, ECR_Block);
                
                bWaitingForCollisionRestore = false;
                CollisionRestoreTimer = 0.0f;
                
                if (GEngine)
                {
                    GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Green, 
                        FString::Printf(TEXT("‚úÖ COLLISION ENABLED! Enabled: %d"), 
                            (int32)Capsule->GetCollisionEnabled()));
                }
            }
        }
        
        // DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –ª–∞–∑–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
        static float DebugTimer = 0.0f;
        DebugTimer += DeltaTime;
        
        if (DebugTimer >= 0.5f)
        {
            DebugTimer = 0.0f;
            
            UCharacterMovementComponent* MovementComp = Character->GetCharacterMovement();
            if (GEngine && MovementComp)
            {
                GEngine->AddOnScreenDebugMessage(100, 0.5f, FColor::White, 
                    FString::Printf(TEXT("üîç Status: Mode=%d, Ground=%s, Vel=%.1f, Collision=%d, Enabled=%s"), 
                        (int32)MovementComp->MovementMode,
                        MovementComp->IsMovingOnGround() ? TEXT("YES") : TEXT("NO"),
                        MovementComp->Velocity.Size(),
                        (int32)Character->GetCapsuleComponent()->GetCollisionEnabled(),
                        MovementComp->IsComponentTickEnabled() ? TEXT("YES") : TEXT("NO")));
            }
        }
    }
}

bool UObstacleClimbingComponent::TryClimbObstacle()
{
    if (bIsClimbing)
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, TEXT("Obstacle Climbing: Already climbing!"));
        }
        return false;
    }

    FObstacleInfo Obstacle = CheckObstacleAhead();
    if (!Obstacle.bCanClimb)
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Orange, TEXT("Obstacle Climbing: No valid obstacle found or obstacle too high!"));
        }
        OnClimbFailed.Broadcast();
        return false;
    }

    // Reset from previous climb
    CurrentClimbType = EObstacleClimbType::None;

    CurrentObstacle = Obstacle;
    CurrentClimbType = Obstacle.ClimbType;
    bIsClimbing = true;
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
            FString::Printf(TEXT("TryStartClimb: Set CurrentClimbType=%d (was reset first)"), (int32)CurrentClimbType));
    }

    if (GEngine)
    {
        FString ClimbTypeString;
        switch (CurrentClimbType)
        {
        case EObstacleClimbType::Vault:
            ClimbTypeString = TEXT("Vault (–ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–Ω–∏–µ)");
            break;
        case EObstacleClimbType::Climb:
            ClimbTypeString = TEXT("Climb (–≤–∑–±–∏—Ä–∞–Ω–∏–µ)");
            break;
        case EObstacleClimbType::ClimbOver:
            ClimbTypeString = TEXT("ClimbOver (–≤–∑–±–∏—Ä–∞–Ω–∏–µ –∏ —Å–ø—É—Å–∫)");
            break;
        default:
            ClimbTypeString = TEXT("Unknown");
            break;
        }
        
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
            FString::Printf(TEXT("Obstacle Climbing: Starting %s! Height: %.1f, Thickness: %.1f"), 
                *ClimbTypeString, Obstacle.ObstacleHeight, Obstacle.ObstacleThickness));
    }

    StartClimbAnimation(Obstacle);
    OnClimbStarted.Broadcast(CurrentClimbType);

    return true;
}

FObstacleInfo UObstacleClimbingComponent::CheckObstacleAhead()
{
    FObstacleInfo Result;

    if (!OwnerActor)
        return Result;

    ACharacter* Character = Cast<ACharacter>(OwnerActor);
    if (!Character)
        return Result;

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
    FVector ForwardVector = Character->GetActorForwardVector();
    FVector CharacterLocation = Character->GetActorLocation();
    FVector TraceStartLocation = CharacterLocation + FVector(0, 0, DetectionHeight);
    FVector TraceEndLocation = TraceStartLocation + ForwardVector * DetectionDistance;

    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 1.0f, FColor::Cyan, 
            FString::Printf(TEXT("Trace Setup: Start(%.1f, %.1f, %.1f) -> End(%.1f, %.1f, %.1f), Distance=%.1f"), 
                TraceStartLocation.X, TraceStartLocation.Y, TraceStartLocation.Z,
                TraceEndLocation.X, TraceEndLocation.Y, TraceEndLocation.Z,
                DetectionDistance));
    }

    // –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
    FHitResult HitResult;
    TArray<AActor*> ActorsToIgnore;
    ActorsToIgnore.Add(OwnerActor);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —à–∏—Ä–æ–∫—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
    bool bHit = UKismetSystemLibrary::LineTraceSingle(
        GetWorld(),
        TraceStartLocation,
        TraceEndLocation,
        UEngineTypes::ConvertToTraceType(ECC_WorldStatic), // –ò—Å–ø–æ–ª—å–∑—É–µ–º WorldStatic –≤–º–µ—Å—Ç–æ Visibility
        true,
        ActorsToIgnore,
        EDrawDebugTrace::ForOneFrame,
        HitResult,
        true
    );

    if (GEngine)
    {
        if (bHit)
        {
            GEngine->AddOnScreenDebugMessage(-1, 1.0f, FColor::Cyan, 
                FString::Printf(TEXT("Obstacle Detection: Hit actor %s at distance %.1f"), 
                    HitResult.GetActor() ? *HitResult.GetActor()->GetName() : TEXT("NULL"), 
                    FVector::Dist(TraceStartLocation, HitResult.Location)));
        }
        else
        {
            GEngine->AddOnScreenDebugMessage(-1, 1.0f, FColor::Silver, TEXT("Obstacle Detection: No obstacle found"));
        }
    }

    if (!bHit || !IsValidObstacle(HitResult))
    {
        if (GEngine && bHit)
        {
            GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, 
                FString::Printf(TEXT("Obstacle Detection: Invalid obstacle - %s"), 
                    HitResult.GetActor() ? *HitResult.GetActor()->GetName() : TEXT("NULL")));
        }
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        if (!bHit)
        {
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 1.0f, FColor::Yellow, TEXT("Trying alternative traces..."));
            }
            
            // 1. –ö–æ—Ä–æ—Ç–∫–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞
            FVector ShortTraceEnd = TraceStartLocation + ForwardVector * (DetectionDistance * 0.5f);
            bool bShortHit = UKismetSystemLibrary::LineTraceSingle(
                GetWorld(),
                TraceStartLocation,
                ShortTraceEnd,
                UEngineTypes::ConvertToTraceType(ECC_WorldStatic),
                true,
                ActorsToIgnore,
                EDrawDebugTrace::ForOneFrame,
                HitResult,
                true
            );
            
            if (bShortHit && IsValidObstacle(HitResult))
            {
                if (GEngine)
                {
                    GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Green, 
                        FString::Printf(TEXT("Short trace found valid obstacle: %s"), 
                            *HitResult.GetActor()->GetName()));
                }
                bHit = true;
            }
            
            // 2. –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å –∑–µ–º–ª–∏
            if (!bHit)
            {
                FVector GroundTraceStart = CharacterLocation;
                FVector GroundTraceEnd = GroundTraceStart + ForwardVector * DetectionDistance;
                
                bool bGroundHit = UKismetSystemLibrary::LineTraceSingle(
                    GetWorld(),
                    GroundTraceStart,
                    GroundTraceEnd,
                    UEngineTypes::ConvertToTraceType(ECC_WorldStatic),
                    true,
                    ActorsToIgnore,
                    EDrawDebugTrace::ForOneFrame,
                    HitResult,
                    true
                );
                
                if (bGroundHit && IsValidObstacle(HitResult))
                {
                    if (GEngine)
                    {
                        GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Green, 
                            FString::Printf(TEXT("Ground trace found valid obstacle: %s"), 
                                *HitResult.GetActor()->GetName()));
                    }
                    bHit = true;
                }
            }
        }
        
        if (!bHit)
        {
            return Result;
        }
    }

    Result = AnalyzeObstacle(HitResult);
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Yellow, 
            FString::Printf(TEXT("Obstacle Analysis: Height=%.1f, Thickness=%.1f, CanClimb=%s"), 
                Result.ObstacleHeight, Result.ObstacleThickness, 
                Result.bCanClimb ? TEXT("YES") : TEXT("NO")));
    }
    
    return Result;
}

bool UObstacleClimbingComponent::IsValidObstacle(const FHitResult& HitResult) const
{
    if (!HitResult.GetActor())
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, TEXT("IsValidObstacle: No actor in hit result"));
        }
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–∂
    if (Cast<ACharacter>(HitResult.GetActor()))
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, 
                FString::Printf(TEXT("IsValidObstacle: Hit character %s"), *HitResult.GetActor()->GetName()));
        }
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (—Ä–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ, —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ –∏ –∫–∏–Ω–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã)
    USceneComponent* RootComp = HitResult.GetActor()->GetRootComponent();
    if (RootComp)
    {
        EComponentMobility::Type Mobility = RootComp->Mobility;
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Blue, 
                FString::Printf(TEXT("IsValidObstacle: Actor %s has mobility %d"), 
                    *HitResult.GetActor()->GetName(), (int32)Mobility));
        }
        
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∫—Ä–æ–º–µ Movable (–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è)
        if (Mobility == EComponentMobility::Movable)
        {
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, 
                    FString::Printf(TEXT("IsValidObstacle: Actor %s is movable (rejected)"), 
                        *HitResult.GetActor()->GetName()));
            }
            return false;
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –ø—Ä–∏–Ω—è—Ç
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Green, 
                FString::Printf(TEXT("IsValidObstacle: Actor %s mobility %d is acceptable"), 
                    *HitResult.GetActor()->GetName(), (int32)Mobility));
        }
    }

    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Green, 
            FString::Printf(TEXT("IsValidObstacle: Valid obstacle %s found!"), *HitResult.GetActor()->GetName()));
    }

    return true;
}

FObstacleInfo UObstacleClimbingComponent::AnalyzeObstacle(const FHitResult& HitResult) const
{
    FObstacleInfo Result;

    ACharacter* Character = Cast<ACharacter>(OwnerActor);
    if (!Character)
        return Result;

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
    FBox ObstacleBox = HitResult.GetActor()->GetComponentsBoundingBox();
    FVector ObstacleBounds = ObstacleBox.GetSize();
    FVector ObstacleCenter = ObstacleBox.GetCenter();
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¶–ï–ù–¢–† –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è, –∞ –Ω–µ —Ç–æ—á–∫—É —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è!
    // HitResult.Location - —ç—Ç–æ —Ç–æ—á–∫–∞ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —Å—Ç–µ–Ω–∫–µ, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    Result.ObstacleLocation = ObstacleCenter;
    
    Result.ObstacleSize = ObstacleBounds;
    Result.ObstacleHeight = ObstacleBounds.Z;
    Result.ObstacleThickness = FMath::Min(ObstacleBounds.X, ObstacleBounds.Y);
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Blue, 
            FString::Printf(TEXT("üì¶ OBSTACLE: Size(%.1f, %.1f, %.1f), Center(%.1f, %.1f, %.1f)"), 
                ObstacleBounds.X, ObstacleBounds.Y, ObstacleBounds.Z,
                ObstacleCenter.X, ObstacleCenter.Y, ObstacleCenter.Z));
        
        GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Orange, 
            FString::Printf(TEXT("üìç HIT vs CENTER: Hit(%.1f, %.1f) Center(%.1f, %.1f) Diff=%.1f cm"), 
                HitResult.Location.X, HitResult.Location.Y,
                ObstacleCenter.X, ObstacleCenter.Y,
                FVector::Dist(HitResult.Location, ObstacleCenter)));
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    float CharacterHeight = Character->GetCapsuleComponent()->GetScaledCapsuleHalfHeight() * 2.0f;
    float CharacterMaxClimbHeight = CharacterHeight + 50.0f; // –†–æ—Å—Ç + 50—Å–º

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
    if (Result.ObstacleHeight > CharacterMaxClimbHeight)
    {
        Result.bCanClimb = false;
        return Result;
    }

    Result.bCanClimb = true;
    Result.ClimbType = DetermineClimbType(Result);
    return Result;
}

EObstacleClimbType UObstacleClimbingComponent::DetermineClimbType(const FObstacleInfo& Obstacle) const
{
    ACharacter* Character = Cast<ACharacter>(OwnerActor);
    if (!Character)
        return EObstacleClimbType::None;

    float CharacterHeight = Character->GetCapsuleComponent()->GetScaledCapsuleHalfHeight() * 2.0f;
    float CharacterHeightThreshold = CharacterHeight * HeightThreshold; // 60% —Ä–æ—Å—Ç–∞
    float CharacterMaxClimbHeight = CharacterHeight + 50.0f; // –†–æ—Å—Ç + 50—Å–º

    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::White, 
            FString::Printf(TEXT("DetermineClimbType: Height=%.1f, Thickness=%.1f, CharHeight=%.1f, Threshold=%.1f, MaxHeight=%.1f"),
                Obstacle.ObstacleHeight, Obstacle.ObstacleThickness, CharacterHeight, CharacterHeightThreshold, CharacterMaxClimbHeight));
    }

    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    if (Obstacle.ObstacleThickness <= ThicknessThreshold)
    {
        // –¢–æ–Ω–∫–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
        if (Obstacle.ObstacleHeight <= CharacterHeightThreshold)
        {
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, TEXT("DetermineClimbType: Returning VAULT"));
            }
            return EObstacleClimbType::Vault; // –ü–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–Ω–∏–µ
        }
        else if (Obstacle.ObstacleHeight <= CharacterMaxClimbHeight)
        {
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, TEXT("DetermineClimbType: Returning CLIMBOVER"));
            }
            return EObstacleClimbType::ClimbOver; // –í–∑–±–∏—Ä–∞–Ω–∏–µ –∏ —Å–ø—É—Å–∫
        }
        else
        {
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("DetermineClimbType: Returning NONE (too high)"));
            }
            return EObstacleClimbType::None; // –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ
        }
    }
    else
    {
        // –¢–æ–ª—Å—Ç–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
        if (Obstacle.ObstacleHeight <= CharacterMaxClimbHeight)
        {
            return EObstacleClimbType::Climb; // –í–∑–±–∏—Ä–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
        }
        else
        {
            return EObstacleClimbType::None; // –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ
        }
    }

    return EObstacleClimbType::None;
}

void UObstacleClimbingComponent::StartClimbAnimation(const FObstacleInfo& Obstacle)
{
    ACharacter* Character = Cast<ACharacter>(OwnerActor);
    if (!Character)
        return;

    // –ó–ê–©–ò–¢–ê: –ï—Å–ª–∏ —É–∂–µ –ª–µ–∑–µ–º - –ù–ï –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ!
    if (bIsClimbing)
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Yellow, 
                TEXT("WARNING: Already climbing! Ignoring duplicate StartClimbAnimation call"));
        }
        return;
    }

    StartLocation = Character->GetActorLocation();
    StartRotation = Character->GetActorRotation(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ä–æ—Ç–∞—Ü–∏—é!
    ClimbProgress = 0.0f;

    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Blue, 
            FString::Printf(TEXT("üé¨ START: Pos=(%.1f, %.1f, %.1f), Yaw=%.1f"), 
                StartLocation.X, StartLocation.Y, StartLocation.Z, StartRotation.Yaw));
        
        GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Cyan, 
            FString::Printf(TEXT("üé¨ START: Pitch=%.1f, Roll=%.1f, ForwardVector=(%.2f, %.2f, %.2f)"), 
                StartRotation.Pitch, StartRotation.Roll,
                StartRotation.Vector().X, StartRotation.Vector().Y, StartRotation.Vector().Z));
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    Character->GetCharacterMovement()->SetMovementMode(MOVE_None);
    Character->GetCharacterMovement()->StopMovementImmediately();
    Character->GetCharacterMovement()->DisableMovement();
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—Ç–∞—Ü–∏–µ–π –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞!
    Character->bUseControllerRotationYaw = false;
    Character->bUseControllerRotationPitch = false;
    Character->bUseControllerRotationRoll = false;
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é!
    if (APlayerController* PC = Cast<APlayerController>(Character->GetController()))
    {
        PC->SetIgnoreMoveInput(true);
        PC->SetIgnoreLookInput(true);
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Red, 
                TEXT("üîí PLAYER INPUT DISABLED!"));
        }
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–û–õ–ù–û–°–¢–¨–Æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é Mesh!
    if (USkeletalMeshComponent* Mesh = Character->GetMesh())
    {
        Mesh->SetUsingAbsoluteLocation(false);
        Mesh->SetUsingAbsoluteRotation(false);
        
        // –†–ê–î–ò–ö–ê–õ–¨–ù–û: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        Mesh->bPauseAnims = true;
        Mesh->bNoSkeletonUpdate = true;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        Mesh->SetComponentTickEnabled(false);
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Red, 
                TEXT("üîí MESH ANIMATION PAUSED!"));
        }
    }
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Orange, 
            TEXT("üîí CONTROLLER ROTATION DISABLED!"));
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –∫–∞–ø—Å—É–ª—ã –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    UCapsuleComponent* Capsule = Character->GetCapsuleComponent();
    Capsule->SetCollisionEnabled(ECollisionEnabled::NoCollision);
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Orange, 
            FString::Printf(TEXT("COLLISION DISABLED! Enabled: %d"), 
                (int32)Capsule->GetCollisionEnabled()));
    }
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, 
            FString::Printf(TEXT("Movement disabled. Current mode: %d, Collision disabled"), 
                (int32)Character->GetCharacterMovement()->MovementMode));
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è
    switch (CurrentClimbType)
    {
    case EObstacleClimbType::Vault:
        // –ü–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–Ω–∏–µ - –ø–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –î–ê–õ–ï–ö–û –∑–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–µ–º–ª–∏
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º StartLocation + –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ * –ë–û–õ–¨–®–û–ï —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ!
        // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 400 —Å–º (4 –º–µ—Ç—Ä–∞) –¥–ª—è –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ì–û –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è!
        {
            float VaultDistance = 400.0f; // –ë—ã–ª–æ 200, —Ç–µ–ø–µ—Ä—å 400!
            FVector ForwardDir = StartRotation.Vector();
            TargetLocation = StartLocation + ForwardDir * VaultDistance;
            TargetLocation.Z = StartLocation.Z; // –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ —Ç–æ–π –∂–µ –≤—ã—Å–æ—Ç–µ
            
        if (GEngine)
        {
                GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Green, 
                    FString::Printf(TEXT("üéØ VAULT TARGET: From (%.1f, %.1f) to (%.1f, %.1f), Distance: %.1f cm"), 
                        StartLocation.X, StartLocation.Y,
                        TargetLocation.X, TargetLocation.Y,
                        VaultDistance));
            }
        }
        break;

    case EObstacleClimbType::Climb:
        // –í–∑–±–∏—Ä–∞–Ω–∏–µ - –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–∏
        TargetLocation = Obstacle.ObstacleLocation + FVector(0, 0, Obstacle.ObstacleHeight + 50.0f);
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Green, 
                FString::Printf(TEXT("Climb: Moving to top (%.1f, %.1f, %.1f)"), 
                    TargetLocation.X, TargetLocation.Y, TargetLocation.Z));
        }
        break;

    case EObstacleClimbType::ClimbOver:
        // –í–∑–±–∏—Ä–∞–Ω–∏–µ –∏ —Å–ø—É—Å–∫ - —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ—Ä—Ö, –ø–æ—Ç–æ–º –≤–Ω–∏–∑
        TargetLocation = Obstacle.ObstacleLocation + FVector(0, 0, Obstacle.ObstacleHeight + 50.0f);
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Green, 
                FString::Printf(TEXT("ClimbOver: Moving to top (%.1f, %.1f, %.1f)"), 
                    TargetLocation.X, TargetLocation.Y, TargetLocation.Z));
        }
        break;

    default:
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, TEXT("Climb Animation: Unknown climb type!"));
        }
        CancelClimb();
        return;
    }
}

void UObstacleClimbingComponent::UpdateClimbAnimation(float DeltaTime)
{
    ACharacter* Character = Cast<ACharacter>(OwnerActor);
    if (!Character)
    {
        CancelClimb();
        return;
    }

    switch (CurrentClimbType)
    {
    case EObstacleClimbType::Vault:
        PerformVaultAnimation(DeltaTime);
        break;

    case EObstacleClimbType::Climb:
        PerformClimbAnimation(DeltaTime);
        break;

    case EObstacleClimbType::ClimbOver:
        PerformClimbOverAnimation(DeltaTime);
        break;

    default:
        CancelClimb();
        break;
    }
}

void UObstacleClimbingComponent::PerformVaultAnimation(float DeltaTime)
{
    ACharacter* Character = Cast<ACharacter>(OwnerActor);
    if (!Character)
        return;

    float Speed = VaultSpeed;
    ClimbProgress += Speed * DeltaTime;

    if (ClimbProgress >= 1.0f)
    {
        ClimbProgress = 1.0f;
        CompleteClimb();
        return;
    }

    // –û—á–µ–Ω—å –ø–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å –∫—Ä–∞—Å–∏–≤–æ–π –¥—É–≥–æ–π
    float SmoothProgress = FMath::SmoothStep(0.0f, 1.0f, ClimbProgress);
    SmoothProgress = FMath::SmoothStep(0.0f, 1.0f, SmoothProgress); // –î–≤–æ–π–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
    FVector CurrentLocation = FMath::Lerp(StartLocation, TargetLocation, SmoothProgress);
    
    // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–∞—è –¥—É–≥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏–Ω—É—Å–∞
    float ArcProgress = FMath::Sin(SmoothProgress * PI);
    float ArcHeight = 60.0f * ArcProgress; // –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ –¥—É–≥–∏ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
    CurrentLocation.Z += ArcHeight;

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º TeleportTo –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –í–°–ï–ì–û –∞–∫—Ç–æ—Ä–∞!
    Character->TeleportTo(CurrentLocation, StartRotation, false, true);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Mesh –°–†–ê–ó–£ –ø–æ—Å–ª–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
    if (USkeletalMeshComponent* Mesh = Character->GetMesh())
    {
        Mesh->SetRelativeLocation(FVector::ZeroVector);
        Mesh->SetRelativeRotation(FRotator::ZeroRotator);
    }
    
    if (GEngine && ClimbProgress < 0.2f) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ
    {
        FRotator CurrentRot = Character->GetActorRotation();
        GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Yellow, 
            FString::Printf(TEXT("üéØ VAULT: Pos=(%.1f, %.1f, %.1f) Rot=%.1f"), 
                CurrentLocation.X, CurrentLocation.Y, CurrentLocation.Z, CurrentRot.Yaw));
    }
}

void UObstacleClimbingComponent::PerformClimbAnimation(float DeltaTime)
{
    ACharacter* Character = Cast<ACharacter>(OwnerActor);
    if (!Character)
        return;

    // –ü–ª–∞–≤–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    float Speed = ClimbSpeed;
    if (ClimbProgress > 0.8f)
    {
        // –ó–∞–º–µ–¥–ª—è–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20% –∞–Ω–∏–º–∞—Ü–∏–∏
        float SlowdownFactor = 1.0f - ((ClimbProgress - 0.8f) / 0.2f) * 0.7f; // –ó–∞–º–µ–¥–ª—è–µ–º –¥–æ 30% —Å–∫–æ—Ä–æ—Å—Ç–∏
        Speed *= SlowdownFactor;
    }
    ClimbProgress += Speed * DeltaTime;

    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 1.0f, FColor::Yellow, 
            FString::Printf(TEXT("Climb Progress: %.2f/1.0"), ClimbProgress));
    }

    if (ClimbProgress >= 1.0f)
    {
        ClimbProgress = 1.0f;
        CompleteClimb();
        return;
    }

    // –û—á–µ–Ω—å –ø–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π
    float SmoothProgress = FMath::SmoothStep(0.0f, 1.0f, ClimbProgress);
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –µ—â–µ –±–æ–ª—å—à–µ–π –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    SmoothProgress = FMath::SmoothStep(0.0f, 1.0f, SmoothProgress);
    FVector CurrentLocation = FMath::Lerp(StartLocation, TargetLocation, SmoothProgress);
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 1.0f, FColor::Cyan, 
            FString::Printf(TEXT("Moving to: (%.1f, %.1f, %.1f) Progress: %.2f"), 
                CurrentLocation.X, CurrentLocation.Y, CurrentLocation.Z, SmoothProgress));
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º TeleportTo!
    Character->TeleportTo(CurrentLocation, StartRotation, false, true);
    
    if (USkeletalMeshComponent* Mesh = Character->GetMesh())
    {
        Mesh->SetRelativeLocation(FVector::ZeroVector);
        Mesh->SetRelativeRotation(FRotator::ZeroRotator);
    }
}

void UObstacleClimbingComponent::PerformClimbOverAnimation(float DeltaTime)
{
    ACharacter* Character = Cast<ACharacter>(OwnerActor);
    if (!Character)
        return;

    float Speed = ClimbSpeed;
    ClimbProgress += Speed * DeltaTime;

    if (ClimbProgress >= 1.0f)
    {
        ClimbProgress = 1.0f;
        CompleteClimb();
        return;
    }

    // –û—á–µ–Ω—å –ø–ª–∞–≤–Ω–∞—è –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è: –≤–≤–µ—Ä—Ö, –ø–æ—Ç–æ–º –≤–Ω–∏–∑
    FVector CurrentLocation;
    float SmoothProgress = FMath::SmoothStep(0.0f, 1.0f, ClimbProgress);
    SmoothProgress = FMath::SmoothStep(0.0f, 1.0f, SmoothProgress); // –î–≤–æ–π–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
    
    if (ClimbProgress <= 0.5f)
    {
        // –§–∞–∑–∞ 1: –ü–ª–∞–≤–Ω–æ–µ –≤–∑–±–∏—Ä–∞–Ω–∏–µ –≤–≤–µ—Ä—Ö
        float PhaseProgress = ClimbProgress * 2.0f;
        float SmoothPhaseProgress = FMath::SmoothStep(0.0f, 1.0f, PhaseProgress);
        CurrentLocation = FMath::Lerp(StartLocation, TargetLocation, SmoothPhaseProgress);
    }
    else
    {
        // –§–∞–∑–∞ 2: –ü–ª–∞–≤–Ω—ã–π —Å–ø—É—Å–∫ –≤–Ω–∏–∑
        float PhaseProgress = (ClimbProgress - 0.5f) * 2.0f;
        float SmoothPhaseProgress = FMath::SmoothStep(0.0f, 1.0f, PhaseProgress);
        FVector TopLocation = TargetLocation;
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º StartLocation –∫–∞–∫ –±–∞–∑—É, –Ω–µ Obstacle.ObstacleLocation!
        // –£–í–ï–õ–ò–ß–ï–ù–û –¥–æ 400 —Å–º (4 –º–µ—Ç—Ä–∞) –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
        FVector ForwardDirection = StartRotation.Vector();
        FVector FinalLocation = StartLocation + ForwardDirection * 400.0f;
        FinalLocation.Z = StartLocation.Z;
        CurrentLocation = FMath::Lerp(TopLocation, FinalLocation, SmoothPhaseProgress);
    }

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º TeleportTo!
    Character->TeleportTo(CurrentLocation, StartRotation, false, true);
    
    if (USkeletalMeshComponent* Mesh = Character->GetMesh())
    {
        Mesh->SetRelativeLocation(FVector::ZeroVector);
        Mesh->SetRelativeRotation(FRotator::ZeroRotator);
    }
}

void UObstacleClimbingComponent::CompleteClimb()
{
    ACharacter* Character = Cast<ACharacter>(OwnerActor);
    if (Character)
    {
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –î–ê–õ–ï–ö–û –æ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ë–ï–ó–û–ü–ê–°–ù–£–Æ –ø–æ–∑–∏—Ü–∏—é - –û–ß–ï–ù–¨ –î–ê–õ–ï–ö–û –≤–ø–µ—Ä–µ–¥!
        FVector SafeLocation = Character->GetActorLocation();
        
        // –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (StartRotation)!
        FVector ForwardDirection = StartRotation.Vector();
        
        // –ê–ì–†–ï–°–°–ò–í–ù–û —Å–¥–≤–∏–≥–∞–µ–º –≤–ø–µ—Ä–µ–¥ –Ω–∞ 150 —Å–º –¥–ª—è –ì–ê–†–ê–ù–¢–ò–ò (–±—ã–ª–æ 80, —Ç–µ–ø–µ—Ä—å 150!)
        SafeLocation += ForwardDirection * 150.0f;
        
        // –¢–ê–ö–ñ–ï –ø–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞ 30 —Å–º –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–µ –∑–∞—Å—Ç—Ä—è—Ç—å (–±—ã–ª–æ 20, —Ç–µ–ø–µ—Ä—å 30!)
        SafeLocation.Z += 30.0f;
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É (–∫–æ–ª–ª–∏–∑–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞) –ò –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ—Ç–∞—Ü–∏—é!
        Character->TeleportTo(SafeLocation, StartRotation, false, true);
        
        FRotator AfterRotation = Character->GetActorRotation();
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Magenta, 
                FString::Printf(TEXT("üîÑ COMPLETE: After=%.1f, Target=%.1f"), 
                    AfterRotation.Yaw, StartRotation.Yaw));
        }
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Mesh —Å –∫–∞–ø—Å—É–ª–æ–π!
        if (USkeletalMeshComponent* Mesh = Character->GetMesh())
        {
            Mesh->SetRelativeLocation(FVector::ZeroVector);
            Mesh->SetRelativeRotation(FRotator::ZeroRotator);
            Mesh->UpdateComponentToWorld();
            
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Yellow, 
                    TEXT("üîß Mesh synchronized with capsule!"));
            }
        }
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Orange, 
                FString::Printf(TEXT("Safe position: (%.1f, %.1f, %.1f)"), 
                    SafeLocation.X, SafeLocation.Y, SafeLocation.Z));
        }
        
        // –¢–ï–ü–ï–†–¨ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–µ–º–ª—é –∏–∑ –ë–ï–ó–û–ü–ê–°–ù–û–ô –ø–æ–∑–∏—Ü–∏–∏
        FHitResult HitResult;
        FVector StartTrace = SafeLocation;
        FVector EndTrace = StartTrace - FVector(0, 0, 300.0f); // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 300 —Å–º
        
        FVector FinalLocation = SafeLocation;
        if (GetWorld()->LineTraceSingleByChannel(HitResult, StartTrace, EndTrace, ECC_Visibility))
        {
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –∑–µ–º–ª–µ
            FinalLocation = HitResult.Location + FVector(0, 0, Character->GetCapsuleComponent()->GetScaledCapsuleHalfHeight());
        }
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –∑–µ–º–ª—é –ò –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –†–û–¢–ê–¶–ò–Æ!
        Character->TeleportTo(FinalLocation, StartRotation, false, true);
        
        FRotator GroundAfterRotation = Character->GetActorRotation();
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Orange, 
                FString::Printf(TEXT("üåç GROUND: After=%.1f, Target=%.1f"), 
                    GroundAfterRotation.Yaw, StartRotation.Yaw));
        }
        
        // –°–Ω–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Mesh –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        if (USkeletalMeshComponent* Mesh = Character->GetMesh())
        {
            Mesh->SetRelativeLocation(FVector::ZeroVector);
            Mesh->SetRelativeRotation(FRotator::ZeroRotator);
            Mesh->UpdateComponentToWorld();
            
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Cyan, 
                    TEXT("üîß Mesh synchronized AGAIN after ground placement!"));
            }
        }
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Magenta, 
                FString::Printf(TEXT("Moved to ground: (%.1f, %.1f, %.1f)"), 
                    FinalLocation.X, FinalLocation.Y, FinalLocation.Z));
        }
        
        // –ù–ï –≤–∫–ª—é—á–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å—Ä–∞–∑—É! –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 0.5 —Å–µ–∫—É–Ω–¥—ã
        bWaitingForCollisionRestore = true;
        CollisionRestoreTimer = 0.0f;
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Yellow, 
                TEXT("‚è±Ô∏è Collision restore delayed for 0.5 seconds..."));
        }
        
        // –ü–ª–∞–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        Character->GetCharacterMovement()->StopMovementImmediately();
        Character->GetCharacterMovement()->Velocity = FVector::ZeroVector;
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ö–æ–¥—å–±—ã - –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ø–æ–¥—Ö–æ–¥
        UCharacterMovementComponent* MovementComp = Character->GetCharacterMovement();
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        MovementComp->StopMovementImmediately();
        MovementComp->Velocity = FVector::ZeroVector;
        MovementComp->bForceMaxAccel = false;
        
        // –í–∫–ª—é—á–∞–µ–º —Ñ–∏–∑–∏–∫—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        MovementComp->SetComponentTickEnabled(true);
        MovementComp->SetUpdatedComponent(Character->GetRootComponent());
        
        // –¢–ï–ü–ï–†–¨ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ö–æ–¥—å–±—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï –º–µ—Ç–æ–¥—ã –ø–æ–¥—Ä—è–¥!
        MovementComp->SetMovementMode(MOVE_Walking);
        MovementComp->SetDefaultMovementMode();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–æ
        MovementComp->MovementMode = MOVE_Walking;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        MovementComp->UpdateComponentVelocity();
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –∑–µ–º–ª—é
        FFindFloorResult FloorResult;
        MovementComp->FindFloor(Character->GetActorLocation(), FloorResult, false);
        
        if (FloorResult.IsWalkableFloor())
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É (–ø–æ–ª) –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            MovementComp->SetBase(FloorResult.HitResult.GetComponent(), FloorResult.HitResult.BoneName);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–∞
            MovementComp->CurrentFloor = FloorResult;
            MovementComp->bForceNextFloorCheck = false;
            
            // –¢–ï–ü–ï–†–¨ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ö–æ–¥—å–±—ã
            MovementComp->SetMovementMode(MOVE_Walking);
            
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Cyan, 
                    TEXT("üéØ FLOOR SET! Character grounded on walkable surface!"));
            }
        }
        else
        {
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Red, 
                    TEXT("‚ö†Ô∏è WARNING: No walkable floor found!"));
            }
        }
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Green, 
                FString::Printf(TEXT("‚úÖ MOVEMENT RESTORED! Mode: %d (3=Walking), Ground: %s, Velocity: %.1f"), 
                    (int32)Character->GetCharacterMovement()->MovementMode,
                    Character->GetCharacterMovement()->IsMovingOnGround() ? TEXT("YES") : TEXT("NO"),
                    Character->GetCharacterMovement()->Velocity.Size()));
        }
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Yellow, 
                FString::Printf(TEXT("üéØ CLIMB COMPLETE! Position: (%.1f, %.1f, %.1f)"), 
                    Character->GetActorLocation().X, Character->GetActorLocation().Y, Character->GetActorLocation().Z));
        }
    }

    bIsClimbing = false;
    // Don't reset CurrentClimbType immediately - let animation finish
    // It will be reset when starting next climb
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—Ç–∞—Ü–∏–µ–π –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞!
    if (Character)
    {
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–∫–ª—é—á–∞–µ–º –≤–≤–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ –°–ù–ê–ß–ê–õ–ê!
        if (APlayerController* PC = Cast<APlayerController>(Character->GetController()))
        {
            PC->ResetIgnoreMoveInput();
            PC->ResetIgnoreLookInput();
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–æ—Ç–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –∫–∞–º–µ—Ä–æ–π!
            // –ö–∞–º–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è –ª–∞–∑–∞–Ω–∏—è –º–æ–≥–ª–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ StartRotation
            FRotator ControllerRotation = PC->GetControlRotation();
            FRotator NewCharacterRotation = FRotator(0.0f, ControllerRotation.Yaw, 0.0f); // –¢–æ–ª—å–∫–æ Yaw
            Character->SetActorRotation(NewCharacterRotation);
            
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Magenta, 
                    FString::Printf(TEXT("üîÑ ROTATION SYNCED: Character %.1f -> Controller %.1f"), 
                        StartRotation.Yaw, ControllerRotation.Yaw));
            }
            
            // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω
            if (PC->IsMoveInputIgnored() || PC->IsLookInputIgnored())
            {
                if (GEngine)
                {
                    GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Red, 
                        FString::Printf(TEXT("‚ö†Ô∏è INPUT STILL BLOCKED! Move=%d, Look=%d"), 
                            PC->IsMoveInputIgnored(), PC->IsLookInputIgnored()));
                }
            }
            else
            {
                if (GEngine)
                {
                    GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Green, 
                        TEXT("üîì PLAYER INPUT RESTORED!"));
                }
            }
        }
        
        // –¢–ï–ü–ï–†–¨ –≤–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—Ç–∞—Ü–∏–µ–π –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        Character->bUseControllerRotationYaw = true; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è FPS
        Character->bUseControllerRotationPitch = false;
        Character->bUseControllerRotationRoll = false;
        
        // –í–∫–ª—é—á–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ - –ê–ì–†–ï–°–°–ò–í–ù–û!
        UCharacterMovementComponent* MovementComp = Character->GetCharacterMovement();
        MovementComp->SetMovementMode(MOVE_Walking);
        MovementComp->SetComponentTickEnabled(true);
        MovementComp->SetActive(true);
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Cyan, 
                FString::Printf(TEXT("üîì MOVEMENT: Mode=%d, Tick=%d"), 
                    (int32)MovementComp->MovementMode, MovementComp->IsComponentTickEnabled()));
        }
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é Mesh –æ–±—Ä–∞—Ç–Ω–æ!
        if (USkeletalMeshComponent* Mesh = Character->GetMesh())
        {
            Mesh->bPauseAnims = false;
            Mesh->bNoSkeletonUpdate = false;
            Mesh->SetComponentTickEnabled(true);
            
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Green, 
                    TEXT("üîì MESH ANIMATION RESTORED!"));
            }
        }
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Green, 
                TEXT("üîì CONTROLLER ROTATION RESTORED!"));
        }
    }
    
    OnClimbCompleted.Broadcast();
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
            FString::Printf(TEXT("CompleteClimb: bIsClimbing=false, CurrentClimbType still=%d"), (int32)CurrentClimbType));
    }
}

void UObstacleClimbingComponent::CancelClimb()
{
    ACharacter* Character = Cast<ACharacter>(OwnerActor);
    if (Character)
    {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –∫–∞–ø—Å—É–ª—ã
        Character->GetCapsuleComponent()->SetCollisionEnabled(ECollisionEnabled::QueryAndPhysics);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        Character->GetCharacterMovement()->SetMovementMode(MOVE_Walking);
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, TEXT("Obstacle Climbing: Cancelled!"));
        }
    }

    bIsClimbing = false;
    CurrentClimbType = EObstacleClimbType::None;
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—Ç–∞—Ü–∏–µ–π –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ!
    if (Character)
    {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–≤–æ–¥ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–æ—Ç–∞—Ü–∏—é –°–ù–ê–ß–ê–õ–ê!
        if (APlayerController* PC = Cast<APlayerController>(Character->GetController()))
        {
            PC->ResetIgnoreMoveInput();
            PC->ResetIgnoreLookInput();
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–æ—Ç–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –∫–∞–º–µ—Ä–æ–π –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–æ–∂–µ!
            FRotator ControllerRotation = PC->GetControlRotation();
            FRotator NewCharacterRotation = FRotator(0.0f, ControllerRotation.Yaw, 0.0f);
            Character->SetActorRotation(NewCharacterRotation);
        }
        
        // –¢–ï–ü–ï–†–¨ –≤–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—Ç–∞—Ü–∏–µ–π –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        Character->bUseControllerRotationYaw = true;
        Character->bUseControllerRotationPitch = false;
        Character->bUseControllerRotationRoll = false;
        
        // –í–∫–ª—é—á–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
        UCharacterMovementComponent* MovementComp = Character->GetCharacterMovement();
        MovementComp->SetMovementMode(MOVE_Walking);
        MovementComp->SetComponentTickEnabled(true);
        MovementComp->SetActive(true);
        
        // –í–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é Mesh –æ–±—Ä–∞—Ç–Ω–æ
        if (USkeletalMeshComponent* Mesh = Character->GetMesh())
        {
            Mesh->bPauseAnims = false;
            Mesh->bNoSkeletonUpdate = false;
            Mesh->SetComponentTickEnabled(true);
        }
    }
    
    OnClimbFailed.Broadcast();
}
