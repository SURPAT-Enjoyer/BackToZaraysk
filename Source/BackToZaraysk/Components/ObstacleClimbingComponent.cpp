// Fill out your copyright notice in the Description page of Project Settings.

#include "ObstacleClimbingComponent.h"
#include "GameFramework/Character.h"
#include "GameFramework/CharacterMovementComponent.h"
#include "GameFramework/PlayerController.h"
#include "Components/CapsuleComponent.h"
#include "Kismet/KismetMathLibrary.h"
#include "DrawDebugHelpers.h"

UObstacleClimbingComponent::UObstacleClimbingComponent()
{
    PrimaryComponentTick.bCanEverTick = true;
}

void UObstacleClimbingComponent::BeginPlay()
{
    Super::BeginPlay();
    OwnerActor = GetOwner();
}

void UObstacleClimbingComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)
{
    Super::TickComponent(DeltaTime, TickType, ThisTickFunction);

    if (bIsClimbing)
    {
		UpdateClimbing(DeltaTime);
	}
	else
	{
		// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
		// –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å UI-–ø–æ–¥—Å–∫–∞–∑–∫—É –∏–≥—Ä–æ–∫—É –î–û –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
		FObstacleData DetectedObstacle = DetectObstacle();
		
		if (DetectedObstacle.IsValid())
		{
			bObstacleDetected = true;
			DetectedObstacleType = DetectedObstacle.Type;
			
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏
			CurrentObstacle = DetectedObstacle;
    }
    else
    {
			bObstacleDetected = false;
			DetectedObstacleType = EObstacleType::None;
		}
	}
}

// ============================================================================
// –ü–£–ë–õ–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

bool UObstacleClimbingComponent::TryClimb()
{
	// –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –ª–µ–∑–µ–º?
    if (bIsClimbing)
    {
        return false;
    }

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∏–∑ Tick
	if (!bObstacleDetected || !CurrentObstacle.IsValid())
    {
        if (GEngine)
        {
			GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, 
				TEXT("‚ùå –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"));
        }
        return false;
    }

	// –ù–∞—á–∏–Ω–∞–µ–º –ª–∞–∑–∞–Ω–∏–µ —Å —É–∂–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ–º
	StartClimbing(CurrentObstacle);
    return true;
}

// ============================================================================
// –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ü–†–ï–ü–Ø–¢–°–¢–í–ò–ô
// ============================================================================

FObstacleData UObstacleClimbingComponent::DetectObstacle()
{
	FObstacleData Result;

    ACharacter* Character = Cast<ACharacter>(OwnerActor);
    if (!Character)
	{
    if (GEngine)
    {
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
				TEXT("‚ùå DetectObstacle: Character is NULL"));
		}
		return Result;
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
	UCapsuleComponent* Capsule = Character->GetCapsuleComponent();
	float CapsuleRadius = Capsule->GetScaledCapsuleRadius();
	float CapsuleHalfHeight = Capsule->GetScaledCapsuleHalfHeight();
	
	FVector CharacterLocation = Character->GetActorLocation();
	FVector ForwardVector = Character->GetActorForwardVector();

	// Debug-—Å–æ–æ–±—â–µ–Ω–∏—è —É–±—Ä–∞–Ω—ã, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä

	// –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤–ø–µ—Ä–µ–¥ –Ω–∞ 20 —Å–º –æ—Ç –Ω–∏–∑–∞ –∫–∞–ø—Å—É–ª—ã
	// CharacterLocation –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞–ø—Å—É–ª—ã, –ø–æ—ç—Ç–æ–º—É –≤—ã—á–∏—Ç–∞–µ–º CapsuleHalfHeight –∏ –¥–æ–±–∞–≤–ª—è–µ–º 20 —Å–º
	float TraceHeight = -CapsuleHalfHeight + 20.0f;
	FVector TraceStart = CharacterLocation + FVector(0, 0, TraceHeight);
	FVector TraceEnd = TraceStart + ForwardVector * DetectionDistance;

	// –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞

    FHitResult HitResult;
	FCollisionQueryParams QueryParams;
	QueryParams.AddIgnoredActor(Character);

	// –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º debug-—Ä–∏—Å–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
	DrawDebugLine(GetWorld(), TraceStart, TraceEnd, FColor::Red, false, 3.0f, 0, 3.0f);

	// –ü–µ—Ä–≤–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –≤–ø–µ—Ä–µ–¥–∏?
	bool bHit = GetWorld()->LineTraceSingleByChannel(
		HitResult, TraceStart, TraceEnd, 
		ECC_Visibility, QueryParams
	);

	// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

	if (!bHit)
	{
		return Result; // –ù–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
	FVector ObstacleHitPoint = HitResult.Location;
	FVector ObstacleNormal = HitResult.Normal;

	// –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –Ω–∞–π–¥–µ–Ω–æ

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ—Ç—É –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è: —Ç—Ä–∞—Å—Å–∏—Ä—É–µ–º –≤–≤–µ—Ä—Ö –æ—Ç —Ç–æ—á–∫–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
	FVector TopTraceStart = ObstacleHitPoint + FVector(0, 0, 10.0f);
	FVector TopTraceEnd = TopTraceStart + FVector(0, 0, 300.0f);

	FHitResult TopHitResult;
	bool bTopHit = GetWorld()->LineTraceSingleByChannel(
		TopHitResult, TopTraceEnd, TopTraceStart, 
		ECC_Visibility, QueryParams
	);

	if (!bTopHit)
	{
		return Result; // –ù–µ –Ω–∞—à–ª–∏ –≤–µ—Ä—Ö –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
	}

	FVector ObstacleTopPoint = TopHitResult.Location;
	
	// –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã—Å–æ—Ç–∞ = —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–∏–∑–∞ –∫–∞–ø—Å—É–ª—ã –¥–æ –≤–µ—Ä—Ö–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
	// –≠—Ç–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ, —á–µ–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
	float CapsuleBottomZ = CharacterLocation.Z - CapsuleHalfHeight;
	float ObstacleHeight = ObstacleTopPoint.Z - CapsuleBottomZ;

	// –í—ã—Å–æ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–æ—á–Ω–æ –æ—Ç –Ω–∏–∑–∞ –∫–∞–ø—Å—É–ª—ã

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
	if (ObstacleHeight < MinObstacleHeight)
	{
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Orange, 
				TEXT("‚ö†Ô∏è –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ"));
		}
		return Result;
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
	if (ObstacleHeight > MaxClimbHeight)
	{
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, 
				FString::Printf(TEXT("‚ùå –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ: %.1f —Å–º (–º–∞–∫—Å. %.1f —Å–º)"), 
					ObstacleHeight, MaxClimbHeight));
		}
		return Result;
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ª—â–∏–Ω—É –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è: —Ç—Ä–∞—Å—Å–∏—Ä—É–µ–º –≤–ø–µ—Ä–µ–¥ –æ—Ç –≤–µ—Ä—Ö–Ω–µ–π —Ç–æ—á–∫–∏
	FVector ThicknessTraceStart = ObstacleTopPoint + FVector(0, 0, 10.0f);
	FVector ThicknessTraceEnd = ThicknessTraceStart + ForwardVector * (DetectionDistance * 2.0f);

	FHitResult ThicknessHitResult;
	bool bThicknessHit = GetWorld()->LineTraceSingleByChannel(
		ThicknessHitResult, ThicknessTraceStart, ThicknessTraceEnd, 
		ECC_Visibility, QueryParams
	);

	float ObstacleThickness = 50.0f; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if (bThicknessHit)
	{
		ObstacleThickness = FVector::Dist(ObstacleHitPoint, ThicknessHitResult.Location);
	}

	// –¢–æ–ª—â–∏–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ç–æ–ª—â–∏–Ω—É
	if (ObstacleThickness > MaxObstacleThickness)
                {
                    if (GEngine)
                    {
			GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Orange, 
				TEXT("‚ö†Ô∏è –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ —Å–ª–∏—à–∫–æ–º —Ç–æ–ª—Å—Ç–æ–µ"));
		}
            return Result;
	}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	Result.Type = DetermineObstacleType(ObstacleHeight, ObstacleThickness);
	Result.ObstacleTop = ObstacleTopPoint;
	Result.ObstacleForward = ForwardVector;
	Result.Height = ObstacleHeight;
	Result.Thickness = ObstacleThickness;

	// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	DrawDebugSphere(GetWorld(), ObstacleTopPoint, 20.0f, 12, FColor::Green, false, 3.0f);
	DrawDebugLine(GetWorld(), TraceStart, ObstacleHitPoint, FColor::Yellow, false, 3.0f, 0, 2.0f);
	DrawDebugLine(GetWorld(), TopTraceEnd, ObstacleTopPoint, FColor::Cyan, false, 3.0f, 0, 2.0f);
    
    return Result;
}

EObstacleType UObstacleClimbingComponent::DetermineObstacleType(float Height, float Thickness)
{
	if (Height <= VaultMaxHeight)
    {
        if (GEngine)
        {
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
				TEXT("‚úÖ –¢–∏–ø: VAULT (–ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–Ω–∏–µ)"));
        }
		return EObstacleType::Vault;
    }
	else if (Height <= MantleMaxHeight)
    {
        if (GEngine)
        {
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Blue, 
				TEXT("‚úÖ –¢–∏–ø: MANTLE (–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ)"));
		}
		return EObstacleType::Mantle;
	}
	else
        {
            if (GEngine)
            {
			GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Purple, 
				TEXT("‚úÖ –¢–∏–ø: CLIMB (–ª–∞–∑–∞–Ω–∏–µ)"));
		}
		return EObstacleType::Climb;
	}
}

// ============================================================================
// –í–´–ü–û–õ–ù–ï–ù–ò–ï –õ–ê–ó–ê–ù–ò–Ø
// ============================================================================

void UObstacleClimbingComponent::StartClimbing(const FObstacleData& Obstacle)
{
	ACharacter* Character = Cast<ACharacter>(OwnerActor);
	if (!Character) return;

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	CurrentObstacle = Obstacle;
	CurrentObstacleType = Obstacle.Type;
	bIsClimbing = true;
	AnimationProgress = 0.0f;

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–æ—Ç–∞—Ü–∏—é
	StartLocation = Character->GetActorLocation();
	StartRotation = Character->GetActorRotation();

	// –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
	CalculateTargetTransform(Obstacle);

	// –ë–ª–æ–∫–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
	DisablePlayerControl();

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –Ω–∞—á–∞–ª–µ –ª–∞–∑–∞–Ω–∏—è
	OnClimbStarted.Broadcast(CurrentObstacleType);
    
    if (GEngine)
    {
		GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Green, 
			FString::Printf(TEXT("üé¨ –°–¢–ê–†–¢ –õ–ê–ó–ê–ù–ò–Ø: %s"), 
				CurrentObstacleType == EObstacleType::Vault ? TEXT("VAULT") :
				CurrentObstacleType == EObstacleType::Mantle ? TEXT("MANTLE") : TEXT("CLIMB")));
	}
}

void UObstacleClimbingComponent::UpdateClimbing(float DeltaTime)
{
	ACharacter* Character = Cast<ACharacter>(OwnerActor);
	if (!Character) return;

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
	float Duration = VaultDuration;
	switch (CurrentObstacleType)
	{
		case EObstacleType::Vault:  Duration = VaultDuration;  break;
		case EObstacleType::Mantle: Duration = MantleDuration; break;
		case EObstacleType::Climb:  Duration = ClimbDuration;  break;
		default: break;
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
	AnimationProgress += DeltaTime / Duration;

	if (AnimationProgress >= 1.0f)
	{
		// –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
		CompleteClimbing();
		return;
	}

	// –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ä–æ—Ç–∞—Ü–∏–∏
	FVector NewLocation = GetInterpolatedLocation(AnimationProgress);
	FRotator NewRotation = GetInterpolatedRotation(AnimationProgress);

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
	Character->SetActorLocationAndRotation(NewLocation, NewRotation, false, nullptr, ETeleportType::TeleportPhysics);

	// Debug
	static float DebugTimer = 0.0f;
	DebugTimer += DeltaTime;
	if (DebugTimer >= 0.5f)
	{
		DebugTimer = 0.0f;
		if (GEngine)
		{
			GEngine->AddOnScreenDebugMessage(-1, 0.5f, FColor::Cyan, 
				FString::Printf(TEXT("üé¨ –ü—Ä–æ–≥—Ä–µ—Å—Å: %.0f%% | Yaw: %.1f¬∞"), 
					AnimationProgress * 100.0f, NewRotation.Yaw));
		}
	}
}

void UObstacleClimbingComponent::CompleteClimbing()
{
    ACharacter* Character = Cast<ACharacter>(OwnerActor);
	if (!Character) return;

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
	Character->SetActorLocationAndRotation(TargetLocation, TargetRotation, false, nullptr, ETeleportType::TeleportPhysics);

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
	EnablePlayerControl();

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	bIsClimbing = false;
	CurrentObstacleType = EObstacleType::None;
	AnimationProgress = 0.0f;

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
	OnClimbCompleted.Broadcast();
    
    if (GEngine)
    {
		GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
			TEXT("‚úÖ –õ–ê–ó–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û"));
	}
}

void UObstacleClimbingComponent::CancelClimbing()
{
	ACharacter* Character = Cast<ACharacter>(OwnerActor);
	if (!Character) return;

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
	EnablePlayerControl();

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	bIsClimbing = false;
	CurrentObstacleType = EObstacleType::None;
	AnimationProgress = 0.0f;

        if (GEngine)
        {
		GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Orange, 
			TEXT("‚ö†Ô∏è –õ–ê–ó–ê–ù–ò–ï –û–¢–ú–ï–ù–ï–ù–û"));
	}
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

void UObstacleClimbingComponent::CalculateTargetTransform(const FObstacleData& Obstacle)
{
    ACharacter* Character = Cast<ACharacter>(OwnerActor);
	if (!Character) return;

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–ø—Å—É–ª—ã
	UCapsuleComponent* Capsule = Character->GetCapsuleComponent();
	float CapsuleHalfHeight = Capsule->GetScaledCapsuleHalfHeight();

	// –¶–µ–ª–µ–≤–∞—è —Ä–æ—Ç–∞—Ü–∏—è - –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
	FVector ForwardDir = Obstacle.ObstacleForward;
	TargetRotation = ForwardDir.Rotation();

	// –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
	FVector BaseTargetLocation = Obstacle.ObstacleTop;

	switch (Obstacle.Type)
	{
		case EObstacleType::Vault:
			// Vault: –ø—Ä–∏–∑–µ–º–ª—è–µ–º—Å—è –∑–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ–º, –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–µ–º–ª–∏
			TargetLocation = BaseTargetLocation + ForwardDir * (Obstacle.Thickness + 80.0f);
			TargetLocation.Z = StartLocation.Z;
        break;

		case EObstacleType::Mantle:
			// Mantle: –≤—Å—Ç–∞–µ–º –Ω–∞ –≤–µ—Ä—Ö –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
			TargetLocation = BaseTargetLocation + ForwardDir * 50.0f;
			TargetLocation.Z = BaseTargetLocation.Z + CapsuleHalfHeight;
        break;

		case EObstacleType::Climb:
			// Climb: –≤—Å—Ç–∞–µ–º –Ω–∞ –≤–µ—Ä—Ö –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
			TargetLocation = BaseTargetLocation + ForwardDir * 60.0f;
			TargetLocation.Z = BaseTargetLocation.Z + CapsuleHalfHeight;
        break;

    default:
			TargetLocation = StartLocation;
        break;
	}

	if (GEngine)
	{
		GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Magenta, 
			FString::Printf(TEXT("üéØ –¶–µ–ª—å: (%.1f, %.1f, %.1f)"), 
				TargetLocation.X, TargetLocation.Y, TargetLocation.Z));
	}

	// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
	DrawDebugSphere(GetWorld(), TargetLocation, 30.0f, 12, FColor::Red, false, 5.0f);
	DrawDebugLine(GetWorld(), StartLocation, TargetLocation, FColor::Green, false, 5.0f, 0, 3.0f);
}

void UObstacleClimbingComponent::DisablePlayerControl()
{
    ACharacter* Character = Cast<ACharacter>(OwnerActor);
	if (!Character) return;

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
	UCharacterMovementComponent* MovementComp = Character->GetCharacterMovement();
	if (MovementComp)
	{
		MovementComp->DisableMovement();
		MovementComp->StopMovementImmediately();
	}

	// –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥
	APlayerController* PC = Cast<APlayerController>(Character->GetController());
	if (PC)
	{
		PC->SetIgnoreMoveInput(true);
		PC->SetIgnoreLookInput(true);
	}

	// –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–ª–ª–∏–∑–∏—é –∫–∞–ø—Å—É–ª—ã –≤—Ä–µ–º–µ–Ω–Ω–æ
	UCapsuleComponent* Capsule = Character->GetCapsuleComponent();
	if (Capsule)
	{
		Capsule->SetCollisionEnabled(ECollisionEnabled::NoCollision);
	}
    
    if (GEngine)
    {
		GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
			TEXT("üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"));
    }
}

void UObstacleClimbingComponent::EnablePlayerControl()
{
    ACharacter* Character = Cast<ACharacter>(OwnerActor);
	if (!Character) return;

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
	UCharacterMovementComponent* MovementComp = Character->GetCharacterMovement();
	if (MovementComp)
	{
		MovementComp->SetMovementMode(MOVE_Walking);
	}

	// –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥
	APlayerController* PC = Cast<APlayerController>(Character->GetController());
	if (PC)
	{
		PC->ResetIgnoreMoveInput();
		PC->ResetIgnoreLookInput();
	}

	// –í–∫–ª—é—á–∞–µ–º –∫–æ–ª–ª–∏–∑–∏—é –æ–±—Ä–∞—Ç–Ω–æ
	UCapsuleComponent* Capsule = Character->GetCapsuleComponent();
	if (Capsule)
	{
		Capsule->SetCollisionEnabled(ECollisionEnabled::QueryAndPhysics);
        }
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
			TEXT("üîì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"));
	}
}

FVector UObstacleClimbingComponent::GetInterpolatedLocation(float Progress) const
{
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–ª–∞–∂–µ–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
	float SmoothProgress = FMath::SmoothStep(0.0f, 1.0f, Progress);
	
	// –î–ª—è Vault –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫—É—é –¥—É–≥—É –ø–æ –≤—ã—Å–æ—Ç–µ
	FVector Result = FMath::Lerp(StartLocation, TargetLocation, SmoothProgress);
	
	if (CurrentObstacleType == EObstacleType::Vault)
	{
		// –î–æ–±–∞–≤–ª—è–µ–º –¥—É–≥—É –≤—ã—Å–æ—Ç—ã –¥–ª—è –ø—Ä—ã–∂–∫–∞
		float ArcHeight = CurrentObstacle.Height * 0.5f + 50.0f;
		float ArcProgress = FMath::Sin(Progress * PI);
		Result.Z += ArcHeight * ArcProgress;
	}
	
	return Result;
}

FRotator UObstacleClimbingComponent::GetInterpolatedRotation(float Progress) const
{
	// –ü–ª–∞–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Ä–æ—Ç–∞—Ü–∏–∏
	float SmoothProgress = FMath::SmoothStep(0.0f, 1.0f, Progress);
	return FMath::Lerp(StartRotation, TargetRotation, SmoothProgress);
}
