#include "EquipmentComponent.h"
#include "BackToZaraysk/Inventory/EquippableItemData.h"
#include "Components/SkeletalMeshComponent.h"
#include "GameFramework/Character.h"

UEquipmentComponent::UEquipmentComponent()
{
    PrimaryComponentTick.bCanEverTick = false;
}

void UEquipmentComponent::BeginPlay()
{
    Super::BeginPlay();
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—à –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if (ACharacter* Character = Cast<ACharacter>(GetOwner()))
    {
        CharacterMesh = Character->GetMesh();
    }
    
    if (!CharacterMesh)
    {
        UE_LOG(LogTemp, Error, TEXT("EquipmentComponent: Character mesh not found!"));
    }
}

bool UEquipmentComponent::EquipItem(UEquippableItemData* ItemData)
{
    if (!ItemData)
    {
        if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå EquipmentComponent: ItemData is null"));
        return false;
    }
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, 
            FString::Printf(TEXT("üîç EquipmentComponent::EquipItem called for: %s, Slot: %d"), 
                *ItemData->DisplayName.ToString(), (int32)ItemData->EquipmentSlot));
    }
    
    if (!CharacterMesh)
    {
        UE_LOG(LogTemp, Error, TEXT("EquipmentComponent: CharacterMesh is null"));
        return false;
    }
    
    EEquipmentSlotType SlotType = ItemData->EquipmentSlot;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
    if (IsSlotOccupied(SlotType))
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
                TEXT("‚ö†Ô∏è –°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç! –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç."));
        }
        return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –º–µ—à
    USkeletalMeshComponent* MeshComp = CreateEquipmentMeshComponent(SlotType, ItemData);
    if (!MeshComp)
    {
        UE_LOG(LogTemp, Error, TEXT("EquipmentComponent: Failed to create mesh component"));
        return false;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    EquippedItems.Add(SlotType, ItemData);
    EquipmentMeshComponents.Add(SlotType, MeshComp);
    ItemData->bIsEquipped = true;
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
            FString::Printf(TEXT("‚úÖ –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ: %s"), *ItemData->DisplayName.ToString()));
    }
    
    return true;
}

bool UEquipmentComponent::UnequipItem(EEquipmentSlotType SlotType)
{
    if (!IsSlotOccupied(SlotType))
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
                TEXT("‚ö†Ô∏è –°–ª–æ—Ç –ø—É—Å—Ç!"));
        }
        return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    UEquippableItemData* ItemData = EquippedItems[SlotType];
    if (ItemData)
    {
        ItemData->bIsEquipped = false;
    }
    
    // –£–¥–∞–ª—è–µ–º –º–µ—à
    RemoveEquipmentMeshComponent(SlotType);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç—ã
    EquippedItems.Remove(SlotType);
    EquipmentMeshComponents.Remove(SlotType);
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
            FString::Printf(TEXT("‚úÖ –°–Ω—è—Ç–æ: %s"), 
                ItemData ? *ItemData->DisplayName.ToString() : TEXT("–ü—Ä–µ–¥–º–µ—Ç")));
    }
    
    return true;
}

UEquippableItemData* UEquipmentComponent::GetEquippedItem(EEquipmentSlotType SlotType) const
{
    const UEquippableItemData* const* ItemPtr = EquippedItems.Find(SlotType);
    if (ItemPtr)
    {
        return const_cast<UEquippableItemData*>(*ItemPtr);
    }
    return nullptr;
}

bool UEquipmentComponent::IsSlotOccupied(EEquipmentSlotType SlotType) const
{
    return EquippedItems.Contains(SlotType);
}

USkeletalMeshComponent* UEquipmentComponent::CreateEquipmentMeshComponent(EEquipmentSlotType SlotType, UEquippableItemData* ItemData)
{
    if (!ItemData)
    {
        if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå CreateEquipmentMeshComponent: ItemData is null"));
        return nullptr;
    }
    
    if (!ItemData->EquippedMesh)
    {
        if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
            FString::Printf(TEXT("‚ùå CreateEquipmentMeshComponent: EquippedMesh is null for %s"), *ItemData->DisplayName.ToString()));
        return nullptr;
    }
    
    if (!CharacterMesh)
    {
        if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå CreateEquipmentMeshComponent: CharacterMesh is null"));
        return nullptr;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–µ—à–∞
    FString ComponentName = FString::Printf(TEXT("EquipmentMesh_%d"), (int32)SlotType);
    USkeletalMeshComponent* MeshComp = NewObject<USkeletalMeshComponent>(GetOwner(), FName(*ComponentName));
    
    if (!MeshComp)
    {
        UE_LOG(LogTemp, Error, TEXT("EquipmentComponent: Failed to create mesh component"));
        return nullptr;
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    MeshComp->SetSkeletalMesh(ItemData->EquippedMesh);
    MeshComp->SetLeaderPoseComponent(CharacterMesh); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ —Å–∫–µ–ª–µ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    MeshComp->RegisterComponent();
    
    // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É
    if (ItemData->AttachSocketName != NAME_None && CharacterMesh->DoesSocketExist(ItemData->AttachSocketName))
    {
        MeshComp->AttachToComponent(CharacterMesh, 
            FAttachmentTransformRules::SnapToTargetNotIncludingScale, 
            ItemData->AttachSocketName);
    }
    else
    {
        // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫ –∫–æ—Ä–Ω—é –º–µ—à–∞
        MeshComp->AttachToComponent(CharacterMesh, 
            FAttachmentTransformRules::SnapToTargetNotIncludingScale);
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º
    MeshComp->SetRelativeTransform(ItemData->RelativeTransform);
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–ª–ª–∏–∑–∏—é –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    MeshComp->SetCollisionEnabled(ECollisionEnabled::NoCollision);
    
    UE_LOG(LogTemp, Log, TEXT("EquipmentComponent: Created mesh component for slot %d"), (int32)SlotType);
    
    return MeshComp;
}

void UEquipmentComponent::RemoveEquipmentMeshComponent(EEquipmentSlotType SlotType)
{
    if (USkeletalMeshComponent** MeshCompPtr = EquipmentMeshComponents.Find(SlotType))
    {
        USkeletalMeshComponent* MeshComp = *MeshCompPtr;
        if (MeshComp)
        {
            MeshComp->DestroyComponent();
        }
    }
}

