#include "EquipmentComponent.h"
#include "BackToZaraysk/Inventory/EquippableItemData.h"
#include "Components/SkeletalMeshComponent.h"
#include "GameFramework/Character.h"
#include "Engine/SkeletalMesh.h"

UEquipmentComponent::UEquipmentComponent()
{
    PrimaryComponentTick.bCanEverTick = false;
}

void UEquipmentComponent::BeginPlay()
{
    Super::BeginPlay();
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—à –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if (ACharacter* Character = Cast<ACharacter>(GetOwner()))
    {
        CharacterMesh = Character->GetMesh();
    }
    
    if (!CharacterMesh)
    {
        UE_LOG(LogTemp, Error, TEXT("EquipmentComponent: Character mesh not found!"));
    }
}

bool UEquipmentComponent::EquipItem(UEquippableItemData* ItemData)
{
    if (!ItemData)
    {
        if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå EquipmentComponent: ItemData is null"));
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
    if (ItemData->EquipmentSlot == EEquipmentSlotType::None)
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
                FString::Printf(TEXT("‚ùå EquipmentComponent: Invalid slot type for item '%s'"), *ItemData->DisplayName.ToString()));
        }
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω —É–∂–µ
    if (ItemData->bIsEquipped)
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
                FString::Printf(TEXT("‚ö†Ô∏è Item '%s' is already equipped"), *ItemData->DisplayName.ToString()));
        }
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–µ—à–∞ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    if (!ItemData->EquippedMesh || !ItemData->EquippedMesh->IsValidLowLevel())
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
                FString::Printf(TEXT("‚ùå Item '%s' has invalid EquippedMesh - cannot equip"), *ItemData->DisplayName.ToString()));
        }
        return false;
    }
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, 
            FString::Printf(TEXT("üîç EquipmentComponent::EquipItem called for: %s, Slot: %d"), 
                *ItemData->DisplayName.ToString(), (int32)ItemData->EquipmentSlot));
    }
    
    if (!CharacterMesh)
    {
        UE_LOG(LogTemp, Error, TEXT("EquipmentComponent: CharacterMesh is null"));
        return false;
    }
    
    EEquipmentSlotType SlotType = ItemData->EquipmentSlot;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
    if (IsSlotOccupied(SlotType))
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
                TEXT("‚ö†Ô∏è –°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç! –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç."));
        }
        return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –º–µ—à
    USkeletalMeshComponent* MeshComp = CreateEquipmentMeshComponent(SlotType, ItemData);
    if (!MeshComp)
    {
        UE_LOG(LogTemp, Error, TEXT("EquipmentComponent: Failed to create mesh component"));
        return false;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    EquippedItems.Add(SlotType, ItemData);
    EquipmentMeshComponents.Add(SlotType, MeshComp);
    ItemData->bIsEquipped = true;
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
            FString::Printf(TEXT("‚úÖ –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ: %s"), *ItemData->DisplayName.ToString()));
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, 
            FString::Printf(TEXT("üîß EquipmentMeshComponents count: %d"), EquipmentMeshComponents.Num()));
        
        if (USkeletalMeshComponent** MeshPtr = EquipmentMeshComponents.Find(SlotType))
        {
            USkeletalMeshComponent* Mesh = *MeshPtr;
            if (Mesh)
            {
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, 
                    FString::Printf(TEXT("üîß Mesh component exists: %s, Visible: %s"), 
                        *Mesh->GetName(), Mesh->IsVisible() ? TEXT("Yes") : TEXT("No")));
            }
        }
    }
    
    return true;
}

bool UEquipmentComponent::UnequipItem(EEquipmentSlotType SlotType, bool bDropToWorld)
{
    if (!IsSlotOccupied(SlotType))
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
                TEXT("‚ö†Ô∏è –°–ª–æ—Ç –ø—É—Å—Ç!"));
        }
        return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    UEquippableItemData* ItemData = EquippedItems[SlotType];
    if (ItemData)
    {
        ItemData->bIsEquipped = false;
        
        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –≤ –º–∏—Ä
        if (bDropToWorld)
        {
            // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±—Ä–æ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –º–∏—Ä
            // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Orange, 
                    FString::Printf(TEXT("üóëÔ∏è –ü—Ä–µ–¥–º–µ—Ç %s –±—É–¥–µ—Ç –≤—ã–±—Ä–æ—à–µ–Ω –≤ –º–∏—Ä"), 
                        *ItemData->DisplayName.ToString()));
            }
        }
    }
    
    // –£–¥–∞–ª—è–µ–º –º–µ—à
    RemoveEquipmentMeshComponent(SlotType);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç—ã
    EquippedItems.Remove(SlotType);
    EquipmentMeshComponents.Remove(SlotType);
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
            FString::Printf(TEXT("‚úÖ –°–Ω—è—Ç–æ: %s"), 
                ItemData ? *ItemData->DisplayName.ToString() : TEXT("–ü—Ä–µ–¥–º–µ—Ç")));
    }
    
    return true;
}

UEquippableItemData* UEquipmentComponent::GetEquippedItem(EEquipmentSlotType SlotType) const
{
    const UEquippableItemData* const* ItemPtr = EquippedItems.Find(SlotType);
    if (ItemPtr)
    {
        return const_cast<UEquippableItemData*>(*ItemPtr);
    }
    return nullptr;
}

bool UEquipmentComponent::IsSlotOccupied(EEquipmentSlotType SlotType) const
{
    return EquippedItems.Contains(SlotType);
}

USkeletalMeshComponent* UEquipmentComponent::CreateEquipmentMeshComponent(EEquipmentSlotType SlotType, UEquippableItemData* ItemData)
{
    if (!ItemData)
    {
        if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå CreateEquipmentMeshComponent: ItemData is null"));
        return nullptr;
    }
    
    if (!ItemData->EquippedMesh)
    {
        if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
            FString::Printf(TEXT("‚ùå CreateEquipmentMeshComponent: EquippedMesh is null for %s"), *ItemData->DisplayName.ToString()));
        return nullptr;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—à –≤–∞–ª–∏–¥–µ–Ω
    if (!IsValid(ItemData->EquippedMesh))
    {
        if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
            FString::Printf(TEXT("‚ùå CreateEquipmentMeshComponent: EquippedMesh is invalid for %s"), *ItemData->DisplayName.ToString()));
        return nullptr;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ—à–∞
    if (!ItemData->EquippedMesh->IsValidLowLevel())
    {
        if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
            FString::Printf(TEXT("‚ùå CreateEquipmentMeshComponent: EquippedMesh is not valid low level for %s"), *ItemData->DisplayName.ToString()));
        return nullptr;
    }
    
    if (!CharacterMesh)
    {
        if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå CreateEquipmentMeshComponent: CharacterMesh is null"));
        return nullptr;
    }
    
    if (!GetOwner())
    {
        if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå CreateEquipmentMeshComponent: Owner is null"));
        return nullptr;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–µ—à–∞
    FString ComponentName = FString::Printf(TEXT("EquipmentMesh_%d"), (int32)SlotType);
    USkeletalMeshComponent* MeshComp = NewObject<USkeletalMeshComponent>(GetOwner(), FName(*ComponentName));
    
    if (!MeshComp)
    {
        UE_LOG(LogTemp, Error, TEXT("EquipmentComponent: Failed to create mesh component"));
        if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå Failed to create mesh component"));
        return nullptr;
    }
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
            FString::Printf(TEXT("üîß Created mesh component: %s"), *ComponentName));
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    USkeletalMesh* SkeletalMesh = Cast<USkeletalMesh>(ItemData->EquippedMesh);
    if (SkeletalMesh)
    {
        MeshComp->SetSkeletalMesh(SkeletalMesh);
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
                FString::Printf(TEXT("üîß Set SkeletalMesh: %s"), *SkeletalMesh->GetName()));
        }
    }
    else
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
                FString::Printf(TEXT("‚ùå Failed to cast EquippedMesh to USkeletalMesh: %s"), 
                    ItemData->EquippedMesh ? *ItemData->EquippedMesh->GetName() : TEXT("NULL")));
        }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
    MeshComp->SetMaterial(0, nullptr); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ü–ï–†–ï–î –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º
    MeshComp->RegisterComponent();
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, TEXT("üîß Mesh component registered"));
    }
    
    // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É
    if (ItemData->AttachSocketName != NAME_None && CharacterMesh->DoesSocketExist(ItemData->AttachSocketName))
    {
        // –î–ª—è —Å–∫–µ–ª–µ—Ç–Ω—ã—Ö –º–µ—à–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º SnapToTarget –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫ —Å–æ–∫–µ—Ç—É
        MeshComp->AttachToComponent(CharacterMesh, 
            FAttachmentTransformRules::SnapToTargetNotIncludingScale, 
            ItemData->AttachSocketName);
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
                FString::Printf(TEXT("üîß Attached to socket: %s (skeletal attachment)"), 
                    *ItemData->AttachSocketName.ToString()));
        }
    }
    else
    {
        // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫ –∫–æ—Ä–Ω—é –º–µ—à–∞ (–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É)
        MeshComp->AttachToComponent(CharacterMesh, 
            FAttachmentTransformRules::SnapToTargetNotIncludingScale);
        
        if (GEngine)
        {
            if (ItemData->AttachSocketName == NAME_None)
            {
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
                    TEXT("üîß Attached to character root (no socket)"));
            }
            else
            {
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
                    FString::Printf(TEXT("‚ö†Ô∏è Socket '%s' not found, attached to root"), 
                        *ItemData->AttachSocketName.ToString()));
            }
        }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º LeaderPoseComponent –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–∫–µ–ª–µ—Ç–∞ –∫ —Å–∫–µ–ª–µ—Ç—É
    // LeaderPoseComponent –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∫–µ–ª–µ—Ç–Ω—ã—Ö –º–µ—à–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–ª–µ–¥–æ–≤–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    USkeletalMesh* SkeletalMeshForSkeleton = Cast<USkeletalMesh>(ItemData->EquippedMesh);
    if (SkeletalMeshForSkeleton && SkeletalMeshForSkeleton->GetSkeleton())
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –º–µ—à–∞ –µ—Å—Ç—å —Å–∫–µ–ª–µ—Ç (—ç—Ç–æ —Å–∫–µ–ª–µ—Ç–Ω—ã–π –º–µ—à)
        MeshComp->SetLeaderPoseComponent(CharacterMesh);
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
                TEXT("üîß LeaderPoseComponent enabled for skeletal mesh"));
        }
    }
    else
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
                TEXT("‚ö†Ô∏è LeaderPoseComponent disabled - not a skeletal mesh"));
        }
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º
    MeshComp->SetRelativeTransform(ItemData->RelativeTransform);
    
    if (GEngine)
    {
        FTransform AppliedTransform = MeshComp->GetRelativeTransform();
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, 
            FString::Printf(TEXT("üîß Applied RelativeTransform: Loc(%.2f,%.2f,%.2f) Rot(%.2f,%.2f,%.2f) Scale(%.2f,%.2f,%.2f)"), 
                AppliedTransform.GetLocation().X, AppliedTransform.GetLocation().Y, AppliedTransform.GetLocation().Z,
                AppliedTransform.Rotator().Pitch, AppliedTransform.Rotator().Yaw, AppliedTransform.Rotator().Roll,
                AppliedTransform.GetScale3D().X, AppliedTransform.GetScale3D().Y, AppliedTransform.GetScale3D().Z));
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–ª–ª–∏–∑–∏—é –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    MeshComp->SetCollisionEnabled(ECollisionEnabled::NoCollision);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º –≤–∏–¥–∏–º—ã–º
    MeshComp->SetVisibility(true);
    MeshComp->SetHiddenInGame(false);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    MeshComp->SetVisibility(true);
    MeshComp->MarkRenderStateDirty();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º
    MeshComp->UpdateBounds();
    MeshComp->MarkRenderTransformDirty();
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
            FString::Printf(TEXT("‚úÖ Mesh component created successfully for slot %d"), (int32)SlotType));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
        if (MeshComp->IsVisible())
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, TEXT("‚úÖ Mesh component is visible"));
        }
        else
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå Mesh component is not visible"));
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞
        FTransform RelativeTransform = MeshComp->GetRelativeTransform();
        FTransform WorldTransform = MeshComp->GetComponentTransform();
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, 
            FString::Printf(TEXT("üîß RelativeTransform: Location(%s), Rotation(%s), Scale(%s)"), 
                *RelativeTransform.GetLocation().ToString(),
                *RelativeTransform.GetRotation().Rotator().ToString(),
                *RelativeTransform.GetScale3D().ToString()));
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, 
            FString::Printf(TEXT("üåç WorldTransform: Location(%s), Rotation(%s), Scale(%s)"), 
                *WorldTransform.GetLocation().ToString(),
                *WorldTransform.GetRotation().Rotator().ToString(),
                *WorldTransform.GetScale3D().ToString()));
    }
    
    UE_LOG(LogTemp, Log, TEXT("EquipmentComponent: Created mesh component for slot %d"), (int32)SlotType);
    
    return MeshComp;
}

void UEquipmentComponent::RemoveEquipmentMeshComponent(EEquipmentSlotType SlotType)
{
    if (USkeletalMeshComponent** MeshCompPtr = EquipmentMeshComponents.Find(SlotType))
    {
        USkeletalMeshComponent* MeshComp = *MeshCompPtr;
        if (MeshComp)
        {
            MeshComp->DestroyComponent();
        }
    }
}

