#include "PickupBackpack.h"
#include "Components/StaticMeshComponent.h"
#include "BackToZaraysk/Inventory/EquippableItemData.h"
#include "BackToZaraysk/Inventory/InventoryComponent.h"
#include "BackToZaraysk/Inventory/EquipmentSlotType.h"

APickupBackpack::APickupBackpack()
{
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É–± –∫–∞–∫ –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
    if (UStaticMesh* SM = LoadObject<UStaticMesh>(nullptr, TEXT("/Engine/BasicShapes/Cube.Cube")))
    {
        Mesh->SetStaticMesh(SM);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–ª—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
    if (UMaterialInterface* M = LoadObject<UMaterialInterface>(nullptr, TEXT("/Engine/EngineMaterials/DefaultWhiteGrid.DefaultWhiteGrid")))
    {
        Mesh->SetMaterial(0, M);
    }
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫—É–± –≤ —Ñ–æ—Ä–º—É –ø–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥–∞ —Ä—é–∫–∑–∞–∫–∞
    // –†–∞–∑–º–µ—Ä—ã: —à–∏—Ä–∏–Ω–∞ 0.8, –≥–ª—É–±–∏–Ω–∞ 0.4, –≤—ã—Å–æ—Ç–∞ 1.2
    Mesh->SetRelativeScale3D(FVector(0.8f, 0.4f, 1.2f));
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–∑–∏–∫–∏
    Mesh->SetSimulatePhysics(true);
    Mesh->SetEnableGravity(true);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –¥–∞–Ω–Ω—ã—Ö —Ä—é–∫–∑–∞–∫–∞
    ItemClass = UBackpackItemData::StaticClass();
}

bool APickupBackpack::CanBePickedUp(UInventoryComponent* InventoryComponent) const
{
    if (!InventoryComponent) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—é–∫–∑–∞–∫
    UEquippableItemData* CurrentBackpack = Cast<UEquippableItemData>(InventoryComponent->GetEquippedItem(Backpack));
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, 
            FString::Printf(TEXT("üîç APickupBackpack::CanBePickedUp - Current backpack: %s"), 
                CurrentBackpack ? TEXT("Found") : TEXT("None")));
    }
    
    // –ú–æ–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä—é–∫–∑–∞–∫–∞
    return CurrentBackpack == nullptr;
}

void APickupBackpack::OnPickedUp(UInventoryComponent* InventoryComponent)
{
    if (!InventoryComponent) return;
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, TEXT("üéí APickupBackpack::OnPickedUp - Auto-equipping backpack"));
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞ (—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º)
    UInventoryItemData* Data = nullptr;
    if (ItemInstance)
    {
        Data = ItemInstance;
    }
    else if (ItemClass)
    {
        UObject* NewObj = NewObject<UObject>(this, ItemClass);
        Data = Cast<UInventoryItemData>(NewObj);
    }
    
    if (Data && Cast<UEquippableItemData>(Data))
    {
        UEquippableItemData* EquipData = Cast<UEquippableItemData>(Data);
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ–ª–∞–≥–∏ –∏ —Ä–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —Ä—é–∫–∑–∞–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (UBackpackItemData* BackpackData = Cast<UBackpackItemData>(EquipData))
        {
            BackpackData->bHasAdditionalStorage = true;
            if (BackpackData->AdditionalGridSize.X <= 0 || BackpackData->AdditionalGridSize.Y <= 0)
            {
                BackpackData->AdditionalGridSize = FIntPoint(8, 6);
            }
        }

        // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —á—Ç–æ–±—ã EquipItemFromInventory —Å–º–æ–≥ –µ–≥–æ –Ω–∞–π—Ç–∏
        InventoryComponent->AddToBackpack(EquipData);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫–∏–ø–∏—Ä—É–µ–º —Ä—é–∫–∑–∞–∫
        if (InventoryComponent->EquipItemFromInventory(EquipData))
        {
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
                    FString::Printf(TEXT("‚úÖ Backpack auto-equipped: %s"), *EquipData->DisplayName.ToString()));
            }
            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ ItemInstance –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é ‚Äî —Ä–∞–∑—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É —É Pickup, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤–æ–π–Ω–æ–≥–æ –≤–ª–∞–¥–µ–Ω–∏—è
            ItemInstance = nullptr;
            
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º pickup –æ–±—ä–µ–∫—Ç
            Destroy();
        }
        else
        {
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, TEXT("‚ùå Failed to auto-equip backpack"));
            }
        }
    }
}
