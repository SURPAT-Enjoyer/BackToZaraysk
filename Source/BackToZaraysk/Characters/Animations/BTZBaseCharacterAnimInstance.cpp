// Fill out your copyright notice in the Description page of Project Settings.


#include "BTZBaseCharacterAnimInstance.h"
#include "../BTZBaseCharacter.h"
#include "../PlayerCharacter.h"
#include "../../Components/MovementComponents/BTZBaseCharMovementComponent.h"
#include "../../Components/StrafeComponent.h"
#include "../../Components/ObstacleClimbingComponent.h"

void UBTZBaseCharacterAnimInstance::NativeBeginPlay()
{
	Super::NativeBeginPlay();
	checkf(TryGetPawnOwner()->IsA<ABTZBaseCharacter>(), TEXT("UBTZBaseCharacterAnimInstance::NativeBeginPlay() can be used only with ABTZBaseCharacter"));
	CachedBaseCharacter = StaticCast<ABTZBaseCharacter*>(TryGetPawnOwner());
}

void UBTZBaseCharacterAnimInstance::NativeUpdateAnimation(float DeltaSeconds)
{
	Super::NativeUpdateAnimation(DeltaSeconds);
	if (!CachedBaseCharacter.IsValid())
	{
		return;
	}

	UBTZBaseCharMovementComponent* CharacterMovement = CachedBaseCharacter->GetBaseCharacterMovementComponent();
	Speed = CharacterMovement->Velocity.Size();
	bIsFalling = CharacterMovement->IsFalling();
	bIsCrouching = CharacterMovement->IsCrouching();

	bIsSprinting = CharacterMovement->IsSprinting();
	bIsOutOfStamina = CharacterMovement->IsOutOfStamina();
	bIsProning = CharacterMovement->IsProning();

	// Strafe animation synchronization
	if (CachedBaseCharacter.IsValid())
	{
		// Cast to PlayerCharacter to access strafe component
		if (APlayerCharacter* PlayerCharacter = Cast<APlayerCharacter>(CachedBaseCharacter.Get()))
		{
			if (PlayerCharacter->StrafeComponent)
			{
				bIsStrafing = PlayerCharacter->StrafeComponent->bIsStrafing;
				
				// Convert EStrafeType to float direction
				switch (PlayerCharacter->StrafeComponent->CurrentStrafeType)
				{
				case EStrafeType::Left:
					StrafeDirection = -1.0f;
					break;
				case EStrafeType::Right:
					StrafeDirection = 1.0f;
					break;
				default:
					StrafeDirection = 0.0f;
					break;
				}
			}
		}
	}

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ö –¥–∞–Ω–Ω—ã—Ö –≤ AnimInstance
    if (CachedBaseCharacter.IsValid())
    {
        // –ü–æ–ª—É—á–∞–µ–º IK —Å–º–µ—â–µ–Ω–∏—è –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        float LeftIKOffset = CachedBaseCharacter->GetIKLeftFootOffset();
        float RightIKOffset = CachedBaseCharacter->GetIKRightFootOffset();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if (FMath::IsFinite(LeftIKOffset) && FMath::IsFinite(RightIKOffset))
        {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏–π –¥–ª—è TwoBoneIK
            // –°–º–µ—â–µ–Ω–∏—è —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –≤ BTZBaseCharacter
            // –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö –∫–∞–∫ effector locations
            LeftFootEffectorLocation = FVector(0.0f, 0.0f, LeftIKOffset);
            RightFootEffectorLocation = FVector(0.0f, 0.0f, RightIKOffset);
            
            // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ Alpha –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ò–ö
            UBTZBaseCharMovementComponent* MovementComp = CachedBaseCharacter->GetBaseCharacterMovementComponent();
            if (MovementComp)
            {
                bool bIsOnGround = MovementComp->IsMovingOnGround();
                bool bIsMoving = MovementComp->Velocity.Size() > 5.0f;
                
                if (bIsOnGround)
                {
                    // –ù–∞ –∑–µ–º–ª–µ - –ø–æ–ª–Ω–∞—è —Å–∏–ª–∞ –ò–ö
                    float TargetAlpha = bIsMoving ? 1.0f : 0.8f; // –ù–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –∫–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç
                    LeftFootIKAlpha = FMath::FInterpTo(LeftFootIKAlpha, TargetAlpha, DeltaSeconds, 8.0f);
                    RightFootIKAlpha = FMath::FInterpTo(RightFootIKAlpha, TargetAlpha, DeltaSeconds, 8.0f);
                }
                else
                {
                    // –í –≤–æ–∑–¥—É—Ö–µ - –ø–ª–∞–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ò–ö
                    LeftFootIKAlpha = FMath::FInterpTo(LeftFootIKAlpha, 0.0f, DeltaSeconds, 3.0f);
                    RightFootIKAlpha = FMath::FInterpTo(RightFootIKAlpha, 0.0f, DeltaSeconds, 3.0f);
                }
            }
            else
            {
                // Fallback –µ—Å–ª–∏ MovementComp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                LeftFootIKAlpha = 1.0f;
                RightFootIKAlpha = 1.0f;
            }
        }
        else
        {
            // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–ª–∞–≤–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ò–ö
            LeftFootEffectorLocation = FVector::ZeroVector;
            RightFootEffectorLocation = FVector::ZeroVector;
            LeftFootIKAlpha = FMath::FInterpTo(LeftFootIKAlpha, 0.0f, DeltaSeconds, 5.0f);
            RightFootIKAlpha = FMath::FInterpTo(RightFootIKAlpha, 0.0f, DeltaSeconds, 5.0f);
        }

        // Debug information - —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(8, 1.0f, FColor::Yellow, 
                FString::Printf(TEXT("AnimInstance IK - Left: %.2f (Alpha: %.2f), Right: %.2f (Alpha: %.2f)"),
                LeftIKOffset, LeftFootIKAlpha, RightIKOffset, RightFootIKAlpha));
        }
    }
    else
    {
        // Fallback to zero offsets - –ø–ª–∞–≤–Ω—ã–π —Å–±—Ä–æ—Å
        LeftFootEffectorLocation = FVector::ZeroVector;
        RightFootEffectorLocation = FVector::ZeroVector;
        LeftFootIKAlpha = FMath::FInterpTo(LeftFootIKAlpha, 0.0f, DeltaSeconds, 5.0f);
        RightFootIKAlpha = FMath::FInterpTo(RightFootIKAlpha, 0.0f, DeltaSeconds, 5.0f);
    }

	// === CLIMBING ANIMATION SYNCHRONIZATION (–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞) ===
	if (CachedBaseCharacter.IsValid())
	{
		// Cast to PlayerCharacter to access climbing component
		if (APlayerCharacter* PlayerCharacter = Cast<APlayerCharacter>(CachedBaseCharacter.Get()))
		{
			if (PlayerCharacter->ObstacleClimbingComponent)
			{
				UObstacleClimbingComponent* ClimbComp = PlayerCharacter->ObstacleClimbingComponent;
				
				// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
				bIsClimbing = ClimbComp->bIsClimbing;
				
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ª–∞–∑–∞–Ω–∏—è
				ClimbingType = (int32)ClimbComp->CurrentObstacleType;
				
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–ª–∞–≥–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
				bIsVaulting = (ClimbComp->CurrentObstacleType == EObstacleType::Vault);
				bIsMantling = (ClimbComp->CurrentObstacleType == EObstacleType::Mantle);
				bIsClimbing_High = (ClimbComp->CurrentObstacleType == EObstacleType::Climb);
				
				// Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è)
				if (bIsClimbing && GEngine)
				{
					GEngine->AddOnScreenDebugMessage(100, 0.1f, FColor::Green, 
						FString::Printf(TEXT("üé¨ AnimInstance: Climbing | Type=%d | Vault=%d Mantle=%d Climb=%d"), 
							ClimbingType, bIsVaulting, bIsMantling, bIsClimbing_High));
				}
			}
		}
	}
}
