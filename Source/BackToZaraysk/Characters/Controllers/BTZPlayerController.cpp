// Fill out your copyright notice in the Description page of Project Settings.


#include "BTZPlayerController.h"
#include"../BTZBaseCharacter.h"
#include "../PlayerCharacter.h"
#include "Blueprint/UserWidget.h"
#include "BackToZaraysk/Inventory/InventoryWidget.h"
#include "BackToZaraysk/Inventory/InventoryItemData.h"
#include "BackToZaraysk/Inventory/InventoryComponent.h"
#include "BackToZaraysk/GameData/Items/Test/PickupBase.h"
#include "BackToZaraysk/GameData/Items/Test/PickupCube.h"
#include "BackToZaraysk/GameData/Items/Test/PickupParallelepiped.h"
#include "BackToZaraysk/GameData/Items/Test/PickupBackpack.h"
#include "BackToZaraysk/GameData/Items/TacticalVest.h"
#include "BackToZaraysk/Inventory/EquippableItemData.h"
#include "UObject/ConstructorHelpers.h"
#include "Blueprint/WidgetBlueprintLibrary.h"
#include "Engine/GameViewportClient.h"
#include "Engine/Engine.h"

ABTZPlayerController::ABTZPlayerController()
{
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º C++ –∫–ª–∞—Å—Å –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ Blueprint
    InventoryWidgetClass = UInventoryWidget::StaticClass();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–ª–æ–≤—ã
    bIsFreeLooking = false;
    HeadRotation = FRotator::ZeroRotator;
    InitialHeadRotation = FRotator::ZeroRotator;
    BodyRotation = FRotator::ZeroRotator;
}

void ABTZPlayerController::RequestToggleInventory()
{
    ToggleInventory();
}

void ABTZPlayerController::SetPawn(APawn* InPawn)
{
	Super::SetPawn(InPawn);
	CachedBaseCharacter = Cast<ABTZBaseCharacter>(InPawn);
}

void ABTZPlayerController::SetupInputComponent()
{
	Super::SetupInputComponent();
	InputComponent->BindAxis("MoveForward", this, &ABTZPlayerController::MoveForward);
	InputComponent->BindAxis("MoveRight", this, &ABTZPlayerController::MoveRight);
	InputComponent->BindAxis("Turn", this, &ABTZPlayerController::Turn);
	InputComponent->BindAxis("LookUp", this, &ABTZPlayerController::LookUp);
	InputComponent->BindAction("Jump", EInputEvent::IE_Pressed, this, &ABTZPlayerController::Jump);
	InputComponent->BindAction("Crouch", EInputEvent::IE_Pressed, this, &ABTZPlayerController::ChangeCrouchState);
	InputComponent->BindAction("Sprint", EInputEvent::IE_Pressed, this, &ABTZPlayerController::StartSprint);
	InputComponent->BindAction("Sprint", EInputEvent::IE_Released, this, &ABTZPlayerController::StopSprint);
	InputComponent->BindAction("Prone", EInputEvent::IE_Pressed, this, &ABTZPlayerController::ChangeProneState);
    InputComponent->BindAction("OpenInventory", EInputEvent::IE_Pressed, this, &ABTZPlayerController::ToggleInventory);
    InputComponent->BindAction("Interact", EInputEvent::IE_Pressed, this, &ABTZPlayerController::Interact);
    InputComponent->BindAction("Drop", EInputEvent::IE_Pressed, this, &ABTZPlayerController::DropItem);
    InputComponent->BindAction("ClimbObstacle", EInputEvent::IE_Pressed, this, &ABTZPlayerController::TryClimbObstacle);
    // Lean
    InputComponent->BindAction("LeanLeft", EInputEvent::IE_Pressed, this, &ABTZPlayerController::StartLeanLeft);
    InputComponent->BindAction("LeanLeft", EInputEvent::IE_Released, this, &ABTZPlayerController::StopLeanLeft);
    InputComponent->BindAction("LeanRight", EInputEvent::IE_Pressed, this, &ABTZPlayerController::StartLeanRight);
    InputComponent->BindAction("LeanRight", EInputEvent::IE_Released, this, &ABTZPlayerController::StopLeanRight);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä–µ–π—Ñ–∞
    InputComponent->BindAction("StrafeLeft", EInputEvent::IE_Pressed, this, &ABTZPlayerController::StartStrafeLeft);
    InputComponent->BindAction("StrafeLeft", EInputEvent::IE_Released, this, &ABTZPlayerController::StopStrafeLeft);
    InputComponent->BindAction("StrafeRight", EInputEvent::IE_Pressed, this, &ABTZPlayerController::StartStrafeRight);
    InputComponent->BindAction("StrafeRight", EInputEvent::IE_Released, this, &ABTZPlayerController::StopStrafeRight);
    InputComponent->BindAction("StrafeSpace", EInputEvent::IE_Pressed, this, &ABTZPlayerController::StartStrafeSpace);
    InputComponent->BindAction("StrafeSpace", EInputEvent::IE_Released, this, &ABTZPlayerController::StopStrafeSpace);
    
    // –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã —Å—Ä–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏
    InputComponent->BindAction("FreeLook", EInputEvent::IE_Pressed, this, &ABTZPlayerController::StartFreeLook);
    InputComponent->BindAction("FreeLook", EInputEvent::IE_Released, this, &ABTZPlayerController::StopFreeLook);
}
void ABTZPlayerController::Interact()
{
    if (!CachedBaseCharacter.IsValid()) return;
    FVector ViewLoc; FRotator ViewRot; GetPlayerViewPoint(ViewLoc, ViewRot);
    const FVector Start = ViewLoc;
    const FVector End = Start + ViewRot.Vector() * 200.f;
    FHitResult Hit;
    FCollisionQueryParams Params(SCENE_QUERY_STAT(InteractTrace), false);
    if (GetWorld()->LineTraceSingleByChannel(Hit, Start, End, ECC_Visibility, Params))
    {
        class APickupBase* Pickup = Cast<class APickupBase>(Hit.GetActor());
        if (Pickup)
        {
            UInventoryComponent* Inv = CachedBaseCharacter->FindComponentByClass<UInventoryComponent>();
            if (Inv)
            {
                UInventoryItemData* Data = nullptr;
                if (Pickup->ItemClass)
                {
                    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –∫–ª–∞—Å—Å–∞
                    UObject* NewObj = NewObject<UObject>(this, Pickup->ItemClass);
                    Data = Cast<UInventoryItemData>(NewObj);
                    
                    if (GEngine)
                    {
                        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, 
                            FString::Printf(TEXT("üîç Pickup ItemClass: %s, Created Object: %s"), 
                                *Pickup->ItemClass->GetName(),
                                NewObj ? *NewObj->GetClass()->GetName() : TEXT("null")));
                    }
                    
                    // –ï–¥–∏–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
                    if (Inv->TryPickupItem(Data))
                    {
                        if (InventoryWidgetInstance)
                        {
                            InventoryWidgetInstance->RefreshInventoryUI();
                        }
                        Pickup->Destroy();
                        return;
                    }
                    {
                        FString DataAssetPath = TEXT("/Game/BackToZaraysk/Core/Items/Equipment/DA_TacticalVest.DA_TacticalVest");
                        UObject* LoadedDataAsset = LoadObject<UObject>(nullptr, *DataAssetPath);
                        
                        if (LoadedDataAsset)
                        {
                            if (UEquippableItemData* SourceData = Cast<UEquippableItemData>(LoadedDataAsset))
                            {
                                if (UEquippableItemData* EquipData = Cast<UEquippableItemData>(Data))
                                {
                                    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ Data Asset
                                    EquipData->DisplayName = SourceData->DisplayName;
                                    EquipData->SizeInCellsX = SourceData->SizeInCellsX;
                                    EquipData->SizeInCellsY = SourceData->SizeInCellsY;
                                    EquipData->EquipmentSlot = SourceData->EquipmentSlot;
                                    // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                                    EquipData->AttachSocketName = FName(TEXT("spine_02"));
                                    EquipData->EquippedMesh = SourceData->EquippedMesh;
                                    // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                                    EquipData->RelativeTransform = FTransform(
                                        FRotator(0.0f, 0.0f, 0.0f),
                                        FVector(5.0f, 0.0f, -2.0f),
                                        FVector(1.0f, 1.0f, 1.0f)
                                    );
                                    EquipData->bRotatable = SourceData->bRotatable;
                                    
                                    if (GEngine)
                                    {
                                        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
                                            FString::Printf(TEXT("üîß Data Asset properties copied! EquippedMesh: %s"), 
                                                EquipData->EquippedMesh ? TEXT("SET") : TEXT("NULL")));
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (GEngine)
                            {
                                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
                                    TEXT("‚ùå Failed to load Data Asset from path!"));
                            }
                        }
                    }
                    
                    if (GEngine)
                    {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —ç–∫–∏–ø–∏—Ä—É–µ–º—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º
                        if (UEquippableItemData* EquipData = Cast<UEquippableItemData>(Data))
                        {
                            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
                                FString::Printf(TEXT("‚úÖ EquippableItemData found! EquippedMesh: %s, Slot: %d"), 
                                    EquipData->EquippedMesh ? TEXT("SET") : TEXT("NULL"),
                                    (int32)EquipData->EquipmentSlot));
                        }
                        else if (Data)
                        {
                            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
                                FString::Printf(TEXT("‚ö†Ô∏è Created object is not UEquippableItemData, it's: %s"), 
                                    *Data->GetClass()->GetName()));
                        }
                    }
                }
                else
                {
                    // –ï—Å–ª–∏ ItemClass –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ Pickup
                    if (Cast<ATacticalVest>(Pickup))
                    {
                        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å Data Asset –¥–ª—è —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∂–∏–ª–µ—Ç–∞
                        FString DataAssetPath = TEXT("/Game/BackToZaraysk/Core/Items/Equipment/DA_TacticalVest.DA_TacticalVest");
                        UObject* LoadedDataAsset = LoadObject<UObject>(nullptr, *DataAssetPath);
                        
                        if (LoadedDataAsset)
                        {
                            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Data Asset
                            UObject* NewObj = NewObject<UObject>(this, LoadedDataAsset->GetClass());
                            Data = Cast<UInventoryItemData>(NewObj);
                            
                            if (UEquippableItemData* SourceData = Cast<UEquippableItemData>(LoadedDataAsset))
                            {
                                if (UEquippableItemData* EquipData = Cast<UEquippableItemData>(Data))
                                {
                                    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ Data Asset
                                    EquipData->DisplayName = SourceData->DisplayName;
                                    EquipData->SizeInCellsX = SourceData->SizeInCellsX;
                                    EquipData->SizeInCellsY = SourceData->SizeInCellsY;
                                    EquipData->EquipmentSlot = SourceData->EquipmentSlot;
                                    // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                                    EquipData->AttachSocketName = FName(TEXT("spine_02"));
                                    EquipData->EquippedMesh = SourceData->EquippedMesh;
                                    // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                                    EquipData->RelativeTransform = FTransform(
                                        FRotator(0.0f, 0.0f, 0.0f),
                                        FVector(5.0f, 0.0f, -2.0f),
                                        FVector(1.0f, 1.0f, 1.0f)
                                    );
                                    EquipData->bRotatable = SourceData->bRotatable;
                                    
                                    if (GEngine)
                                    {
                                        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
                                            FString::Printf(TEXT("üîß Loaded Data Asset: %s, EquippedMesh: %s, Slot: %d"), 
                                                *EquipData->DisplayName.ToString(),
                                                EquipData->EquippedMesh ? TEXT("SET") : TEXT("NULL"),
                                                (int32)EquipData->EquipmentSlot));
                                        
                                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                                        if (EquipData->EquippedMesh)
                                        {
                                            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
                                                FString::Printf(TEXT("‚úÖ EquippedMesh name: %s"), 
                                                    *EquipData->EquippedMesh->GetName()));
                                        }
                                        else
                                        {
                                            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
                                                TEXT("‚ùå EquippedMesh is NULL in Data Asset!"));
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            // Fallback: —Å–æ–∑–¥–∞–µ–º UEquippableItemData –≤—Ä—É—á–Ω—É—é
                            Data = NewObject<UEquippableItemData>(this);
                            if (UEquippableItemData* EquipData = Cast<UEquippableItemData>(Data))
                            {
                                EquipData->DisplayName = FText::FromString(TEXT("–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∂–∏–ª–µ—Ç"));
                                EquipData->SizeInCellsX = 3;
                                EquipData->SizeInCellsY = 3;
                                EquipData->EquipmentSlot = Vest;
                                EquipData->AttachSocketName = FName(TEXT("spine_02"));
                                EquipData->bRotatable = false;
                                
                                // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—à –≤—Ä—É—á–Ω—É—é
                                FString MeshPath = TEXT("/Game/insurgent_2/Characters/SK_ChestRigSmall.SK_ChestRigSmall");
                                USkeletalMesh* VestMesh = LoadObject<USkeletalMesh>(nullptr, *MeshPath);
                                if (VestMesh)
                                {
                                    EquipData->EquippedMesh = VestMesh;
                                    if (GEngine)
                                    {
                                        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
                                            FString::Printf(TEXT("‚úÖ Manually loaded EquippedMesh: %s"), 
                                                *VestMesh->GetName()));
                                    }
                                }
                                else
                                {
                                    if (GEngine)
                                    {
                                        GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
                                            FString::Printf(TEXT("‚ùå Failed to load mesh from path: %s"), *MeshPath));
                                    }
                                }
                            }
                            if (GEngine)
                            {
                                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
                                    TEXT("‚ö†Ô∏è Data Asset not found, created UEquippableItemData manually"));
                            }
                        }
                    }
                    else
                    {
                        Data = NewObject<UInventoryItemData>(this);
                        if (GEngine)
                        {
                            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, 
                                TEXT("üîç Pickup ItemClass is null, created default UInventoryItemData"));
                        }
                    }
                }
                if (Data && Data->SizeInCellsX<=0) { Data->SizeInCellsX=1; }
                if (Data && Data->SizeInCellsY<=0) { Data->SizeInCellsY=1; }
                if (!Data->Icon)
                {
                    // –ò–∫–æ–Ω–∫–∞: –±–µ–ª—ã–π –∫–≤–∞–¥—Ä–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if (UTexture2D* White = LoadObject<UTexture2D>(nullptr, TEXT("/Engine/EngineResources/WhiteSquareTexture.WhiteSquareTexture")))
                    {
                        Data->Icon = White;
                    }
                }
                if (Inv->AddToBackpack(Data))
                {
                    Pickup->Destroy();
                    if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 2.f, FColor::Green, TEXT("Picked up to backpack"));
                    if (InventoryWidgetInstance)
                    {
                        InventoryWidgetInstance->AddBackpackItemIcon(Data);
                    }
                }
            }
        }
    }
}

void ABTZPlayerController::DropItem()
{
    if (!CachedBaseCharacter.IsValid()) return;
    UInventoryComponent* Inv = CachedBaseCharacter->FindComponentByClass<UInventoryComponent>();
    if (!Inv) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    if (Inv->BackpackItems.Num() == 0) return;
    UInventoryItemData* Item = Inv->BackpackItems.Last();
    if (!Item) return;
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    Inv->RemoveSpecificFromBackpack(Item);
    
    FVector ViewLoc; FRotator ViewRot; GetPlayerViewPoint(ViewLoc, ViewRot);
    const FVector SpawnLoc = ViewLoc + ViewRot.Vector() * 80.f;
    FActorSpawnParameters S; S.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AdjustIfPossibleButAlwaysSpawn;
    
    TSubclassOf<AActor> DropClass = APickupCube::StaticClass();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —ç–∫–∏–ø–∏—Ä—É–µ–º—ã–º
    if (UEquippableItemData* EquippableItem = Cast<UEquippableItemData>(Item))
    {
        if (EquippableItem->SizeInCellsX == 3 && EquippableItem->SizeInCellsY == 3)
        {
            // –î–ª—è —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∂–∏–ª–µ—Ç–∞ 3x3
            DropClass = ATacticalVest::StaticClass();
        }
    }
    else if (Item->SizeInCellsX == 2 && Item->SizeInCellsY == 1)
    {
        DropClass = APickupParallelepiped::StaticClass();
    }
    AActor* Spawned = GetWorld()->SpawnActor<AActor>(DropClass, SpawnLoc, ViewRot, S);
    if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 2.f, FColor::Yellow, TEXT("Dropped from backpack"));
    if (InventoryWidgetInstance && CachedBaseCharacter.IsValid())
    {
        if (UInventoryComponent* Inv2 = CachedBaseCharacter->FindComponentByClass<UInventoryComponent>())
        {
            InventoryWidgetInstance->SyncBackpack(Inv2->BackpackItems);
        }
    }
}

void ABTZPlayerController::MoveForward(float Value)
{
	if (ensure(CachedBaseCharacter.IsValid()))
	{
		CachedBaseCharacter->MoveForward(Value);
	}
}

void ABTZPlayerController::MoveRight(float Value)
{
	if (ensure(CachedBaseCharacter.IsValid()))
	{
		CachedBaseCharacter->MoveRight(Value);
	}
}

void ABTZPlayerController::Turn(float Value)
{
	if (bIsFreeLooking) 
	{
		// FreeLook –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
		FreeLookX(Value);
		return;
	}
	
	// –û–±—ã—á–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
	if (ensure(CachedBaseCharacter.IsValid()))
	{
		CachedBaseCharacter->Turn(Value);
	}
}

void ABTZPlayerController::LookUp(float Value)
{
	if (bIsFreeLooking) 
	{
		// FreeLook –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
		FreeLookY(Value);
		return;
	}
	
	// –û–±—ã—á–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
	if (ensure(CachedBaseCharacter.IsValid()))
	{
		CachedBaseCharacter->LookUp(Value);
	}
}

void ABTZPlayerController::Jump()
{
	if (ensure(CachedBaseCharacter.IsValid()))
	{
        CachedBaseCharacter->Jump();
	}
}
void ABTZPlayerController::ChangeCrouchState()
{
	if (ensure(CachedBaseCharacter.IsValid()))
	{
		CachedBaseCharacter->ChangeCrouchState();
	}

}

void ABTZPlayerController::StartSprint()
{
	if (ensure(CachedBaseCharacter.IsValid()))
	{
		CachedBaseCharacter->StartSprint();
	}
}

void ABTZPlayerController::StopSprint()
{
	if (ensure(CachedBaseCharacter.IsValid()))
	{
		CachedBaseCharacter->StopSprint();
	}
}

void ABTZPlayerController::ChangeProneState()
{
	if (ensure(CachedBaseCharacter.IsValid()))
	{
		CachedBaseCharacter->ChangeProneState();
	}
}

void ABTZPlayerController::ToggleInventory()
{
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Cyan, TEXT("ToggleInventory pressed"));
    }
    if (!InventoryWidgetInstance)
    {
        TSubclassOf<UInventoryWidget> ClassToUse = InventoryWidgetClass;
        if (!ClassToUse)
        {
            ClassToUse = UInventoryWidget::StaticClass();
        }
        InventoryWidgetInstance = CreateWidget<UInventoryWidget>(this, ClassToUse);
        if (InventoryWidgetInstance)
        {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± UMG ‚Äî AddToViewport (—É—Å—Ç–æ–π—á–∏–≤–æ –¥–ª—è PIE)
            InventoryWidgetInstance->AddToViewport(10000);
            InventoryWidgetInstance->SetVisible(false);
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Green, TEXT("Inventory widget created"));
            }
        }
        else
        {
            UE_LOG(LogTemp, Warning, TEXT("ToggleInventory: Failed to create inventory widget"));
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, TEXT("Failed to create inventory widget"));
            }
        }
    }

    if (InventoryWidgetInstance)
    {
        const bool bShow = !InventoryWidgetInstance->IsInventoryVisible();
        InventoryWidgetInstance->SetVisible(bShow);
        if (bShow)
        {
            // –†–µ–∂–∏–º –ò–≥—Ä–∞+UI: –∫–ª–∞–≤–∏—à–∞ I, Ctrl, Shift –¥–æ—Ö–æ–¥—è—Ç –¥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞; –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Look
            FInputModeGameAndUI Mode;
            Mode.SetWidgetToFocus(InventoryWidgetInstance->TakeWidget());
            Mode.SetLockMouseToViewportBehavior(EMouseLockMode::DoNotLock);
            Mode.SetHideCursorDuringCapture(false);
            SetInputMode(Mode);
            SetIgnoreLookInput(true);
            SetShowMouseCursor(true);
            // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤–æ –≤—å—é–ø–æ—Ä—Ç–µ –≤–∫–ª—é—á—ë–Ω –ø–æ–∫–∞–∑ UI –≤ PIE
            ConsoleCommand(TEXT("showflag.ui 1"), true);
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ñ—Ä–µ—à UI –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            if (CachedBaseCharacter.IsValid())
            {
                if (UInventoryComponent* Inv = CachedBaseCharacter->FindComponentByClass<UInventoryComponent>())
                {
                    InventoryWidgetInstance->RefreshInventoryUI();
                }
            }
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Yellow, TEXT("Inventory OPENED"));
            }
        }
        else
        {
            UWidgetBlueprintLibrary::SetInputMode_GameOnly(this);
            SetIgnoreLookInput(false);
            SetShowMouseCursor(false);
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Yellow, TEXT("Inventory CLOSED"));
            }
        }
    }
}

void ABTZPlayerController::TryClimbObstacle()
{
    if (ensure(CachedBaseCharacter.IsValid()))
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–≤–∏–∂–µ—Ç—Å—è –≤–ø–µ—Ä–µ–¥ (–Ω–∞–∂–∞—Ç–∞ W)
        float VelocitySize = CachedBaseCharacter->GetVelocity().Size();
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 1.0f, FColor::White, 
                FString::Printf(TEXT("Climb Input: Velocity = %.2f"), VelocitySize));
        }
        
        if (VelocitySize > 0.0f)
        {
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Cyan, TEXT("Climb Input: Attempting obstacle climb..."));
            }
            // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
            CachedBaseCharacter->TryClimbObstacle();
        }
        else
        {
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Orange, TEXT("Climb Input: Character not moving - climb cancelled"));
            }
        }
    }
    else
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, TEXT("Climb Input: No valid character!"));
        }
    }
}

void ABTZPlayerController::StartLeanLeft()
{
    if (ensure(CachedBaseCharacter.IsValid()))
    {
        if (APlayerCharacter* PC = Cast<APlayerCharacter>(CachedBaseCharacter.Get()))
        {
            PC->SetLeanTarget(-PC->MaxLeanAngleDeg);
        }
    }
}

void ABTZPlayerController::StopLeanLeft()
{
    if (ensure(CachedBaseCharacter.IsValid()))
    {
        if (APlayerCharacter* PC = Cast<APlayerCharacter>(CachedBaseCharacter.Get()))
        {
            PC->ResetLean();
        }
    }
}

void ABTZPlayerController::StartLeanRight()
{
    if (ensure(CachedBaseCharacter.IsValid()))
    {
        if (APlayerCharacter* PC = Cast<APlayerCharacter>(CachedBaseCharacter.Get()))
        {
            PC->SetLeanTarget(PC->MaxLeanAngleDeg);
        }
    }
}

void ABTZPlayerController::StopLeanRight()
{
    if (ensure(CachedBaseCharacter.IsValid()))
    {
        if (APlayerCharacter* PC = Cast<APlayerCharacter>(CachedBaseCharacter.Get()))
        {
            PC->ResetLean();
        }
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç—Ä–µ–π—Ñ–∞ –≤ PlayerController
void ABTZPlayerController::StartStrafeLeft()
{
    if (ensure(CachedBaseCharacter.IsValid()))
    {
        if (APlayerCharacter* PC = Cast<APlayerCharacter>(CachedBaseCharacter.Get()))
        {
            PC->HandleAInput(true);
        }
    }
}

void ABTZPlayerController::StopStrafeLeft()
{
    if (ensure(CachedBaseCharacter.IsValid()))
    {
        if (APlayerCharacter* PC = Cast<APlayerCharacter>(CachedBaseCharacter.Get()))
        {
            PC->HandleAInput(false);
        }
    }
}

void ABTZPlayerController::StartStrafeRight()
{
    if (ensure(CachedBaseCharacter.IsValid()))
    {
        if (APlayerCharacter* PC = Cast<APlayerCharacter>(CachedBaseCharacter.Get()))
        {
            PC->HandleDInput(true);
        }
    }
}

void ABTZPlayerController::StopStrafeRight()
{
    if (ensure(CachedBaseCharacter.IsValid()))
    {
        if (APlayerCharacter* PC = Cast<APlayerCharacter>(CachedBaseCharacter.Get()))
        {
            PC->HandleDInput(false);
        }
    }
}

void ABTZPlayerController::StartStrafeSpace()
{
    if (ensure(CachedBaseCharacter.IsValid()))
    {
        if (APlayerCharacter* PC = Cast<APlayerCharacter>(CachedBaseCharacter.Get()))
        {
            PC->HandleSpaceInput(true);
        }
    }
}

void ABTZPlayerController::StopStrafeSpace()
{
    if (ensure(CachedBaseCharacter.IsValid()))
    {
        if (APlayerCharacter* PC = Cast<APlayerCharacter>(CachedBaseCharacter.Get()))
        {
            PC->HandleSpaceInput(false);
        }
    }
}

// –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã —Å—Ä–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏
void ABTZPlayerController::StartFreeLook()
{
    if (bIsFreeLooking) return;
    
    bIsFreeLooking = true;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç –≥–æ–ª–æ–≤—ã
    if (CachedBaseCharacter.IsValid())
    {
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ—Ç–∞—Ü–∏—é –∫–∞–º–µ—Ä—ã –∫–∞–∫ –±–∞–∑–æ–≤—É—é
        BodyRotation = GetControlRotation();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç –≥–æ–ª–æ–≤—ã
        CachedBaseCharacter->ResetHeadRotation();
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç —Ç–µ–ª–∞
        CachedBaseCharacter->SetRotationBlocked(true);
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–≤–∏–∂–µ–Ω–∏—è
        if (UCharacterMovementComponent* CharMovement = CachedBaseCharacter->GetCharacterMovement())
        {
            CharMovement->bOrientRotationToMovement = false;
            CharMovement->bUseControllerDesiredRotation = false;
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –≥–æ–ª–æ–≤—ã
    HeadRotation = FRotator::ZeroRotator;
    InitialHeadRotation = FRotator::ZeroRotator;
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π
    SetIgnoreLookInput(true);
    SetIgnoreMoveInput(false); // –î–≤–∏–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Cyan, TEXT("FreeLook: Started - Head rotation only"));
    }
}

void ABTZPlayerController::StopFreeLook()
{
    if (!bIsFreeLooking) return;
    
    bIsFreeLooking = false;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    SetIgnoreLookInput(false);
    
    // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if (CachedBaseCharacter.IsValid())
    {
        CachedBaseCharacter->SetRotationBlocked(false);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç –≥–æ–ª–æ–≤—ã
        CachedBaseCharacter->ResetHeadRotation();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (UCharacterMovementComponent* CharMovement = CachedBaseCharacter->GetCharacterMovement())
        {
            CharMovement->bOrientRotationToMovement = true;
            CharMovement->bUseControllerDesiredRotation = true;
        }
    }
    
    if (GEngine)
    {
        GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Cyan, TEXT("FreeLook: Stopped - Head reset to body"));
    }
}

void ABTZPlayerController::FreeLookX(float Value)
{
    if (!bIsFreeLooking) return;
    
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≥–æ–ª–æ–≤—ã –¥–ª—è Transform (Modify) Bone (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
    HeadRotation.Yaw += Value * 2.0f; // –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞ –≥–æ–ª–æ–≤—ã
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç –≥–æ–ª–æ–≤—ã –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ (¬±120 –≥—Ä–∞–¥—É—Å–æ–≤)
    HeadRotation.Yaw = FMath::Clamp(HeadRotation.Yaw, -120.0f, 120.0f);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –≥–æ–ª–æ–≤—ã —á–µ—Ä–µ–∑ Transform (Modify) Bone
    if (CachedBaseCharacter.IsValid())
    {
        CachedBaseCharacter->SetHeadRotation(HeadRotation.Yaw, HeadRotation.Pitch);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –≥–æ–ª–æ–≤–æ–π
    // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É –Ω–∞ HeadRotation –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ BodyRotation
    FRotator CombinedRotation = FRotator(
        BodyRotation.Pitch + HeadRotation.Pitch,
        BodyRotation.Yaw + HeadRotation.Yaw,
        BodyRotation.Roll + HeadRotation.Roll
    );
    SetControlRotation(CombinedRotation);
}

void ABTZPlayerController::FreeLookY(float Value)
{
    if (!bIsFreeLooking) return;
    
    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≥–æ–ª–æ–≤—ã –¥–ª—è Transform (Modify) Bone (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
    HeadRotation.Pitch -= Value * 2.0f; // –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∫–ª–æ–Ω–∞ –≥–æ–ª–æ–≤—ã
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–∞–∫–ª–æ–Ω –≥–æ–ª–æ–≤—ã –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑ (¬±60 –≥—Ä–∞–¥—É—Å–æ–≤)
    HeadRotation.Pitch = FMath::Clamp(HeadRotation.Pitch, -60.0f, 60.0f);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –≥–æ–ª–æ–≤—ã —á–µ—Ä–µ–∑ Transform (Modify) Bone
    if (CachedBaseCharacter.IsValid())
    {
        CachedBaseCharacter->SetHeadRotation(HeadRotation.Yaw, HeadRotation.Pitch);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –≥–æ–ª–æ–≤–æ–π
    // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É –Ω–∞ HeadRotation –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ BodyRotation
    FRotator CombinedRotation = FRotator(
        BodyRotation.Pitch + HeadRotation.Pitch,
        BodyRotation.Yaw + HeadRotation.Yaw,
        BodyRotation.Roll + HeadRotation.Roll
    );
    SetControlRotation(CombinedRotation);
}
